<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你好我是森林</title>
  
  <subtitle>你好我是森林</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chensenlin.cn/"/>
  <updated>2018-05-28T08:42:48.931Z</updated>
  <id>https://chensenlin.cn/</id>
  
  <author>
    <name>你好我是森林</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>管理你的大脑--幕布</title>
    <link href="https://chensenlin.cn/posts/25517/"/>
    <id>https://chensenlin.cn/posts/25517/</id>
    <published>2018-05-28T08:10:17.000Z</published>
    <updated>2018-05-28T08:42:48.931Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>幕布</p><p>不只是大纲笔记</p><p>更是一种思考方式</p><p>不试试？</p><a id="more"></a><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><h4 id="思维导图，超好用的思维辅助工具"><a href="#思维导图，超好用的思维辅助工具" class="headerlink" title="思维导图，超好用的思维辅助工具"></a>思维导图，超好用的思维辅助工具</h4><p>在幕布中，大纲笔记与思维导图可以一键转换，再也不需要为思维导图的编辑而头疼。幕布帮你将宝贵的精力节省下来，让你专注于内容创作。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-05-28-15274954321167.jpg" alt="基本格式版"></p><p>转换后</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-05-28-15274954744260.jpg" alt="思维导图版"></p><h4 id="高效的结构化笔记"><a href="#高效的结构化笔记" class="headerlink" title="高效的结构化笔记"></a>高效的结构化笔记</h4><p>幕布通过大纲来组织内容，无论是读书笔记、活动策划、会议记录还是待办清单，都能完美胜任，这种更具条理性的写作方式，会带给你全新的体验，极简可靠。</p><h4 id="轻松自然的分享方式"><a href="#轻松自然的分享方式" class="headerlink" title="轻松自然的分享方式"></a>轻松自然的分享方式</h4><p>无论是微信、QQ 还是微博，通过链接，你可以将文档分享给任何人。轻松自然的分享方式，让你更便捷地传递信息。</p><p>可以导出为FreeMind和图片，FreeMind文件可以导入到其他的思维导图工具，例如Xmind。</p><h4 id="云端自动同步"><a href="#云端自动同步" class="headerlink" title="云端自动同步"></a>云端自动同步</h4><p>多平台数据自动同步，随时随地，阅读创作。有幕布在手，一切得心应手。</p><h4 id="轻松协作，团队共享"><a href="#轻松协作，团队共享" class="headerlink" title="轻松协作，团队共享"></a>轻松协作，团队共享</h4><blockquote><p>即将发布</p></blockquote><p>发送链接，即刻开始协作。释放团队潜能，效率满载。</p><h4 id="多平台支持"><a href="#多平台支持" class="headerlink" title="多平台支持"></a>多平台支持</h4><p>目前支持的平台：网页版，桌面版，安卓版，iOS版，iPad，微信等。</p><h3 id="高级版功能"><a href="#高级版功能" class="headerlink" title="高级版功能"></a>高级版功能</h3><p>更丰富的功能，更生动的展现</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-05-28-15274964213067.jpg" alt="免费版和高级本区别"></p><h4 id="无限空间，无限数量"><a href="#无限空间，无限数量" class="headerlink" title="无限空间，无限数量"></a>无限空间，无限数量</h4><p>无限文档存储空间，单文档无限记录条数，您可以把一整本书摘录到幕布中。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-05-28-15274959098989.jpg" alt=""></p><h4 id="内容高级样式"><a href="#内容高级样式" class="headerlink" title="内容高级样式"></a>内容高级样式</h4><p>3种标题字号，多种字体颜色，让您的段落清晰，重点突出。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-05-28-15274959337411.jpg" alt=""></p><h4 id="文档插入图片"><a href="#文档插入图片" class="headerlink" title="文档插入图片"></a>文档插入图片</h4><p>复制粘贴，选择图片文件拖入文档，多种方式轻松快捷插入图片。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-05-28-15274959487995.jpg" alt=""></p><h4 id="思维导图高级风格"><a href="#思维导图高级风格" class="headerlink" title="思维导图高级风格"></a>思维导图高级风格</h4><p>4种结构、10种风格，让您的思维导图模式更美观，加强大脑印象。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-05-28-15274959735396.jpg" alt=""></p><h4 id="更多导出类型"><a href="#更多导出类型" class="headerlink" title="更多导出类型"></a>更多导出类型</h4><p>思维导图导出图片、FreeMind、文档导出OPML，更好的和其他工具配合使用。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-05-28-15274960000032.jpg" alt=""></p><blockquote><p>高级版可以通过邀请好友获得，详情：<a href="https://mubu.com/exchange" target="_blank" rel="noopener">https://mubu.com/exchange</a></p></blockquote><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>幕布就像笔记本一样，直接输入文字即可</p><p>每段文字前面都有一个小圆点，一个圆点为一个主题</p><p>创建新主题：「Enter」键/回车键</p><p>调整主题层级：「Tab」键缩进一级，「Shift+Tab」提升一级</p><h4 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h4><p>鼠标悬浮在主题上时，小圆点前面会出现展开/收起的图标，点击即可展开/收起，快捷键「⌘ + . 」</p><p>用鼠标点击按住小圆点，可以随意拖动调整主题的位置（可框选批量拖动），也可使用「⌘ + Shift + ↑/↓ 」向上/下移动主题</p><p>点击每个主题前的小圆点，可进入此主题，专注于一件事，快捷键「⌘ + ] 」</p><p>进入主题后，顶部会出现层级导航菜单，可用鼠标点击，也可使用「⌘ + [ 」返回上一级</p><h4 id="主题功能菜单"><a href="#主题功能菜单" class="headerlink" title="主题功能菜单"></a>主题功能菜单</h4><p>鼠标悬于小圆点上方时，出现主题功能菜单，可以完成更多操作</p><p>完成：将主题标记为完成状态，快捷键「⌘ + Enter」，再次按下可取消</p><p>编辑描述：为主题添加更详细的描述内容，快捷键「Shift + Enter」</p><p>添加图片：将本地图片文件插入到文档中，快捷键「Alt+ Enter」</p><p>删除：快速删除整个主题，快捷键「⌘+ Shift + Delete」</p><p>文字样式：修改字号大小及颜色</p><h4 id="通用快捷键"><a href="#通用快捷键" class="headerlink" title="通用快捷键"></a>通用快捷键</h4><p>按下「⌘+ A」全选当前主题，再次按下全选整个文档</p><p>「 ⌘ + B」加粗； 「 ⌘ + I」斜体； 「 ⌘ + U」下划线。</p><p>选中文字后按下「⌘+ C」复制，「⌘ + V」粘贴</p><p>按下「⌘ + Z」撤销，按下「⌘ + Shift + Z」恢复</p><h4 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h4><p>幕布提供了#和@两种标签，帮助您更好地对主题归类</p><p>直接输入#或者@开始添加标签，如果是在内容中间，#或者@符号前边要以空格开始，将标签和内容区分</p><p>点击标签后，可快速过滤内容进，筛选出文档中例如 @张三 的所有主题</p><p>两种标签功能是一样的，您可以在@后面接人，#后面接事件，更好地进行管理</p><p>标签内容至少四个字符，即四个英文数字或者两个中文字符</p><h3 id="我的幕布作品"><a href="#我的幕布作品" class="headerlink" title="我的幕布作品"></a>我的幕布作品</h3><p>【读书会】第54期 《EOS技术及生态系统介绍》读书笔记 ：<a href="https://mubu.com/doc/explore/14437" target="_blank" rel="noopener">https://mubu.com/doc/explore/14437</a></p><p>《原则》- 工作原则&amp;生活原则：<a href="https://mubu.com/doc/explore/13760" target="_blank" rel="noopener">https://mubu.com/doc/explore/13760</a></p><p>《把时间当作朋友》：<a href="https://mubu.com/doc/explore/13739" target="_blank" rel="noopener">https://mubu.com/doc/explore/13739</a></p><h3 id="注册幕布"><a href="#注册幕布" class="headerlink" title="注册幕布"></a>注册幕布</h3><p>幕布注册地址：<a href="https://mubu.com/inv/100324，" target="_blank" rel="noopener">https://mubu.com/inv/100324，</a> 根据此链接注册可获得15天高级版会员。</p><blockquote><p>文章内容来自幕布官网。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;幕布&lt;/p&gt;
&lt;p&gt;不只是大纲笔记&lt;/p&gt;
&lt;p&gt;更是一种思考方式&lt;/p&gt;
&lt;p&gt;不试试？&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://chensenlin.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="幕布" scheme="https://chensenlin.cn/tags/%E5%B9%95%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>Mac搭建yaf项目</title>
    <link href="https://chensenlin.cn/posts/36403/"/>
    <id>https://chensenlin.cn/posts/36403/</id>
    <published>2018-05-22T04:50:30.000Z</published>
    <updated>2018-05-22T12:10:39.419Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>官网地址：<a href="https://github.com/laruence/yaf" target="_blank" rel="noopener">https://github.com/laruence/yaf</a></p><a id="more"></a><h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><p>最基本的几个软件应该有的。</p><p>Homebrew,PHP,Nginx,MySQL(暂时用不到)。</p><p>或者，电脑应该有一个PHP的开发环境。</p><p>本次的环境：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ php -v</span><br><span class="line">PHP 7.1.14 (cli) (built: Feb  2 2018 08:42:59) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Xdebug v2.5.5, Copyright (c) 2002-2017, by Derick Rethans</span><br><span class="line">➜  ~ nginx -v</span><br><span class="line">nginx version: nginx/1.12.1</span><br><span class="line">➜  ~ brew -v</span><br><span class="line">Homebrew 1.6.4</span><br><span class="line">Homebrew/homebrew-core (git revision 530af; last commit 2018-05-20)</span><br></pre></td></tr></table></figure><h3 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h3><p>直接采用brew进行扩展安装。</p><p><code>brew install php71-yaf</code></p><p>检查：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ php -m | <span class="type">grep</span> yaf</span><br><span class="line">yaf</span><br></pre></td></tr></table></figure><p>表示yaf的扩展安装完成。</p><h3 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h3><p>仓库地址：<a href="https://github.com/laruence/yaf" target="_blank" rel="noopener">https://github.com/laruence/yaf</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/laruence/yaf</span><br><span class="line"><span class="keyword">cd</span> tools</span><br><span class="line"><span class="keyword">cd</span> <span class="keyword">cg</span></span><br><span class="line">php yaf_cg yafApi</span><br><span class="line"><span class="keyword">cd</span> output</span><br><span class="line"><span class="keyword">cp</span> -R yafApi /User/demo/project/yafApi</span><br></pre></td></tr></table></figure><h3 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h3><p>我的环境目录：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="keyword">conf</span>.<span class="keyword">d</span> <span class="keyword">pwd</span></span><br><span class="line">/usr/<span class="keyword">local</span>/etc/nginx/<span class="keyword">conf</span>.<span class="built_in">d</span></span><br></pre></td></tr></table></figure><p>新建虚拟主机</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-05-22-15269654862508.jpg" alt="yaf虚拟主机"></p><p>检查nginx配置文件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="keyword">conf</span>.<span class="keyword">d</span> nginx -t</span><br><span class="line">nginx: the configuration <span class="keyword">file</span> /usr/<span class="keyword">local</span>/etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> is ok</span><br><span class="line">nginx: configuration <span class="keyword">file</span> /usr/<span class="keyword">local</span>/etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> is successful</span><br></pre></td></tr></table></figure><p>重启nginx服务</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>services restart nginx</span><br></pre></td></tr></table></figure><h3 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h3><p><code>sudo vim /etc/hosts</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">yaf</span> <span class="selector-tag">api</span></span><br><span class="line"> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>  <span class="selector-tag">www</span><span class="selector-class">.yaf</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-05-22-15269661209100.jpg" alt="访问成功"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官网地址：&lt;a href=&quot;https://github.com/laruence/yaf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/laruence/yaf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="https://chensenlin.cn/tags/PHP/"/>
    
      <category term="Mac" scheme="https://chensenlin.cn/tags/Mac/"/>
    
      <category term="yaf" scheme="https://chensenlin.cn/tags/yaf/"/>
    
      <category term="Nginx" scheme="https://chensenlin.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>《慕课革命--互联网如何变革教育》</title>
    <link href="https://chensenlin.cn/posts/23112/"/>
    <id>https://chensenlin.cn/posts/23112/</id>
    <published>2018-05-15T01:00:10.000Z</published>
    <updated>2018-05-28T08:44:51.383Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>书籍来源于@Dean Huo赠送，我用笔记、思考作为回馈</p><p>笔记采用问答式进行，筛选和总结我的问题，并在书中寻找答案</p><p>全书共五大篇，18章节，约15万字</p><a id="more"></a><h3 id="书籍信息"><a href="#书籍信息" class="headerlink" title="书籍信息"></a>书籍信息</h3><p>大规模在线教育的慕课革命大幕已经拉开，这是一场基于互联网及移动互联网的教育大变革。本书通过大量国内外的实践案例，告诉读者慕课的发展历史和趋势，中国该如何应对，以及慕课的商业模式有哪些、如何赚钱等。</p><h3 id="作者信息"><a href="#作者信息" class="headerlink" title="作者信息"></a>作者信息</h3><p>汤敏，美国伊利诺伊大学经济系博士。现任国务院参事，友成企业家扶贫基金会常务副理事长。先后担任亚洲开发银行经济发展研究中心经济学家、亚洲开发银行驻中国代表处副代表兼首席经济学家、国务院发展研究中心中国发展研究基金会副秘书长。同时兼任中国人民银行[微博]研究生部部务委员会副主席，北京大学中国经济研究中心、武汉大学经济学院兼职教授，北京智石经济研究院院长，“中国经济50人论坛”专家成员。</p><h3 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h3><ol><li>对慕课的定义是什么，它有什么内在特征？</li><li>目前市面上的慕课有哪些？具体的状况怎么样？</li><li>工业又革命了，教育不革命行吗？</li><li>中国慕课教育的背景是什么？主要的突破口在哪儿？</li><li>翻转课堂的慕课能颠覆“你教我学”的课堂模式吗？中国在中小学教育有什么尝试？</li><li>慕课的最大受益者是老师，而最大的受害群体也可能是老师，教师们应该如何应对呢？</li><li>传统教育下，教育不可能公平，而在慕课教育模式下，教育公平是不是会出现希望呢？</li><li>慕课下的高考如何改，慕课下还用高考吗？还需要高考吗？</li><li>免费模式既是互联网精神的体现，也是众多企业的杀手锏。如果慕课全部免费，那么它如何赚钱呢？它能不能赚钱？市场如何？</li><li>慕课到底是一场革命还是一场泡沫？</li><li>政府对慕课的管理边界在哪里？该管什么，不该管什么？</li><li>慕课的未来？</li><li>慕课革命，浩浩荡荡,学生或家长或雇员或老板或官员或平民，怎样才能不错过这场革命呢？</li></ol><h4 id="01-对慕课的定义是什么，它有什么内在特征？"><a href="#01-对慕课的定义是什么，它有什么内在特征？" class="headerlink" title="01. 对慕课的定义是什么，它有什么内在特征？"></a>01. 对慕课的定义是什么，它有什么内在特征？</h4><p>维基百科的定义：</p><p>大规模开放在线课堂（课程），又称慕课（英语：<code>Massive Open Online Course/MOOC</code>)，是一种针对于大众人群<strong>的在线课堂</strong>，人们可以通过网络来学习在线课堂。MOOC是远程教育的最新发展，它是一种通过开放教育资源形式而发展来的。</p><p>慕课：<strong>MOOC</strong>,有四个字母，含义如下：</p><p><strong>M</strong>: Massive(大规模)。表明学习人数至多，可能8万人，可能10万不等；<br><strong>O</strong>: Open(开放的)。表明学习的对象不受约束，无论是谁都可以参加学习；<br><strong>O</strong>: Online(在线)。表明学习方式在线上，可以不受时间、空间等限制；<br><strong>C</strong>: Course(课程)。</p><p>总结一句话：「 <strong>慕课是以网络化学习的开放教育为基础</strong> 」。</p><p>综合其概念我们可以延伸和总结一下<strong>慕课的特点</strong>：</p><ol><li>知识点，短视频。</li><li>随堂考试，满10分过关。</li><li>兵评兵，机评兵。</li><li>虚拟课堂，规模PK。</li><li>大数据分析，小数据跟踪。</li></ol><p>从根本上来说，以互联网为平台的慕课，可以实现多对多的“众人可以同时发言、倾听和回应”的功能。从根本上说能打破传统课堂的“一对多”的局限性，能过实现大范围的<strong>探究式、讨论式、参与式</strong>的学习方式。</p><h4 id="02-目前市面上的慕课有哪些？具体的状况怎么样？"><a href="#02-目前市面上的慕课有哪些？具体的状况怎么样？" class="headerlink" title="02. 目前市面上的慕课有哪些？具体的状况怎么样？"></a>02. 目前市面上的慕课有哪些？具体的状况怎么样？</h4><p>慕课三巨头：<strong>edX</strong>、<strong>Coursera</strong>和<strong>Udacity</strong>;</p><p><strong>edX</strong></p><p>哈佛和麻省理工学院合办的<strong>非营利性的网络课程开源技术平台</strong>。该平台的不仅将网络课程资源免费提供给注册学员，同时也为参加联盟校方成员提供教育学的研究工具和数据。其主要目标是为在线学生建立一个全球性的课堂，扩大高校同盟体影响力。同时，它还探讨如何用技术改变校园学习和在线学习。2013年5约，edX宣布又有15所高校加入，其中有清华大学、北京大学等6所亚洲高校。</p><p><strong>Coursera</strong></p><p>截止2014年7月，其平台聚集了来自普林斯顿大学、哈佛大学等上百所大学的课堂。2013年7月上海交通大学成为中国第一个加入的高校。未来Coursera网络教育计划将于更多的大学合作，提供更多样性的课程。</p><p><strong>Udacity</strong></p><p>成立时间最早的慕课平台。主要是以计算机为主，数量不多，但十分精致。同时还有学习管理系统、论坛和社交元素。</p><p>据统计，目前世界上已经出现32个(数据来源未知)慕课平台，当然数据还在增加。例如Stanford Online、NovoED,FutureLearn、Open2Study、Lversity、Ewant、FUM等。中国也有自己的慕课平台，例如学堂在线、果壳网MOOC学院、果实网、慕课网等。2013年被称为中国慕课元年。</p><h4 id="03-工业又革命了，教育不革命行吗？"><a href="#03-工业又革命了，教育不革命行吗？" class="headerlink" title="03. 工业又革命了，教育不革命行吗？"></a>03. 工业又革命了，教育不革命行吗？</h4><p>中国分别失去了18世纪晚期的第一次工业革命和1913年的第二次工业革命。第一次主要是当时的中国处于康乾盛世，GDP稳居世界第一，闭关锁国的中国没有赶上第一次工业革命；第二次主要是整个正在推翻晚清统治，军阀混乱，导致落后的中国上百年都在挨打。</p><p>与新工业革命眼小呼应，一场新的教育革命-慕课革命也在不断逼近。</p><p>新的工业革命需要大量的创新型人才，而目前以应试为主的教育方式不能适应这样的需求。标准化的教育方式制造了大生产时代的可用人才，从根本上来说，这种教育就是为流水线培养工人、培养工程师的。现在的问题是如何才能创造出一批能过适应第三次工业革命的有全新机制的教育机构呢？如何利用最新的机制和技术手段、以更大规模、更低成本、更新的模式、更快的速度为更多的年轻人创造出更好的教育环境呢？</p><p>慕课革命正式顺应这些需求应运而生的。慕课的特点是<strong>无论是谁，无论在什么时间或者什么地点都能学到任何的知识技能</strong>。有了慕课，学生的学习才真正的有了选择，学习才能真正的成为个性化的事，能做到因材施教，当慕课充分发展后，就能做到让每个学习者根据自己的兴趣、程度等实际情况来学习自己感兴趣的知识和技能。</p><p>关注这些最新的变化，关注并参与这场最新的工业革命和教育革命，是我们国家未来能够在世界竞争中获得领先地位的根本保证！</p><h4 id="04-中国慕课教育的背景是什么？主要的突破口在哪儿？"><a href="#04-中国慕课教育的背景是什么？主要的突破口在哪儿？" class="headerlink" title="04. 中国慕课教育的背景是什么？主要的突破口在哪儿？"></a>04. 中国慕课教育的背景是什么？主要的突破口在哪儿？</h4><p>大学生的就业问题一直是中国社会一大问题，每年秋季毕业时，总有上百万的大学生找不到工作。一般来说，大学生就业难的问题，很多人归结为「扩招」导致的。大学生就业难是因为我国的大学教育和市场需求不太吻合，中国经济正在发生着一日千里的变化，但学校总的来说还是以“精英教育”培养学者，企业找不到满意的学生，主要是来自于大学生缺乏企业的所需要的技术技能，因为他们为人处事、解决问题的能力不行。</p><p>综上，我国的慕课教育主要突破口是<strong>职业教育</strong>，传统模式不能保证质量，所以慕课能解决绝大多数问题。慕课可以解决职教师资不足的问题。</p><p>现有的职业教育高校可以把自己学校比较优秀的课程制作成慕课挂在网上，同时大中行企业可以把它们适合职业高校使用的培养员工的优秀课程制成慕课，让高职学生学习。于此同时，企业还可以找优秀的工程师等进行线上答疑、讨论等。这样做能够保证企业找到自己需要的员工，学生能学到实际的技能。最后，为了保证教学质量，国家剋组织各方面专家，成立慕课审查委员会，专门负责慕课教育管理和教学质量把控等工作。</p><p>所以，<strong>中国慕课应该以职教优先</strong>。</p><h4 id="05-翻转课堂的慕课能颠覆“你教我学”的课堂模式吗？中国在中小学教育有什么尝试？"><a href="#05-翻转课堂的慕课能颠覆“你教我学”的课堂模式吗？中国在中小学教育有什么尝试？" class="headerlink" title="05. 翻转课堂的慕课能颠覆“你教我学”的课堂模式吗？中国在中小学教育有什么尝试？"></a>05. 翻转课堂的慕课能颠覆“你教我学”的课堂模式吗？中国在中小学教育有什么尝试？</h4><p>翻转课堂是将课堂的教学方式反过来，从在学校上课变成在家里上课；在家里做作业，变成在学校做作业；由老师讲课变成让学生讲课。这样的教学方式最初来自美国。翻转课堂其实就是慕课模式的一部分。翻转课堂强调线上与线下的结合，即“O2O”的方式。学生可以看到自己老师的课程，也能看到全国升值世界其他老师课程。老师可以通过计算机才知道每个学生学习进度以及完成作业的情况，保持和孩子们的沟通。</p><p>中国式的慕课尝试有直接将课程带到教育最薄弱的贫困乡村学校去。或称之为<strong>双师教学</strong>，即：通过互联网，把城市优质的教学资源送到贫困地区的乡村学校中去。每个乡村试验班有两个老师，一个人大附中远程授课教师，另一位是乡村的现场教学老师。各司其职，互相配合。其面临的最大跳转就是优质的教育资源一般是为优秀的学生提供的，而双师教学的另一端确是程度较差的学生。这不仅是中国双师教育的问题，同样也是全世界慕课教育面临的问题。</p><p>中国在中小学教育尝试有：常青义教、千千树幼儿园、村小的婚龄教学等。</p><h4 id="06-慕课的最大受益者是老师，而最大的受害群体也可能是老师，教师们应该如何应对呢？"><a href="#06-慕课的最大受益者是老师，而最大的受害群体也可能是老师，教师们应该如何应对呢？" class="headerlink" title="06. 慕课的最大受益者是老师，而最大的受害群体也可能是老师，教师们应该如何应对呢？"></a>06. 慕课的最大受益者是老师，而最大的受害群体也可能是老师，教师们应该如何应对呢？</h4><p>慕课的大规模推广，会不会导致大量的老师失业？从世界上其他发展慕课的经验来看，慕课与翻转课堂对老师的要求更高。老师不仅要负责线上的课程，还需要在线下和学生进行辅导，对于中小学教育更需要线上的讲课与线下的翻转课堂相结合。</p><p>毋庸置疑，慕课将会颠覆传统的教学方法，改变很多教师的工作方式。未来的教室更像一个导师，从以“教”为主，变成以“导”为主。同时，当慕课普及到一定的程度来说，也需要对老师进行一些培训，以适应慕课的新教学方法。会讲课不一定会指导学生讨论，不一定会辅导。最后，对于滥竽充数、混日子的老师来说，在慕课革命下就可能会被淘汰。</p><p><strong>推动慕课发展的主要因素</strong>主要有：<strong>具有战略眼光的校长们，学校的老师，风险投资者，学习者，企业家群体</strong>等。</p><h4 id="07-传统教育下，教育不可能公平，而在慕课教育模式下，教育公平是不是会出现希望呢？"><a href="#07-传统教育下，教育不可能公平，而在慕课教育模式下，教育公平是不是会出现希望呢？" class="headerlink" title="07. 传统教育下，教育不可能公平，而在慕课教育模式下，教育公平是不是会出现希望呢？"></a>07. 传统教育下，教育不可能公平，而在慕课教育模式下，教育公平是不是会出现希望呢？</h4><p>教育公平分为三个层次：第一，<strong>受教育的机会公平</strong>；第二，<strong>受教育的质量公平</strong>；第三，<strong>使受教育的效果公平</strong>。即：“有学上，上好学，上学好”。影响教育公平分为软件和硬件。对于硬件来说，只要国家加大投入，提高学校的基础设施建设水平，有可能达到公平。软件方面在传统的教育模式下几乎不可能达到公平。但是慕课的出现，能过让教育公平的第二层次有了视线的希望。通过网络方式，优质的教育资源和师资团队，人人可享。</p><h4 id="08-慕课下的高考如何改，慕课下还用高考吗？还需要高考吗？"><a href="#08-慕课下的高考如何改，慕课下还用高考吗？还需要高考吗？" class="headerlink" title="08. 慕课下的高考如何改，慕课下还用高考吗？还需要高考吗？"></a>08. 慕课下的高考如何改，慕课下还用高考吗？还需要高考吗？</h4><p>高考的改革，对于正在蓄势待发的慕课来说是“生正时”。改变就有机会，大改变就有大机会。慕课以它的网络化、规模化的优势，能把优质的教育资源大众化，能使稀缺的教育资源普及化，而这切又能以很低的成本来实现。</p><p>总之高考改革给学生提供了一个新的学习与发展机会。为落实高考改革，需要更多地使用慕课这个新模式。高考改革给了慕课巨大的发展空间。而有了慕课的保驾护航，高考改革就可以更公平、更公正，真正地达到改革的目的。</p><p>当大量企业把他们的内训课慕课化后，当学生在四年里主要上的是企业提供的慕课时；当申请企业的工作岗位的前提条件是要考过该企业提供的慕课，参加过企业的实习时；是哪个学校毕业的还有那么重要吗？同样，高考的作用也会大大减弱。再想更远一点的未来，学生在中小学中学习、活动都数据化了用大数据分析，就可以了解到这个学生的优缺点、兴趣、发展潜力等，大学可以根据这些数据来挑选自己希望培养的学生。当然，这里还有一个条件是社会的诚信要大大地提高，走后门的现象大体上能够杜绝。那时，一个根本就不用高考的日子就会到来。</p><h4 id="09-免费模式既是互联网精神的体现，也是众多企业的杀手锏。如果慕课全部免费，那么它如何赚钱呢？它能不能赚钱？市场如何？"><a href="#09-免费模式既是互联网精神的体现，也是众多企业的杀手锏。如果慕课全部免费，那么它如何赚钱呢？它能不能赚钱？市场如何？" class="headerlink" title="09. 免费模式既是互联网精神的体现，也是众多企业的杀手锏。如果慕课全部免费，那么它如何赚钱呢？它能不能赚钱？市场如何？"></a>09. 免费模式既是互联网精神的体现，也是众多企业的杀手锏。如果慕课全部免费，那么它如何赚钱呢？它能不能赚钱？市场如何？</h4><p>到目前为止，包括中国在内的全世界范围内的慕课基本上是免费的，他们的理念是：“任何人、在任何时间、任何地方能学到任何知识。”对于广大学子来说，特别是对那些靠助学贷款上学的贫困家庭来说，这无疑是一个大福音。近二三十年来，全世界的大学学费都在涨。我国也从上大学免费到收取部分学费。</p><p>能听到全国甚至全世界最好的课，还是免费的，世界上真有这么好的事情吗？慕课的老师都是一流的教授，慕课的拍摄费用，按哈佛与麻省理工学院成立的edX公司的估算，一门课就要25万美金。再加上网络维护、上课学生答疑、学分管理等，花费绝对不菲。</p><p>互联网时代，就是一个免费的时代，是一个第三方付费的时代，因此慕课免费也并不奇怪。有一本叫《免费》的畅销书就点出了互联网免费的秘密。从理论上看，在互联网时代，买卖双方信息不对称将慢慢地成为历史。在信息高度平等、透明的时代，企业很难再依靠操作市场价格来赢利。所以，通过免费迅速扩大用户规模，做出好产品，就能扩大市场份额，这才是互联网企业赚钱的好方法。</p><p>套用《免费》使用的概念，在教育领域可以有四种免费模式。</p><p>1、<strong>交叉补贴型</strong>，用免费吸引客户购买其他商品；<br>2、<strong>第三方付费</strong>，通过免费服务或者产品聚集大量的客户，由广告商付费；<br>3、<strong>免费加收费模式</strong>；<br>4、可以<strong>获得其他的“收入”</strong>，例如声誉、表达观点、分享快乐或者纯粹的兴趣。</p><p>除此之外，还有其他的模式。例如，类似<strong>猎头公司的收费模式</strong>和<strong>O2O模式</strong>（即线上与线下相结合的模式）。</p><p>最近，网易教育联合有道发起制作的《 2013 中国在线教育新趋势调查报告》揭示：七成白领都有在线教育需求。</p><p>中国互联网的三巨头，阿里、百度、腾讯，纷纷淌进慕课这池浑水中。按清科研究中心的估计，2012年中国网络教育规模已经突破了700亿元人民币。《2013中国在线教育新趋势调查报告》也揭示，在线教育年增长率超过线下教育14倍，预计2015年在线教育产业规模将达到1600亿元，占整体市场的40％。</p><p>据统计，仅仅在 2013 年前 8 个月，国内就有 23 家在线教育企业获得几十万到几千万美元不等的融资，比如猿题库获 700 万美元融资，沪江网获 2000 万美元融资等。</p><h4 id="10-慕课到底是一场革命还是一场泡沫？"><a href="#10-慕课到底是一场革命还是一场泡沫？" class="headerlink" title="10. 慕课到底是一场革命还是一场泡沫？"></a>10. 慕课到底是一场革命还是一场泡沫？</h4><p>2012年是慕课元年，而2013年就被称为“反慕课元年”。</p><p>主要原因有：</p><p>1、<strong>就业市场上的折戟沉沙</strong>。慕课最吸引人的地方就是提高学员的职场竞争力，而最后的结果是通过推荐886名学生中最终只有3名获得了面试机会。原因很简单，公司的人力资源部门更喜欢有传统大学经历的候选人，而在慕课学习且通过考试的学员怎么保证学习或者考试没有作弊的行为呢？会不会有他人代替考试呢？所以慕课的成绩不能代表并证明其学员的实际应用能力。</p><p>2、<strong>教授们的质疑</strong>。公立学校办学经费吃紧，相比于雇用教员上课，使用慕课可以为学校省下更多的钱。他们忧虑的是，越来越多地使用慕课最终会导致学校当局减少雇用教授的数量。慕课有可能改变整个教育的格局。慕课的兴起，是名校、名师和名课对普通的学校、教师以及课程的冲击。未来的教师应该如何定位？未来的学校应该如何定位？当教育的主体 —— 教师对慕课都产生了怀疑、恐惧、抵制时，慕课还能推动下去吗？</p><p>3、慕课的软肋：<strong>完成率低</strong>。当前慕课的最大软肋之一是学习的学生完成率低。以斯坦福大学的Udacity公司开的课为例，目前仅有5%至16%的完成率，通过率更低。因此有人得出结论，慕课不可能是传统教育的有效替代品。果壳网在2013年10月对慕课中文用户做了问卷调研，调查发现，在国内用户中，有43%选择了2~3门慕课课程学习，29%选择1门课程，25%选择4~10门；但67%的用户一门课程都没完成，16%所选课程完成了不到一半；只有6%的用户完成了全部所选课程。在“阻挠完成慕课课程的原因”一项中，可以投入的时间有限、缺乏毅力和语言障碍分别列前三位，占比59%、55%和55%。</p><p>4、<strong>对慕课教学方法的质疑</strong>。慕课发展潜在的受损者——教师们对它有所保留，这可以理解，但慕课不受它的最大受益者——学生——的喜爱就有点令人费解了。尼尔森的《中国在线教育调查报告》显示，我国的在线教育用户中只有不到一成的用户表示“非常满意”，有48%的认为无法和老师互动交流答疑，39%的认为没有课堂气氛。这些都成为在线教育课程最突出的问题。而且，在线教育需要学生有较强的自主学习能力，而这正是中国学生所普遍缺乏的。</p><p>慕课教学上的特点之一就是用了很多网络游戏的技术，让学习者能快乐地学习，在玩中学习。对这一问题，也有持不同意见的人，他们认为网络游戏能够吸引玩家就是利用了人性的弱点。而对于学习来说，它其实恰恰与游戏的设计理念背道而驰。将教育与网络游戏对比，会发现至少有两大不同。第一，<strong>目的性不同</strong>。游戏的目的是放松。但学习绝对不会是一件轻松的事情。第二是<strong>成就感</strong>。什么是成就感？说白了就是快感。而学习知识呢？都是要通过努力和汗水去获得知识，快感很难形成。几千年来，人们一直在摸索如何让学习变得更加有趣，但是效果不佳。让学习游戏化，就能轻松搞定知识的学习？恐怕没有那么容易。</p><p>对慕课的质疑，还可以找到很多很多。慕课的兴起毕竟只有几年的时间，它还是一个新生儿。任何新事物从出现到完善都要经历一个过程。斯坦福大学校长约翰·亨尼斯的看法可以代表大多数人对慕课的态度，他说：“我不能确切地告诉你慕课会如何变革教育，我的目标是自己参与进去，而不仅是静观其变。”</p><h4 id="11-政府对慕课的管理边界在哪里？该管什么，不该管什么？"><a href="#11-政府对慕课的管理边界在哪里？该管什么，不该管什么？" class="headerlink" title="11. 政府对慕课的管理边界在哪里？该管什么，不该管什么？"></a>11. 政府对慕课的管理边界在哪里？该管什么，不该管什么？</h4><p>慕课所涉及的领域，都是在政府深度参与和主导的教育领域。现在从幼儿园、九年义务教育、高中阶段、大学、研究院、职业培训到终生教育，都有慕课的身影，都存在着慕课发展的巨大空间。可是这些领域又是意识形态、宣传教育、公共财政的重要领域，影响到社会的方方面面，政府的参与和主导是不可避免的。</p><p>中国政府不断提升对用信息化手段实现教育公平及资源共享的重视。在十八届三中全会的决议中，专门为慕课在中国的发展留出了一段话：“<strong>构建利用信息化手段扩大优质教育资源覆盖面的有效机制，逐步缩小区域、城乡、校际差距</strong>。”</p><p>法律法规没有规定不能做的，都可以去做。政府可以监管，但要依法监管。法规没有规定要管的，就不能随心所欲地去管。这跟过去的正面清单管理的思路有了巨大的进步。同时监管应该是双向的，要有容忍度，要有开放的心态，要用允许创新，允许一定程度的失败的态度来监管这些新的领域。</p><blockquote><p>正面清单的思路就是:政府没有批准的都不可以做。</p></blockquote><p><strong>政府该干什么？</strong></p><p>1、<strong>做好顶层设计</strong>。有关主管部门应当提前考虑在我国发展慕课的战略问题，尽快出台推进慕课发展的指导思想、框架原则。政府推动慕课发展的重点，应该放在根据我国的国情，解决国家与企业发展最急需、市场又解决不了的问题上。 </p><p>2、<strong>应该允许试验，鼓励试验</strong>。慕课是一个新生事物，需要摸着石头过河，不断地试错。在教育领域有很多清规戒律，管得很严，要试验也要这个批那个批的。有关部门应该鼓励试验，特别是跨界的试验。创新往往都是跨界的，应该允许非教育界的机构与人参与小规模的教育试验。</p><p>3、<strong>组织对各种试验的评估</strong>。在慕课中哪些做得好，哪些做得不好，值不值得推广，这些都需要借鉴评估的结果。这些评估最好是由有关部门邀请第三方独立进行，一定要避免利益冲突。有可能的情况下，最好有两个以上的评估独立进行。</p><p>4、<strong>关注农村，关注贫困地区，关注弱势群体</strong>。让市场的力量自然地推动下去，慕课一定是先走高大上的路，好学校优先、一线城市优先、优秀学生优先。</p><p>5、提供一定的资源。如果完全由市场的方式进行，那么慕课只会在锦上添花的领域中发展，在那些有商业价值、有赚钱机会的领域进行。政府的政策与资源就应该来弥补市场的不足，支持和引导一部分的试验在这些领域进行。政府可以通过服务外包的方式，引导一部分的社会机构参与慕课试验。</p><p>6、要开始<strong>逐渐建立一些规则，推动慕课方式在较大范围推广</strong>。教育部可以考虑在适当的时候出台一条规定，让选慕课的学生可得到学校的学分。为保证教育质量，教育部可组织数个专家审查委员会，对已经挂在网上的慕课的教学内容、教学质量、测验考试的水平进行认证。经过认证的课程可以在我国任何一所大学中给予学分。同一门课学生有权选择上慕课，也可以选本校老师开的课。</p><p>7、<strong>加快基础设施建设</strong>。开展慕课的最基本要求就是学校要接上宽带互联网。数字鸿沟问题现在已经成为国际上反贫困领域非常关注的一个问题，推广电子书包才能从根本上解决贫困地区与贫困学生的数字鸿沟问题。</p><p>8、<strong>要保护竞争</strong>。慕课正在挑起一场新的教育革命。不排除有一些人担心自己的工作机会被替代，习惯于传统教学方式的一些老师对这些新的教学方式有抵触情绪。政府应该鼓励有创新能力的学校与老师去创新。要保护竞争，防止一些人用行政手段、用手中的权力来阻止新的教学方法的进入。</p><p><strong>政府不该干什么？</strong></p><p>1、不该过早地大规模推广，甚至强行推广慕课。应该让市场慢慢地形成，要<strong>大胆大量试验，小心谨慎推广</strong>。</p><p>2、不要过早地定出过多与过细的规则。因为我们对慕课教育还有一个逐步认识的过程。过早地制定出过多过细的规则，会扼杀很多创新。这个领域变化特别快，很多问题我们现在实际上还看不清楚。因此，如果一定要有一些规则，这些规则也应该粗放一些，可定可不定的规则，先不忙定。</p><p>3、尽可能<strong>减少一刀切式的政策</strong>。通过各地的试验与竞争，自下而上地慢慢形成一些全国统一的规则。有些地方的特殊规则就应该长期存在。根据地域、教育条件等因素因地制宜，实事求是。</p><h4 id="12-慕课的未来？"><a href="#12-慕课的未来？" class="headerlink" title="12. 慕课的未来？"></a>12. 慕课的未来？</h4><p>未来的学生既是课程的消费者，也是课程创造的参与者。他们可以根据自己情况选择性学习。</p><p>未来在线学习的五大新趋势：<strong>吸引力；就业优先；不差钱；何种专业最火？</strong></p><p>未来的教师不断从“教书匠”向高水平“<strong>导师、教练</strong>”提升、跨越，会产生一种全新的师生关系。</p><p>未来的课程都应围绕学生的需求展开，学生自由选择课程，并为自己的学习负责。</p><p>未来的学校，慕课不但会印象大学的教育生态系统，也会颠覆大学教学管理体制。</p><h4 id="13-慕课革命，浩浩荡荡-学生或家长或雇员或老板或官员或平民，怎样才能不错过这场革命呢？"><a href="#13-慕课革命，浩浩荡荡-学生或家长或雇员或老板或官员或平民，怎样才能不错过这场革命呢？" class="headerlink" title="13. 慕课革命，浩浩荡荡,学生或家长或雇员或老板或官员或平民，怎样才能不错过这场革命呢？"></a>13. 慕课革命，浩浩荡荡,学生或家长或雇员或老板或官员或平民，怎样才能不错过这场革命呢？</h4><blockquote><p>革命：“革命指推动事物发生根本变革，引起事物从旧质变为新质的飞跃。”</p></blockquote><p><strong>政府</strong></p><p>对于政府来说，首先是要<strong>做好顶层设计</strong>。有关主管部门应当提前考虑我国慕课的发展战略问题，尽快出台推进慕课发展的指导思想、框架原则。政府推动慕课发展重点，不应该是锦上添花，而是雪中送炭，根据我国的国情，以解决国家发展最急需的，市场又解决不了的问题为主。</p><p>其他的那些教育领域，如一流大学的慕课平台、白领的再培训，个性化的职业培训是市场机制可解决的，应该鼓励商业机构用市场机制去解决，或者通过用政府服务外包的模式，让民间机构参与解决。</p><p>政府要做的还应该包括<strong>尽快制定慕课质量认证、跨校学分互认、学位挂钩等规则</strong>。慕课是一个新生事物，应该允许民间试验，鼓励试验，保护竞争。当前，可以考虑让每个大学生一年选一门慕课并取得学分，让学校与学生逐渐熟悉慕课的学习方式。</p><p>政府还应该<strong>提供发展慕课所需的各种基础设施</strong>，尽快让所有的学校，特别是乡村学校、乡村的教学点接上宽带互联网。在试点的基础上，优先考虑让贫困地区学校使用电子书包，尽早改变他们那里的教学模式，大幅度提高贫困地区的教育质量。</p><p><strong>校长、教师们</strong></p><p>对于在教学第一线的校长、教师们来说，慕课革命下的关键是<strong>要转变角色</strong>。他们要从一个“教书匠”向高水平“导师、教练”的角色提升，变成一个学生学习的帮助者、知识资源的提供者。这对已经习惯了传统教育方式的老师们来说，冲击是颠覆性的！教师的任务不再是满堂灌地传递知识，而是指导学生如何获取信息，解决学习过程中的问题。教学将从教师个人的工作转化为运用信息技术来支持团队的形成。以教师为中心的教学模式将转化成以学生为主体，教学资源与活动都围绕学生来优化配置。</p><p><strong>学生</strong></p><p>对于慕课革命的最大受益者学生来说，他们要<strong>把自己培养成为知识的探究者和学习建构的主体</strong>。他们既是慕课课程的消费者，也是课程创造的参与者。学生在虚拟社区中结成学习伙伴，在自己选择的学习环境中学习。有了慕课，学生才真正有了选择，学习才真正成为个性化的事。每个学习者能根据自己的兴趣、自己的程度、自己熟悉的语言、自己的学习速度来学习自己感兴趣的知识。未来的教育不是把传统的课堂搬到网上，加强应试教育，而是让新技术解放学习者本来就有的能力和天分。</p><p><strong>企业家</strong></p><p>对于企业家来说，慕课将是一个新市场、新产业、新机遇。从幼儿园到大学，从普通教育到职业教育，从基础教育到终身教育，这是一个有10亿以上人群的巨大市场，是一个变化极快、潜力极大、陷阱也极深的新领域，让企业家有无限的想象空间。预计到2015年，仅中国在线教育市场规模就高达1600亿。但慕课又处于早期发展阶段，各方都在互相磨合中，颠覆性产品尚未真正出现，需要不断地创新，需要大量的跨界整合。这又是一个关系到国家发展、民族命运的重要战略领域，在很多问题上国家不得不慎重，不得不干预，社会也有一个磨合的过程。有志要在这一领域弄潮的企业家，要有长期投入的准备。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;书籍来源于@Dean Huo赠送，我用笔记、思考作为回馈&lt;/p&gt;
&lt;p&gt;笔记采用问答式进行，筛选和总结我的问题，并在书中寻找答案&lt;/p&gt;
&lt;p&gt;全书共五大篇，18章节，约15万字&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://chensenlin.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="阅读" scheme="https://chensenlin.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>EOS技术及生态系统介绍</title>
    <link href="https://chensenlin.cn/posts/46022/"/>
    <id>https://chensenlin.cn/posts/46022/</id>
    <published>2018-04-29T02:25:14.000Z</published>
    <updated>2018-04-29T04:23:26.934Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>读书会</p><p>第五十四期·区块链第五期</p><p>读书会·EOS技术与生态</p><a id="more"></a><h3 id="嘉宾介绍"><a href="#嘉宾介绍" class="headerlink" title="嘉宾介绍"></a>嘉宾介绍</h3><p>哈胜，现任梦起文化传播有限公司技术总监，西北地区区块链技术发起第一人；一直在致力于将区块链技术推广，现为EOS引力区西北区节点竞选人。</p><h3 id="EOS基本介绍"><a href="#EOS基本介绍" class="headerlink" title="EOS基本介绍"></a>EOS基本介绍</h3><p>EOS是Block.One公司正在研发的一个区块链底层公链系统，目的是解决现有的区块链应用性能低、安全性差、开发难度高以及过度依赖手续费的问题，实现分布式应用的性能扩展。EOS提供帐户，身份验证，数据库，异步通信以及在数以万计的CPU或群集上的程序调度。该技术的最终形式是一个区块链体系架构，该区块链每秒可以支持数百万个交易，同时普通用户无需支付使用费用。</p><p>目前的底层公链离真正的大规模商业应用还有很大的差距，主要表现在区块网络转账速度慢、费用高、系统并发处理能力差，稳定性差、数据存储和安全缺陷等。这是目前底层公链需要解决的问题，这些问题解决不了，商业化应用只是一句空话。EOS如果要成为一个真正能支持大量商业级应用的公链，势必要解决这些问题。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-29-15249659265370.jpg" alt="EOS"></p><h3 id="EOS的优势和创新"><a href="#EOS的优势和创新" class="headerlink" title="EOS的优势和创新"></a>EOS的优势和创新</h3><h4 id="大幅提升底层公链的交易速度"><a href="#大幅提升底层公链的交易速度" class="headerlink" title="大幅提升底层公链的交易速度"></a>大幅提升底层公链的交易速度</h4><p>采用了DPOS (股份授权证明）共识算法机制的EOS相对传统公链在速度方面优势明显。正处在开发阶段的 EOS如果能够顺利实现，很可能成为第一个可以处理商业级运算的去中心化底层公链。采用DPOS算法机制的石墨烯技术，在有限制的测试条件下已经实现了每秒上万次的交易量。后续，EOS将使用并发技术来继续扩展其网络性能，有望实现每秒数百万次的交易处理能力。届时，EOS将解决底层公链的速率和拓展性问题，将可同时支持数干个商业级的分布式应用程序 (DAPP) 在其平台上运行。</p><h4 id="提升底层公链的可拓展性，避免硬分叉"><a href="#提升底层公链的可拓展性，避免硬分叉" class="headerlink" title="提升底层公链的可拓展性，避免硬分叉"></a>提升底层公链的可拓展性，避免硬分叉</h4><p>作为一个去中心化的操作系统，当出现分歧时能否达成共识，在避免硬分叉的前提下保持迭代，将成为一个至关重要的问题。</p><p>在区块链中，底层的代码相当于现实中的法律。代码中存在bug是无法避免的，如果一个区块链的底层平台出现bug时没有办法修复将是一件十分可怕的 事情，会失去用户的信任。之前的BTC和ETH都曾出现过分叉问题，BTC因为速率扩容以及网络拥堵，社区无法达成共识，至今已经出现了多种分叉币。而ETH则主要因为DAO黑客事件，造成社区内激烈争论，最终分叉为ETH和ETC两条链。</p><p>而EOS从整体的架构设计上解决了这个问题。EOS的约束性合约相当于“宪法”给整个平台下了明确的定义：在公链的运行中，当系统出错的时候，能够根据可读性意图来区分这个错误是否确实是bug，并且来判断社区的修复是否正确。有了这套机制，如果未来有新技术出现，也可以很容易地增加到EOS系统 中，有利于系统的升级和迭代。</p><p>例如，当EOS中出现了类似之前DAO的黑客事件时，系统中的21个节点将迅速采取行动，冻结黑客账户，然后通过投票采取最有效的处理方式，不会像之前的ETH因无法共识而出现硬分叉的情况。</p><p>从这方面来看，EOS在稳定性和可拓展性上相对已有的底层公链系统是非常有优势的。</p><h4 id="用户免费使用网络资源"><a href="#用户免费使用网络资源" class="headerlink" title="用户免费使用网络资源"></a>用户免费使用网络资源</h4><p>EOS则采用所有权模式，如果你拥有相应比例的代币，就有权免费使用相应比例的网络资源，对你而言，交易将是零成本的。</p><h4 id="安全性高，避免DOS攻击"><a href="#安全性高，避免DOS攻击" class="headerlink" title="安全性高，避免DOS攻击"></a>安全性高，避免DOS攻击</h4><p>DOS攻击在众多网络攻击技术中是—种常见并且具有很大危害性的攻击方式。它通过各种手段消耗系统资源和堵塞网络带宽，使正常网络服务陷千瘫痪状态。在近几年的实践中以太坊网络已经被证明非常容易受到DOS攻击的影响。</p><p>EOS的代币则相当于网络资源的所有权，用户只能使用相应比例的网络资源。因此，DOS攻击者只能使用到其EOS代币相应比例的带宽资源，形成了天然的制度屏障，使DOS攻击仅可能出现在某一个应用程序上，但这些攻击永远不会破坏整个网络运行，因此EOS从设计上提升了整个基础链的安全性。</p><h4 id="提升公链系统的兼容性"><a href="#提升公链系统的兼容性" class="headerlink" title="提升公链系统的兼容性"></a>提升公链系统的兼容性</h4><p>为了实现更好的兼容性，EOS中设计了跨链交互和虚拟机独立架构机制。例如，在EOS系统中设置了以太虚拟机 ( EVM )。它能够支持现有的以太坊合约。也就是说，现有的以太坊平台上的应用，只需要稍加配置，未来就能够在EOS上面运行。</p><p>对于开发者来说，目前在其他公链上开发DAPP并不容易，需要自己写很多基础模块才能实现。而EOS的设计目标是成为区块链的底层操作系统，已经为开发者提供了各类底层开发模块。简单来说，各类基础功能EOS都已经帮你设计好了，你只需要知道怎么使用这些基础工具就可以完成自己的开发了。这样也就大大降低了开发者门槛，再加上EOS平台并发处理速度快，没有手续费的特点，将会吸引更多的普通开发者，有助于EOS平台上涌现大量的商业级应用，快速形成平台生态系统。</p><p>通过以上分析，我们不难得出结论，从架构设计的角度EOS非常有潜力成为能够支撑大盘商业级应用的超级底层公链。</p><p>但EOS还只是一个开发中的项目，在主网没有上线的情况下，列举这些技术解决方案及实现方式，只是出于概念上的论证，至于这种可能性能否最终实现，我们并不确定，作为投资者，想分析清楚一个项目的投资价值，我们还需要从可行性，进展情况等各方面进行多维度的考量。</p><h4 id="EOSIO-Dawn-3-0简介"><a href="#EOSIO-Dawn-3-0简介" class="headerlink" title="EOSIO Dawn 3.0简介"></a>EOSIO Dawn 3.0简介</h4><p>BM在Medium宣布EOSIO Dawn (EOS黎明）3.0正式发布，做为EOSI O主网正式发布之前的一个里程碑式的版本，Dawn 3.0版本是第一个功能完整的预发布。</p><p>Dawn 3. 0在这三个方面有巨大的提升：可扩展性；安全性；智能合约开发，并极大地改善了开发者的体验。</p><h5 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h5><p>可扩展性意味着通过扩展来不断满足市场需求。BM说：“我们的团队在每一步都将未来扩展需求纳入设计中。也就是说，Dawn 3.0只实现了一小部分潜在的优化，可以让EOSIO进行扩展。我们设计了EOSIO，以便将来的实现可以利用并行计算来加速吞吐量，不需要通过硬分叉就  能继续升级。”</p><h5 id="安全特性"><a href="#安全特性" class="headerlink" title="安全特性"></a>安全特性</h5><p>安全对于任何计算系统都至关重要，BM说：“我们设计EOSIO是市场上最安全的区块链。安全是一个多维问题，必须考虑到黑客攻击，硬件故障，硬件丢失和密码丢失的风险。硬件钱包擅长防范黑客入侵，但如果失败，可能会将您锁定在帐户外。此外，硬件钱包的纸张备份可能会丢失或被盗。”</p><h5 id="简易合约开发"><a href="#简易合约开发" class="headerlink" title="简易合约开发"></a>简易合约开发</h5><p>对于EOSIO，BM说：“我们的许多目标之一就是让合约的开发尽一切可能轻松。如果开发人员知道如何编写一个C++类的方法，那么他们应该能够编写一个尽可能不复杂的智能合约。”<br>“我们很高兴已经简化我们的 “hello world” 合约到几行简单的代码。我们的 工具链已经自动化生成合约ABI的过程，并且调用用户action到定义于你类目的方法。”</p><h3 id="EOS和ETH、ADA的对比"><a href="#EOS和ETH、ADA的对比" class="headerlink" title="EOS和ETH、ADA的对比"></a>EOS和ETH、ADA的对比</h3><h4 id="EOS-VS-ETH的优缺点"><a href="#EOS-VS-ETH的优缺点" class="headerlink" title="EOS VS ETH的优缺点"></a>EOS VS ETH的优缺点</h4><p>在区块链领域，除了BTC这老大外，还有两璀璨的明星，那就是ETH和EOS，如果说BTC是区块链1.0的代表的话，那ETH和EOS就代表着区块链2.0、3.0；一直有种说法：BTC让人们见证了什么是虚拟货币、共识机制、公有的分布式账本， ET H让人们见证了什么是智能合约，即在这个共同的分布式账本上进行复杂交易的能力，而EOS则要将区块链推向我们的生活，使区块链应用能够大规模商业化。</p><p>通俗一点说，ETH是开源平台数字货币和区块链的智能合约平台，它为开发者提供在区块链上搭建和发布应用的平台，可以把以太坊当作是一个用于开发和运行去中心化应用。</p><p>EOS则是一个面积接近无限大的地基，这个地基牢固、精致、设计优美，并且在地基之上还提供了各种“积木”，开发商 ( Dapp应用团队）可以用这些“积木”轻易地搭出自己设计稿上的商业大厦、电影院、办公楼或者小木屋，而用户想进入这些房地产项目消费，也不需要先买门票，反而可以尽清领略各种景观。</p><h5 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h5><p>假如说ETH是简单开发的荒野，EOS则是功能齐全的大都会。ETH被设计为一个对于所有潜在的应用中立的平台。以太坊在github上的设计原理文档中如此说道：以太坊“没有特性”，拒绝在协议中加入即使是常用的高级别的用例。这使得应用没那么擁肿，但是它依然要求不同的应用重用代码。但是如果平台本身提供了那些常用的功能，将能提高应用开发者的效率。</p><p>与ETH不同，EOS意识到不同的应用都需要一些相同的功能，EOS就提供了这些功能，比如基于角色的许可功能，用于开发界面的一套web工具，自描述接口，自描述数据库，声明式许可scheme。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-29-15249662612674.jpg" alt="设计理念"></p><h5 id="共识机制与治理"><a href="#共识机制与治理" class="headerlink" title="共识机制与治理"></a>共识机制与治理</h5><p>以太坊目前使用的的POW共识机制，运行在以太坊上的坏掉的应用导致投资人遭遇重大损失，慌乱的硬分叉。每次硬分叉都可能大量出现竞争链，更重要的，为了修复一个坏掉的应用而慌乱地进行硬分叉都会打乱整个以太坊网络。</p><p>EOS包含一套冻结并修复坏掉的应用的机制。坏掉的应用会被冻结，修复，然后更新，而不会干扰到其他的EOS应用。基于DPOS共识机制的EOS，即使硬分叉也不会大量产生竞争链而且，EOS将包含一个合法绑定宪法，用于解决争端，它同样包含一个基于股权权重投票产生的社区。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-29-15249662852147.jpg" alt="共识机制与治理"></p><h5 id="扩展性-速度"><a href="#扩展性-速度" class="headerlink" title="扩展性-速度"></a>扩展性-速度</h5><p>以太坊网络受限于CPU的单线程性能。早期的测试网络达到每秒25次交易(还是在优化了的情况下)，经过优化，可以增加到50次或100次交易/秒。然而，在实际应用中，以太坊网络的交易差不多是10次交易/秒，甚至更少。</p><p>EOS将依赖于石墨烯技术，在压力测试中，石墨烯技术已能达到每秒3000笔交易。第二，EOS将使用并行技术来拓展网络，处理能力将到达每秒百万笔交易。如果这些都能实现，EOS将能支持上千个商业级Dapps。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-29-15249663385078.jpg" alt="速度"></p><h5 id="安全性：DOS攻击"><a href="#安全性：DOS攻击" class="headerlink" title="安全性：DOS攻击"></a>安全性：DOS攻击</h5><p>以太坊网络已经被证明了非常容易受DOS攻击，在以太坊网络中，矿工倾向于优先处理那些高费用的交易。由于带宽和算力是有限的，可以预见出如果网络中被塞入大量高费用的交易，这将会把低费用的合法交易踢掉。这就会诱使有钱的玩家用高费用的交易堵塞网络，以保证他们的交易能被执行。</p><p>EOS不易受DOS攻击，EOS代币的持有者会在网络带宽，存储和算力方面给予用户一定比例的股权，恶意攻击者只会消耗掉他们的EOS代币赋予他们的那部分网络。某个应用或许会遭到DOS攻击，但是这些攻击不会干扰整个网络。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-29-15249663786652.jpg" alt="DOS攻击"></p><h5 id="GAS燃烧费用VS股权拥有制"><a href="#GAS燃烧费用VS股权拥有制" class="headerlink" title="GAS燃烧费用VS股权拥有制"></a>GAS燃烧费用VS股权拥有制</h5><p>以太坊中，交易，存储，操作，带宽使用的每次计算都需要gas费用，而且矿工倾向于选择那些高费用的交易来处理，这种经济模式会出现一种情况：富有的玩家可以向网络中发送大量高费用的交易从而导致网络瘫痪。</p><p>EOS使用所有权模式，持有EOS代币将在网络带宽，存储，处理能力方面给予用于一定的份额。这意味着如果某人拥有1%的EOS代币，那么他就永远只能获得1%的网络带宽，而不论网络剩余部分的负载情况。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-29-15249664272096.jpg" alt="GAS燃烧费用VS股权拥有制"></p><h4 id="EOS与ADA的优劣"><a href="#EOS与ADA的优劣" class="headerlink" title="EOS与ADA的优劣"></a>EOS与ADA的优劣</h4><h5 id="ADA简介"><a href="#ADA简介" class="headerlink" title="ADA简介"></a>ADA简介</h5><p>卡尔达诺（Cardano）是一个正在开发中的新一代区块链智能合约平台，ADA是卡尔达诺平台的数字代币。</p><p>Cardano的哲学是在学习和继承现有基础公链优点的基础上，进行概念和技术的创新，希望能最终解决上述三方面问题，成为更便捷、更高速、更智能的新一代底层基础公链，也就是大家常说的区块链3.0。</p><p>Cardano不仅是加密货币，也是一个完全开源的区块链平台。其中心思想是要构建一个分层次的区块链生态系统。有些人甚至认为如果后续能够进展顺利，Cardano 有望成为一个史诗级项目。<br>从底层基础公链的竞争角度来看，ADA显然是一个非常有实力的竞争者，国际化的团队做事扎实，透明度高，无论规模还是技术能力，都可以被称为区块链领域的豪华团队，完全有条件成为未来的顶级基础公链。</p><p>ADA的整体目标宏大，如果项目顺利完成，价值和意义都非常巨大，同时，项目的复杂度高，也必然带来很大的开发难度，对此，投资者也应适当审视。ADA是和EOS属于同一量级的项目，它们都有机会成为未来最好的基础公链，但相比于EOS，ADA在市场热度和认知度上都还有明显的差距。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-29-15249665201077.jpg" alt="Cardano"></p><h4 id="目标宏大、复杂、难度大、周期长"><a href="#目标宏大、复杂、难度大、周期长" class="headerlink" title="目标宏大、复杂、难度大、周期长"></a>目标宏大、复杂、难度大、周期长</h4><p>Cardano目标宏大，可以简单理解为改进版比特币+下一代以太坊。从软件工程的角度看，项目是非常复杂的，需要很扎实的开发推进和很长的开发周期。在一日千里高速变化的区块链领域，这种高难度长周期的项目定位本身也是一种风险，需要各方面的有力支撑才能顺利完成。</p><h4 id="共识机制有待实践的检验"><a href="#共识机制有待实践的检验" class="headerlink" title="共识机制有待实践的检验"></a>共识机制有待实践的检验</h4><p>共识算法是一个基础公链的价值观，Cardano的Ouroboros算法是自己独创的，目前并没有开发完成，整体的理念也还存在一些争论，这从BM与霍斯金森关于算法的互怼也可以看出一些端倪。EOS的DPOS算法，已经在两个项目中有过应用，但近期的投票机制依然引起了轩然大波和整个生态的争论。可见，一个共识算法的成熟和完善，重要而且漫长，对Cardano的共识算法我们仍需要拭目以待。</p><h4 id="中心化倾向能否成为主流共识？"><a href="#中心化倾向能否成为主流共识？" class="headerlink" title="中心化倾向能否成为主流共识？"></a>中心化倾向能否成为主流共识？</h4><p>对EOS的21个超级节点是否是中心化的争议仿佛一直没有停止过，在Cardano的设计中包含了接受监管，合规审查等思想，貌似是与区块链的去中心化思路相背离的，整个市场对于这种思路的接纳程度也是一个有趣的话题。</p><h4 id="偏重技术，对营销的重视程度低"><a href="#偏重技术，对营销的重视程度低" class="headerlink" title="偏重技术，对营销的重视程度低"></a>偏重技术，对营销的重视程度低</h4><p>清高、严谨、注重声誉，我一直觉得ADA是区块链领域的异类，尤其与那90%只想着快速圈钱的项目方相比实在反差太大。有人形容ADA团队“不在乎钱，而更在乎是不是在人类知识的边界上又突破了一步”，一个开发团队拥有这样的格局和气度，小姐姐由衷的欣赏和敬佩。但毕竟投资市场是浮躁的，很大一部分投机者不管你项目好不好，只要项目方能拉盘，币价明天能涨就是好项目。即使你是踏实做事的清流，币价不涨也会被骂。因此，ADA这类埋头做事的项目能否取得更大的共识，做好市值管理，其实与投资者的心态和整个市场的理性程度有很大关联。</p><h4 id="需要面对EOS和以太坊等强大对手的竞争"><a href="#需要面对EOS和以太坊等强大对手的竞争" class="headerlink" title="需要面对EOS和以太坊等强大对手的竞争"></a>需要面对EOS和以太坊等强大对手的竞争</h4><p>说到竞争，我们不得不提BM的EOS。在团队能力、项目定位、甚至共识算法方面，ADA与EOS都属于同一量级的，可能会成为较长一个阶段的直接竞争者。但目前EOS是遥遥领先的，已经实现了广泛共识。EOS 4月6日新发布了EOSIO DAWN 3.0版本，主网也即将在6月上线，似乎在落地进度上也领先了一步。这些无形中都是对ADA的巨大挑战，ADA需要在营销、落地、取得广泛共识等几个维度上尽力追赶。</p><h3 id="EOS的生态建设方法"><a href="#EOS的生态建设方法" class="headerlink" title="EOS的生态建设方法"></a>EOS的生态建设方法</h3><h4 id="EOS生态的目标"><a href="#EOS生态的目标" class="headerlink" title="EOS生态的目标"></a>EOS生态的目标</h4><p>在所有具有共识的人中，公平发放、公平使用Token。权益的公平性是维系EOS生态健康的第一要务，这个目标具体体现在了众筹、公链后的节点投票、通货膨胀等一系列运转细节的设计。</p><p>保证EOS生态具有和其他生态相比更先进的生产力。任何人和群体都有特质和局限性，曾经先进的公司变得落后，曾经天才的人物变衰老，都是可预期的客观事实。共识在凝聚和分裂中不断转化，社区需要有足够的包容性容纳不同价值观并为其提供充分的发展空间。在这个问题上，BM选择了多链自由竞争的路，具体如下：</p><p>自由竞争：Block.one不发起、不指定、不倾向任何公链，任何基于EOS.io的公链必须是由与Block.one无关的成员完成。由市场决定有哪一条或哪几条公链存活。</p><p>DAPP用链方式：Dapp可以自由选择和其他Dapp共享一条EOS公链、可以自己独占一条，甚至一个DAPP独占多条公链。</p><p>修改EOS.io：任何人都可以以任何方式删除、修改、补充EOS.io软件。就MIT协议来说，这是一个相对宽松的开源协议，任何人都有权使用，修改，复制，再分发（再分发版本无论是否开源都可以），销售这个软件。</p><p>在多链自由竞争的格局下，Eos.io同时具有的跨链功能。从而EOS社区真正成为一个求同存异，既有竞争又有合作的链网结构，任何人的新想法都可以在这个生态中得以实现。</p><h4 id="运转"><a href="#运转" class="headerlink" title="运转"></a>运转</h4><h5 id="Token的发放"><a href="#Token的发放" class="headerlink" title="Token的发放"></a>Token的发放</h5><p>POW在项目运行早期可以实现发放公平，但在形成矿池后会因算力集中造成对普通人的不公平。POS在项目后期公平，但在初期受众面小的时候，考虑到公众对项目有认知周期，如何尽量降低由于信息扩散、信息不对称造成的早期权益集中是POS最重要的问题。EOS的Token发放通过以下几个设计完善的解决了这个问题：</p><p>除团队预留以外，不设任何预售和私募，绝大多数Token全部公平向公众发行。超长发放周期，让更多人有机会接触到项目，甚至有机会在几个牛熊转换中充分思考项目的价值，及其与自己价值观的匹配度，十分重要。1、为众筹前对项目感兴趣产生的需求提供供给。2、更精准发现EOS Tokens的价格。</p><p>不操纵币价。众筹期内，Block.one不可以交易或转账。在公链上线后，每年Block.one可与新的创始人将不可交易EOS token置换为可交易EOS token（不多于1000万）。整个众筹期内，Block.one会请第三方独立审计保证以下事项：Block.one不会用任何方式购买EOS，不会给Block.one的股东分红，不会进行任何股权回购行为。</p><h4 id="DPOS和节点运行"><a href="#DPOS和节点运行" class="headerlink" title="DPOS和节点运行"></a>DPOS和节点运行</h4><p>如前文所讲，EOS.io是一个高度自治的软件。节点是维系EOS生态运转的最重要角色。在设计节点角色时，系统遵从了如下的原则：</p><p>高速轮转，自由进出：节点是在持续投票过程中不间断产生的。“任何人”只要在某一轮获得足够的投票，都可以参与到当个周期的区块生产中去。每一轮63秒（0.5秒<em>21个节点</em>每个节点出6个块）都可以有新的节点选出来，旧的节点被踢出去。</p><p>Token Holder对于节点具有最终的决定权。一切经TokenHolder通过的决定，节点必须无条件执行、不执行的节点将被自动踢出生产节点序列。</p><p>节点在获得15/21票后可对一些异常账户、代码进行暂停。控制节点收益的比例。</p><h4 id="通货膨胀的用意"><a href="#通货膨胀的用意" class="headerlink" title="通货膨胀的用意"></a>通货膨胀的用意</h4><p>EOS本身的软件功能在增强、EOS所代表的计算资源在扩张，相应的工作投入需要给予激励回报。上述是提升整个EOS 社区成员福祉的行为，而并非针对个别Token Holder的行为，因此应以面向整个社区收取铸币税的形式来完成。换言之经济体的规模在增大，需要一定量的通货增加维持EOS的购买力平稳。</p><p>每年增发不超过5%的Eos Token，Token Holder投票决定具体数字。这部分Token 有三个用途：第一部分是节点奖励，完全用于扩大EOS生态计算能力，第二部分是Worker Proposal，第三部分是销毁掉。重点在第二部分，Token holder 可以投票发出申请（包括Community Benefit、Arbitration Fund、System Improvement三类），然后有开发者接单并提出报价。完工后开发者从Worker Proposal 账户中取得报酬。</p><h4 id="宪法及宪法的升级"><a href="#宪法及宪法的升级" class="headerlink" title="宪法及宪法的升级"></a>宪法及宪法的升级</h4><p>生态中还有一部分是不能完全通过算法促成的共识。将以英文版书写的宪法Hash后，作为交易的一部分嵌入每笔交易中，作为交易双方对共识的完全认可。</p><p>宪法升级有一个Token Holder和BP配合操作的流程，简单来说投票选节点，节点来执行，节点执行结果维持同一个状态一段时间后，新宪法生效。不按照Token holder决定做的BP会被踢出。如果节点在未经token hodler授权时 ，其他所有非生产的全节点会拒绝这个改变。</p><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>Q:老师,对于现在区块链这么火热，同时也产生了很多区块链+内容的产品，但是大多人都是薅羊毛（通过文章获取代币）的，而这样的产品出发点是什么呢？是不是有点不符合区块链本质（去中心化的分布式记账系统）呢？</p><p>A:你说的这个问题确实有的，尤其是今年被称为区块链元年，很多人趁着大家不懂和不了解，做了很多假项目，你说的那种通过文章获取代币的就是明显的，他们很不符合区块链技术本质。是一种伪去中心。</p><p>Q:老师，你认为eos相关的空投项目对整个eos生态的发展会有怎么样的影响？</p><p>A:EOS空投项目，对于整个生态和社区的壮大发展是有好处，但同时也要防止那些空投骗局。最近EOS发售的糖果eosDAC就很受大欢迎。</p><p>osDAC，由一个名叫“BlockMaker”的公司建立，希望这个社区有组织有纪律，有很好基础设施、能良好的发展下去，继而汇集大家的力量，来促进 EOS 的发展。 这个 eosDAC 会为大家准备好开发工具，将会和其他社区一同促使 EOS 成为一个真正的，方便大家使用的公链。 拥有多少 Token 也一定程度上代表着你在这个社区的话语权。</p><p>总的来说 eosDAC 致力于打造一个民主，有序、自治、去中心化的 EOS 社区，以此促进 EOS 生态的发展。</p><p>关于 EOS 技术方面的文章已经很多了，这里不做过多阐述，大体意思就是定位区块链 3.0，建立一个比以太坊牛逼很多的 DAPP 开发平台，TPS 达到百万级，来适应更多的实际应用，据称目前的在测试节点上已能跑到 1300 的样子。</p><p>对于公链这样的开源项目，除了技术外，生态建设格外重要，而生态是需要整个社区共同推进的 ，EOS 作为一项明星项目自带光环，还未上线，已吸引了全球数个团队的参与，形成了多个 EOS 社区，eosDAC 就是其中之一（更加紧密的社区），而 21 个节点同样是繁荣 EOS 生态的重要力量，可以提供更多的开发工具，吸引更多的 DAPP 开发人员，从而推动 EOS 不断向前，搞出杀手级应用也不无可能。</p><p>良好的空投项目发展可以很好的补充主链的反展。同时促进主链社区的推动。</p><p>本文所有内容来自哈胜老师在读书会关于EOS部分的分享。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读书会&lt;/p&gt;
&lt;p&gt;第五十四期·区块链第五期&lt;/p&gt;
&lt;p&gt;读书会·EOS技术与生态&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="https://chensenlin.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="笔记" scheme="https://chensenlin.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="BitTiger" scheme="https://chensenlin.cn/tags/BitTiger/"/>
    
  </entry>
  
  <entry>
    <title>《原则》·塑造你的生活与工作原则</title>
    <link href="https://chensenlin.cn/posts/17224/"/>
    <id>https://chensenlin.cn/posts/17224/</id>
    <published>2018-04-22T10:25:14.000Z</published>
    <updated>2018-04-29T04:23:38.544Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>读书会</p><p>第五十三期·圆桌派第一期</p><p>《原则》分享会</p><a id="more"></a><h3 id="本期书籍"><a href="#本期书籍" class="headerlink" title="本期书籍"></a>本期书籍</h3><p>书名：《原则》 Principles: Life and Work</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-23-15244648772174.jpg" alt="原则"></p><h4 id="作者信息"><a href="#作者信息" class="headerlink" title="作者信息"></a>作者信息</h4><p>瑞·达利欧（Ray Dalio）</p><ol><li>对冲基金公司桥水创始人</li><li>《福布斯》世界前100名富豪</li><li>入选《时代周刊》世界100位最具影响力人物</li></ol><h4 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h4><ol><li>作者一生的智慧结晶</li><li>从多角度立体阐述生活、工作、管理原则</li><li>适合多层次、多领域的读者</li></ol><blockquote><p>本书的所有原则列表：<a href="https://mubu.com/doc/2LfaW-49KA" target="_blank" rel="noopener">https://mubu.com/doc/2LfaW-49KA</a></p></blockquote><h4 id="嘉宾介绍"><a href="#嘉宾介绍" class="headerlink" title="嘉宾介绍"></a>嘉宾介绍</h4><h5 id="Jasmine"><a href="#Jasmine" class="headerlink" title="Jasmine"></a>Jasmine</h5><p>在BlackRock从事宏观投资策略分析工作<br>纽约汉服社创始人<br>纽约线下读书会负责人<br>爱生活的杂学家</p><h5 id="小分子"><a href="#小分子" class="headerlink" title="小分子"></a>小分子</h5><p>美国匹兹堡计算生物学PhD在读<br>本科毕业于北大<br>热爱读书与分享<br>微信公众号：“小分子简读”</p><h5 id="李然"><a href="#李然" class="headerlink" title="李然"></a>李然</h5><p>香港国际十大创客<br>GreenSpace AI Lab 创始人CEO<br>前Makeblock 董事 副总裁<br>前FABLAB 联合创始人 CEO<br>6年职业经理人，5年连续创业经历</p><h5 id="杨煜-Darren"><a href="#杨煜-Darren" class="headerlink" title="杨煜 Darren"></a>杨煜 Darren</h5><p>清华-华盛顿大学全球创新学院<br>双硕士学位在读<br>本科毕业于清华计算机系<br>热爱读书、健身、音乐</p><h3 id="嘉宾拆书·精华分享"><a href="#嘉宾拆书·精华分享" class="headerlink" title="嘉宾拆书·精华分享"></a>嘉宾拆书·精华分享</h3><p>《原则》的主要内容是<code>Ray Dalio</code>从三个方面来阐述的。首先是<strong>原则的重要性</strong>，原则对他本人意味着什么？其次是<strong>个人生活经历</strong>，从他个人生活提炼出来的原则；最后是他在管理桥水基金的<strong>管理原则</strong>，主要是他的工作原则。</p><h4 id="什么是原则？"><a href="#什么是原则？" class="headerlink" title="什么是原则？"></a>什么是原则？</h4><p><strong>能帮助你连接到价值观的东西</strong></p><p><code>Ray Dalio</code>认为原则是<strong>能帮助你连接到价值观的东西</strong>。价值观是每个人认为最重要、最有价值的一个东西，这个东西可以是任何事情，只有我们是拥有原则之后，才能在面对一些重要选择的时候，去遵从内心最坚持的价值观，如果我们没有这些原则的话，可能就会做一些错误的决定。</p><p><strong>把原则写下来</strong></p><p><code>Ray Dalio</code>认为每个人都应该把自己的原则写下来，可能你会觉得有很重要的价值观，只是非常感性思考的话，其实它没有真的帮助你，所以把每一个原则都用纸笔写下来，而且一一地把这个逻辑罗列下来。如果爱因斯坦或者一些其他的人，比如乔布斯，他们能把他们的原则也写下来，留给世人的话，这将会是很大的一笔财富。</p><h4 id="Ray-Dalio成长的故事"><a href="#Ray-Dalio成长的故事" class="headerlink" title="Ray Dalio成长的故事"></a>Ray Dalio成长的故事</h4><h5 id="差等生变学霸"><a href="#差等生变学霸" class="headerlink" title="差等生变学霸"></a>差等生变学霸</h5><p><code>Ray Dalio</code> 出生于<code>1949</code>年，是在美国的一个中产阶级家庭长大的，父亲是一名爵士乐手，母亲是普通家庭主妇，从这个单纯的家庭成长环境来看，其实对他取得现在的成就并没有多大帮助。他小时候也和很多普通的调皮的小男孩一样不爱学习，喜欢玩闹，甚至用伪造的身份证去酒吧。除了贪玩，他也承认自己的机械记忆能力很差，记不住学校里要求背的没有内在逻辑的东西，因此在上大学之前他的成绩一直很差，这可能会引起很多人的共鸣，很多人小时候觉得书上的东西没有逻辑且记不住。</p><p>和一般小朋友不一样的是，他很有<strong>冒险精神</strong>，从12岁开始就会用自己在外面打工挣的钱去炒股，也喜欢和朋友一起去海边冲浪，同时也很敢于在市场上冲浪。他身上还有很多闪闪发光的优点，比如他很有好奇心，喜欢琢磨事情，是一个非常<strong>独立思考</strong>、很有自己主见的人。在本书中也有提到，当他不想做什么事情的时候就会选择抗拒不做，当他决定要做什么很乐意并做那件事情的时候，就没有什么可以阻挡他。 </p><p>他在大学是主修金融，基于他这样的性格，在学校一直尽情地学习自己感兴趣的东西，毕业以后就顺利地被哈佛商学院录取了。</p><p><strong>总结</strong>：具有冒险精神和独立思考的品质，且好奇心强。</p><h5 id="投资界的乔布斯"><a href="#投资界的乔布斯" class="headerlink" title="投资界的乔布斯"></a>投资界的乔布斯</h5><p>他和乔布斯都是天才型的人物。</p><p>他们有一个共同的习惯：<strong>冥想</strong>，他认为冥想可以锻炼自己的心性，让他拥有很平静、开放的思维，而且有非常清晰、有创造性的逻辑思考能力。</p><p>从个性的角度上讲，<code>Ray Dalio</code>和乔布斯都是不愿意被别人牵着鼻子走的人，喜欢自己发挥自己的想象力，打造一些新奇好玩的东西。</p><p>从经历上来讲，他们都是白手起家的企业家，一个人创办了桥水，另一个人创办了苹果公司，都创造和重塑了整个业界创新的产品，都有自己独一无二的管理风格。</p><p>在<code>Ray Dalio</code>的心中，乔布斯是一个非常值得敬仰且心心相惜的人，他说桥水是没有办法和苹果公司相提并论的，他自己非常谦虚的说，自己不能和乔布斯相比肩。 </p><p><strong>总结</strong>：有冥想的习惯，想象力丰富，白手起家，最后都创造了辉煌。</p><h5 id="好丈夫和好父亲"><a href="#好丈夫和好父亲" class="headerlink" title="好丈夫和好父亲"></a>好丈夫和好父亲</h5><p>平衡工作和家庭上的方法论。</p><p><code>Ray Dalio</code>是把家庭和事业看得同等重要的人，而且会尽可能的把这两种事情联系在一起，它们是密不可分的。这本书从头到尾都在强调<strong>有意义的工作</strong>和<strong>有意义的人际关系</strong>是他两个必需品。它的公司在市场上的冲浪是非常有意义的一个工作；家庭和朋友是值得经营且非常有意义的人际关系。</p><p>他妻子叫芭芭拉，他和他妻子认识是在哈佛商学院的时候通过一个聚会经朋友介绍认识的。芭芭拉是一个西班牙女孩，相对来说有一些异域风情，很吸引<code>Ray Dalio</code>的眼球，后来他们相处很愉快，直到结婚生子，从这以后他就扮演着一个好丈夫的角色。他和芭芭拉一共养育了四个孩子，有了孩子后更是极力扮演着一个好父亲的角色。例如出差的时候他会带上孩子们，一来可以帮助孩子们开阔视野；二来会让他和孩子们有更多相处时间。因为他的工作非常繁忙，也有很多出差的机会。他也来过很多次中国，对中国格外的喜欢，曾经让自己年仅11岁的儿子在中国生活了一整年，这段经历对非常年轻的儿子来说，对他整个价值观和人生目标都产生了非常深远的影响。</p><p>在关于自己财产的继承上，他希望自己的财产可以保障自己的儿子们有足够的钱享受优质的医疗和教育，同时有一笔启动资金来支持自己就可以了。我们从中可以看到，他是一个很热衷慈善的人，他的大部分钱都会用于做一些慈善公益的项目，甚至会带动自己整个家庭去做慈善。通过这些大量的成长故事，我们认识到，他是一个非常充满好奇心，很有创造力，思维开放，勇于冒险，而且是一个充满温情的好丈夫和好父亲。</p><p><strong>总结</strong>：家庭与事业同等重要，密不可分。</p><h4 id="Ray-Dalio的创业经历"><a href="#Ray-Dalio的创业经历" class="headerlink" title="Ray Dalio的创业经历"></a>Ray Dalio的创业经历</h4><p><code>1975</code>年，创建<code>Bridgewater</code>，主要业务是为公司客户提供汇率和利率的风险管理咨询以及出版名为 “Bridgewater 每日观察” 的每日市场评论；</p><p><code>1987</code>年，<code>Bridgewater</code> 开始从事资产管理业务，当时的规模为 <code>500</code> 万美元；</p><p><code>1991</code>年，桥水设立了旗下第一支旗舰基金——主动型<code>Pure Alpha</code>基金；</p><p>时至今日，不到三十年，桥水的资产管理规模增长到起初的接近 <code>4</code> 万倍。</p><h4 id="生活原则概述"><a href="#生活原则概述" class="headerlink" title="生活原则概述"></a>生活原则概述</h4><h5 id="学习自然"><a href="#学习自然" class="headerlink" title="学习自然"></a>学习自然</h5><p><code>Ray Dalio</code>想法和老子的“<strong>人法地、地法天、天法道、道法自然</strong>”不谋而合。他认为我们可以通过理解自然规律，利用自然规律，从而促进我们自身的进化，实现我们的目标。 </p><p>学习自然首先要<strong>去除小我</strong>。自然规律，不能站在一个人的角度去定义。而是应该跳出我们小我，站在自然的角度去俯瞰、去找到你，试图去理解整个自然运行的规律。他提供了两个角度，第一个角度是<strong>自上而下</strong>，自上而下是指采用一种宏观的视角去努力寻找我们身边接触到所有东西背后的唯一驱动原则；第二个角度是<strong>自下而上</strong>，采用一个微观的视角去研究每种具体情况背后有哪些运行的规则。</p><p>关于自然界，我们从自然界中有一些普世的规则，其中有一个给我们启发最大的规律是：<strong>整体优化，而不是个体优化</strong>。你可能会对发生在你身边或者是你关心的一些人不好的事情不会简单地说这是坏事情或不好的事情，因为它很有可能是对整体是有好处，是一个更好的选择，从时间的维度上也不会再纠结于自己当下一些小的挫败，因为这很有可能是对你将来有帮助的，在你的整个人生阶段它是一个很好的事情。 </p><p>对很多创业者的启发是：就是不管你想做任何的项目都要考虑更为长远，而且更宏观一点，应该试图找一些能够促进整体进化的项目去做，任何产品组织或者个人都是一样的。曾经的辉煌可能毁于一旦。只有极少数在不断进化、不断适应的强者才能够存活下来，并且一步步地达到更高的高度。</p><p>这就告诉我们：<strong>要从自然的角度去俯瞰自身，做宇宙中微不足道的一员，然后又以某种非常微弱的方式为整体的进化做贡献</strong>。</p><h5 id="管理自我"><a href="#管理自我" class="headerlink" title="管理自我"></a>管理自我</h5><p>首先需要<strong>了解自己的人生追求是什么</strong>？根据自己的人生追求去设定人生目标，这个时候就需要我们非常诚实的面对自己内心的需求，我们到底想要什么，什么才能使我们快乐呢？</p><p><code>Ray Dalio</code>一生孜孜孜孜不倦追求的是有意义的工作和有意义的人际关系。什么让他快乐？金钱或者名利其实是不能让他快乐或者只能带来一个短期的小小满足，但实际上能持续让你快乐的东西：<strong>是净化、是自我提升</strong>，这样会让你保持一种兴奋感。</p><p>如果找到了什么东西是会让你感觉到快乐，就会知道你的人生目标是什么。设定了目标之后我们也要认识我们自己，要认清自己的优点和缺点，这个过程当中需要注意，人类或者大多数人会有一些大家都有的缺陷，人性的弱点，还会存在一定的思维盲点，很多时候我们可能没有意识到。<em>推荐阅读《人性的弱点》和《思考·快与慢》</em>。<strong>需要去直面缺点，而不是逃避缺点</strong>。只有突破这两点，才有可能突破自己的心理防线，理性对待自己的缺点，从而达到理性管理自己。</p><p>建议大家<strong>养成自己的习惯</strong>。<code>Ray Dalio</code> 推荐了<em>《习惯的力量》</em>这本书。通过频繁的、反复的练习，几乎是可以养成任何习惯，产生自控力的。我们大脑是具有可塑性的。大脑的可塑性远远超过我们对它的认知，面对一些新的知识新的技能，不要害怕去尝试，只要通过有一定技巧的刻意练习，甚至可以重装你的大脑，改变你的思维。</p><h5 id="协调他人"><a href="#协调他人" class="headerlink" title="协调他人"></a>协调他人</h5><p><strong>取长补短，有机合作</strong></p><p>人人和人之间是有非常大的不同，不管是观念、思维、性格还是技能都有很多不同，我们只需要保持一个<strong>开放和包容的心态</strong>去理解和接纳这些不同，同时<strong>客观的看待自己和他人的不同</strong>，取长补短，有机合作，借助他人的力量来帮助我们实现自己的目标。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-22-15243802139169.jpg" alt="设计实现目标的方案、像机器一样运行"></p><p><strong>实施方案</strong></p><p>对于我们个人不管是生活还是工作来说，可以把你设计成一部机器，在这个机器里它的目的就是为了帮你实现目标，在这个过程中你会设计你实施这个目标的方案，要实施方案需要做到三件事，第一个是<strong>尽量的发挥自己的优势</strong>；第二是通过<strong>养成一些好的习惯</strong>，或者是通过其他的方式来修正自己的缺点；第三个是<strong>协调他人</strong>，通过向他人求助来帮助自己完成目标。 </p><h4 id="实现目标的五个步骤"><a href="#实现目标的五个步骤" class="headerlink" title="实现目标的五个步骤"></a>实现目标的五个步骤</h4><ol><li><strong>设定清楚的目标</strong></li><li><strong>发现错误，并面对问题</strong></li><li><strong>辨识问题的根本原因</strong></li><li><strong>拟订计划先于执行</strong></li><li><strong>彻底执行</strong></li></ol><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-22-15243808904389.jpg" alt="设计一个机器"></p><p><strong>目标-问题-原因-计划-执行</strong></p><p>首先要设立一个非常明确的目标，要达到任何东西都要有一个清晰明确可以执行的目标，然后要发现错误，面对问题，在实现目标的过程中，总会碰到很多问题。比如你想创业有很多阻碍，想做成功一个事情肯定是有重重的困难，困难的可能是外界的也可能是内部的，但是内部的痛苦主要是来源于自己犯的错或者自己的缺点。<code>Ray Dalio</code>认为<strong>每个人要能做到非常冷静和非常精准的去分析、去诊断问题</strong>。我们要发现错误，并且能根本的、很精确的去诊断错误，而且不能对错误有恐惧感。</p><p>错误是对我们最宝贵的一个财富，因为越多的能认识到自己错误的时候，就能更多准确的找到问题，去帮助自己进步。第四步和第五步是拟定一个准确的计划执行。就像在健身房训练自己的肌肉一样，一步步用哑铃去锻炼自己的肌肉，增加哑铃的重量，最后达到个人的成长。最后一步是彻底执行。<code>Ray Dalio</code>强调<strong>五个步骤必须界限非常分明</strong>。比如首先必须有一个很明确的目标，才可能去找到自己的错误，然后找到自己的错误后才能辨别根本的原因，所以不是可以相互交叠的，必须是一个独立操作的五个步骤。</p><h4 id="管理原则概述"><a href="#管理原则概述" class="headerlink" title="管理原则概述"></a>管理原则概述</h4><h5 id="产生的背景"><a href="#产生的背景" class="headerlink" title="产生的背景"></a>产生的背景</h5><p>管理原则是相当于桥水基金的一个手册，这个手册是十几年前的时候，每个员工都要发一本，在这个公司里面是大家都需要看的并执行的，大家都要遵守的一些规定。在<code>2010</code>年的时候，他觉得这个管理原则非常的好，想要把它分享给其他人。于是，他把所有的管理原则都放在自己公司网站上，当时大概已经有几百万下载量。 </p><h5 id="写书的原因"><a href="#写书的原因" class="headerlink" title="写书的原因"></a>写书的原因</h5><p><code>Ray Dalio</code>看到有特别多的人下载了他的管理原则，而且收到很多下载了他管理原则的人正面反馈，他觉得有这个责任去把他的原则写成书，让更多的人看到。</p><h5 id="管理原则的构成"><a href="#管理原则的构成" class="headerlink" title="管理原则的构成"></a>管理原则的构成</h5><p><code>Ray Dalio</code>主要把管理原则分成了三个部分。第一点是强调了<strong>正确的企业文化对一个公司的影响</strong>；第二点是<strong>怎么能找到对的人去帮助形成这样对的企业文化</strong>，或者是怎怎么样能找到对的人去帮助推动公司的发展；第三点是<strong>建立并不断改进你的“机器”</strong>。</p><p><strong>Bridgewater</strong>的文化：</p><p><em>To produce excellent results, meaningful work, and meaningful relationships through radical truth and transparency</em>.</p><p>Eg：实时打分制；</p><h3 id="圆桌派"><a href="#圆桌派" class="headerlink" title="圆桌派"></a>圆桌派</h3><ol><li>本书启示&amp;争议</li><li>我的原则</li></ol><h4 id="本书启示-vs-争议"><a href="#本书启示-vs-争议" class="headerlink" title="本书启示 vs 争议"></a>本书启示 vs 争议</h4><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-22-15243821937815.jpg" alt="球员计分卡"></p><p>基于任何事件与问题都完全公开透明的的原则；公司内部人员进行＂球员计分卡＂的评估。<code>Ray Dalio</code>的做法会不会让员工觉得不受尊重以及被羞辱，严重打击公司的士气？</p><h5 id="李然-1"><a href="#李然-1" class="headerlink" title="李然"></a>李然</h5><p><strong>结合实际环境</strong></p><p>《原则》的作者，是基于它的文化，基于它的生长环境。这是一个非常西化，非常符合西方价值观的环境，有些原则，需要根据自己的环境来应用。例如我在经营公司的时候，当时我们准备学习<code>Facebook</code>还是<code>Google</code>，有一个<code>AM</code>的环境。在实施的过程中，由于信息带给大家各种差异，每个人认知不一样，对信息的前因后果也没有一个非常好的了解，每个人听到信息之后的反应是不同的。所以，我们在看这本书适用于哪些原则，或者看任何一本书、一些方法论或者哲学思想等，准备用于实践的时候，应该<strong>分析一下自己所处的环境</strong>在什么程度，非常重要，否则也会适得其反。 </p><p><strong>环境和沟通的方式</strong></p><p>早期在海外工作的时候，跟欧洲、美国的朋友有过这样的工作经历。在中国也有这样的工作经历，我发现很大的不同，一个公司、一个组织或一个团体，有这样一个人，能让所有的人畅所欲言还是比较幸福，大家相信他能够掌握好这个尺度、掌握好这个原则，所以他才可以大胆提出自己的想法。我也观察到，虽然中国文化里大家不习惯当面提出别人的不好，其实在西方文化观念影响下，他们也不会说的很直接，有些话还是不会讲。如果有一个绝对的人，让大家放心，在他的鼓舞下，大家可以做到畅所欲言，<strong>对事不对人</strong>。因为他们相信有这个人能够平衡大家因此产生的摩擦。回归了到之前的一个观点：当我们的结果跟我们的大脑预期产生冲突的时候，人会产生一些情绪，小到压抑，大到压力，在这样的情绪影响下，他可能就不会表达真正的自我。 </p><p><strong>实事求是，合理匹配</strong></p><p>任何事情要结合当时的环境。例如以前我在公司的时候，管理层有12个人，每周开会，提出了一个原则，可以在任何时间打断任何人的讲话，提出他的问题，以此来促进、提升彼此。我跟<code>CEO</code>在场的情况下，大家会提的比较热烈，因为大家会觉得没关系，我们会解决相关问题，就算财务经理指责供应链经理有问题，或供应链经理指责销售总监有问题，都会有人出面解决。但有时候，当我们不在场的情况下，大家完全不会和气讨论甚至相互攻击。不同认识之下造成信息的不确定性，是有一定风险的，需要酌情来使用。</p><p>不仅在我们工作当中，在影视作品中也有表现。最近我看了一部美剧是《迷失太空》，主人公在得知新区要灭亡的一些信息后，考虑是否需要告知大家，最后也没有告诉大家。原因是怕大家产生一些不必要的恐慌，而恐慌带来行为上的差异，就会面临失控状态。虽然这是一部影视作品，但它却真实的反映在我的管理经验中。在这个环境当中，能够掌控环境的发展，或者当环境走向最惨烈、最糟糕的情况，甚至在不能控制的情况下，可以最大限度追求公平公开的原则。如果做不到的话，可以分信息的等级来进行相应释放。在西方的哲学里也有类似体现，在什么样的层级，掌握什么样的信息。从这个角度来讲，看起来好像阶级森严，对人有不同的对待，但<strong>有什么样的能力匹配什么样的信息</strong>，是非常重要的一件事情。</p><p>回顾上周，我建议大家在做认知训练、认知提升的时候，需要一步一步来。如果跨越太大步骤，跳到终极原则，而终极原则是别人建立在他的认知、资源、能力基础之上，你可能没有这样的能力，没办法做出的相应的自我行为调整，就会带来极大的挑战，从而影响你对真正原则的体会和吸收。</p><p><strong>关键字</strong>：实事求是，结合自己的实际环境去考虑和使用别人的原则或者方法论，让原则落地不能急于求成，要根据自己的认知水平进行判断，同时需要不断的提升自己的认知水平。</p><h5 id="小分子-1"><a href="#小分子-1" class="headerlink" title="小分子"></a>小分子</h5><p><strong>自我评估</strong></p><p>因为没有正式在公司工作过的经验，可以谈一下看到“球员积分卡”所能想到的事情。这应该是其他员工对自己进行了打分的情况。在我们学校里有「自我评估」，每个学期结束之后会让每个学生自己评估。有没有可能是在别人打分的同时，也让自己对自己有一个自我评价，结合双方结果，再做出一个最后的判断。</p><p><strong>学会表达，避免尴尬</strong></p><p>关于中美差异，会不会很介意别人指出自己哪个地方做的不好。在和美国人或者我日常环境来看，我们很欢迎别人指出错误，因为是在帮助你进步，很多人也希望别人指出错误。其次，他们指出错误的时候并不是非常直白，或者用伤人的口气说这事做的不对，不应该这么做，而是非常客气、非常有礼貌，会让你觉得很舒服的方式告诉你。例如，他们会先说非常喜欢你完成的部分，从中能学到很多东西，但是某些方面还不够好，如果能够完善一下会更好。他们的表达方式让人觉得容易接受，让人感觉很好，并不会有直接伤人的感觉。</p><p><strong>关键字</strong>：在进行评判的时候，不仅仅需要给别人一个分数，也给自己实际一个分数，两者进行比较。表达的时候需要有沟通的艺术，学会表达，避免尴尬，给别人一个相对舒服的状态。</p><h5 id="Darren"><a href="#Darren" class="headerlink" title="Darren"></a>Darren</h5><p>我分享一些自己对打分制的看法，因为我是在一个基于项目制的课程中，平时就有很多小组合作的场景，每一门课基本上是一个小组合作完成，正在做一个类似于创业孵化的项目。在这过程中，每一个团队里面人特别少，应当保持一个合作的心态，要保持共赢的一个姿态，去相互交流。在这样一个场景下，实时打分，可能会不是特别好。因为规模比较小，每个人之间要必须要特别信任对方，有什么问题可以直接交流，所以对于小团队的场景达成这样原则可能不太适用。 </p><p><strong>关键字</strong>：小团队更多的是需要相互信任和合作，实时打分不太适合小团体。</p><h4 id="对英雄的理解"><a href="#对英雄的理解" class="headerlink" title="对英雄的理解"></a>对英雄的理解</h4><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-22-15243838250064.jpg" alt="资料来源：约瑟夫•坎贝尔，《千面英雄》"></p><h5 id="小分子-2"><a href="#小分子-2" class="headerlink" title="小分子"></a>小分子</h5><p><strong>试炼之路遇到的四种人</strong></p><p>英雄成长养成图是我印象非常深刻的一张图。<code>Ray Dalio</code>讲的英雄是他从最开始一个平凡人走上试炼之路过程。在我们日常生活中不管是工作还是学习，都会认为如果起步不够高的情况下，觉得一个平凡人受到一些事情的激励，例如你想达成什么目的，或者谁告诉你，怎么做之后可以达到你想要的东西，让我们受到某种激励去感召，去尝试、去走上一条试炼之路。</p><p>在这条路上可能会遇到四种不同的人，第一种是<strong>导师</strong>，他比你有经验，比你有见识，可以帮助你成长；第二种是<strong>盟友</strong>，他能和你站在一起成长；第三种是<strong>“晚辈”</strong>，他们在某个阶段还达不到你这种程度，需要你的帮助；第四种是<strong>敌人</strong>，他们会阻碍你的成长，会不断磨练你的战斗力。</p><p><strong>回报社会，帮助他人</strong></p><p>英雄可以缩小到我们每一个人在做任何一件事情都有可能会遇到的状况，在这条路上可能会有成功也会有失败，但是只要朝着一个相对正确的道路，朝着你的目标去走，利用好这四种人，很有可能会走上一个成功的道路。大多数情况下有可能失败，<code>Ray Dalio</code>认为大英雄都有可能会经历一场极大的失败，甚至是深渊。例如，<code>Ray Dalio</code>曾经几乎面临破产;苹果乔布斯有离开过苹果的时候，他们经过一场极大失败之后而成功。这对于我们普通人来说就很可能就再也爬不起来了，但是对于对于有特殊能力、特别坚定毅力或者品格上有异于常人的地方的人，他们会挺过来，从而导致他们韧性和智慧得到一个质的飞跃，整个人得到一种脱胎换骨的改变，就会爬上一个更高的高度。例如<code>Ray Dalio</code>特别强调一点，当他们功成名就的时候，很多人并不是止步不前，或者继续穷其一生往上走。<code>Ray Dalio</code>认为很多英雄到了一定功成名就的阶段，会觉得继续往上走不再是能够让他们兴奋的事情，而更多是想回报社会，回头想一下，在自己非常无助的时候是因为受别人的帮助或者自己的各种经历让自己学到很多，慢慢到了现在的位置，这时，他看到在他后面也有很多人也希望能够达到自己人生的一个高度，他会更想去帮助他们。英雄的循环图里面的后面一段就是回报社会，所以，<code>Ray Dalio</code>很热衷于做慈善，很热衷于给桥水培养新人。</p><p><strong>关键字</strong>：一个人成功的道路是曲折的，但是成功后会主动回馈和感谢正在曲折道路上的人，帮助他们实现一个高度，也是在回报社会的表现。</p><h5 id="李然-2"><a href="#李然-2" class="headerlink" title="李然"></a>李然</h5><p><strong>东西方文化差异原因</strong></p><p>造成东西方文化差异不仅是现代经济造成的，它是从人类迁徙开始，随着地理环境变迁，人文因素等造就了特定文化的差异。如果想最快的了解一下原因，可以听一下高晓松的解释。如果想深层次了解，可以读西方哲学和东方哲学，它是从人类迁移就开始叙述和分析的。换一句话说，我们今天形成东西方文化差异比较大的原因，是有它的自然条件以及人文条件，还有各种因素决定的事实。我们不应该去评价好与坏，如果站在时间维度上看的话，好坏并不那么重要。</p><p><strong>英雄产生的背景</strong></p><p>再回归到这个问题，对英雄的看法，英雄到底是什么？英雄到底是什么样的含义？为什么会有英雄？</p><p>可以看到，从古至今，英雄多数都是从战争中或巨大事件中涌现出来的，中国有句话叫“时势造英雄”，为什么这么说？英雄都是在打仗时候产生的，比如刘备、孙权、刘邦等。包括我们喜欢的漫威电影里的英雄。</p><p>从这个角度来说，这个时代是没有所谓战争时代英雄的。因为你不会去领导人在战争中取胜，受大家歌颂；在企业中，有人被塑造成英雄，塑造英雄的是谁？是<strong>大众</strong>。因为大众心底或者大部分人的心里是期望有这样的英雄，这是一个心理问题。我们对未来都有一定焦虑或恐慌，如果有英雄，或有这样的英雄人物在，我们就会觉得他对我会有较大的帮助。</p><p>大家再看英雄的另一面：英雄的个人生活。无论是在影视作品还是人物传记中，英雄的真实生活并没有想象中那么好。换句话说，我们看到的是他非常光辉的一面，做出巨大努力、牺牲的一面。其实当一个普通人面临这样的事情，做出的选择会截然不同。这是为什么现在有一些言论、影视作品也在往这个方向引导。</p><p>每个英雄可能跟普通人一样，只是说某些情景造就了他们某些特定的行为，甚至那行为是一个冲动，一个不自知的、下意识的行为，成就了某个非常好的结果，那他可能就会被歌颂。所以，我们追求这样的英雄，其实并不重要，还是要明白自己心里的英雄到底是谁，是什么样子的，想要一个什么样的英雄。<strong>怎么成为一个你心里你自己的英雄</strong>，我觉得这是接下来要更多思考的，对我们个人比较有用。</p><p><strong>关键字</strong>：尊重由于各种历史原因、地理因素、人文因素等造成的中西方文化差异；与其相信现有英雄不如搞明白自己的想要成为什么样的英雄并为之努力更为重要。</p><h4 id="我的原则"><a href="#我的原则" class="headerlink" title="我的原则"></a>我的原则</h4><p>分享自己原则或者阅读了《原则》后有什么原则可以分享？</p><h5 id="小分子-3"><a href="#小分子-3" class="headerlink" title="小分子"></a>小分子</h5><p><strong>生活原则</strong></p><p>我是一个会<strong>把生活当做一个整体</strong>的人，会尽可能<strong>平衡工作学习或者和朋友、家人的关系以及个人兴趣爱好</strong>。比如读书，会尽量的去平衡，把自己当作一个整体来推进，也不会因为是学生在学校除了学习就没有其他的事情可做。会尽力去做到平衡，这是我的第一个原则。</p><p>我很赞同一个观点：<strong>有意义的人际关系</strong>，我自己也是一直在追求这样的人际关系。虽然我们在生活中或者很多社交场合会遇到很多人，可能大家互通联系方式或者打招呼，但是对于我来说，比较看中的是能够深入交流的人，如果发现对方是一个不管关系走的多近，都是一个在表面或者没有敞开心扉交流的人，我不会花很多精力去刻意经营我们之间的关系，或者与你一起敞开心扉的聊生活，聊成长，或者聊对某些问题看法。比如，今晚我们大家一起分享同一本书，我会很认真，因为这是比较有内容、有意义的人际关系。</p><p><strong>读书习惯</strong></p><p>近几年来，我发现自己不知不觉地养成一些习惯。但我在养成这些习惯之前并没有读过类似于如何养成习惯的书，也没有意识到很多习惯其实是可以养成的。有一些事情是我想去做这件事的时候就开始做，坚持下去，慢慢就成了一种习惯。</p><p>例如，我的公众号（小分子简读），它是去年6月份才开始写，在这之前我只是断断续续的读了一些书，并没有形成一个系统化，更没有写读书笔记的动力，所以之前读过的书就容易忘记。于是，我想锻炼自己的写作能力，同时记录自己阅读的书籍、阅读笔记，于是，就开始写公众号。给自己设定了一个每一周都要写一篇文章的目标，慢慢地就养成了读书和写作的习惯。</p><p>从目前的效果来看，这个习惯给我带来了很多收获。不管是和大家分享一些书带给我更多视角，还是自己养成了一个写读书笔记的习惯，在这过程中，也认识了很多爱读书的朋友。</p><p><strong>锻炼的习惯</strong></p><p>我刚上大学的时候，没有规律锻炼的习惯，但是后面我发现，人需要多锻炼。在后面的生活里，我就养成规律锻炼的习惯。</p><p><strong>目标总结</strong></p><p>很多时候是我们可以想一想自己想做什么事情，在发现做一件事情的意义之后，就朝着想要做这件事情去认真做好，就不知不觉得成为你一个非常好的习惯。 </p><h5 id="李然-3"><a href="#李然-3" class="headerlink" title="李然"></a>李然</h5><p><strong>自我对这个世界的认知</strong>。</p><p>有一个非常重要的部分一直驱动着我，从小我有一颗非常强大的<strong>好奇心</strong>。在《原则》这本书里，它前面讲他个人成就的部分。我不是一个特别喜欢或者经常看成功人物传记的人，因为创业久了之后，发现这些就像大家对英雄的塑造一样，都是因为成功之后来总结的经验，实际当中可能有一些不为人知且非常有价值的节点并没有释放出来，我们并不知道。读了《原则》前半部分后，前三分之一是作者关于他人生的一个描述，这是对我启迪或对我影响最大的一个部分，包括我认识的很多人，或者以我们人类的价值观来评论他是一个成功的人，或者他是一个成功政客，或者他是一个成功企业家，大家都具备一些类似的因素，只是在这样一个因素上，达到的层级可能不同。如果你达到一个小的层级，可能管理你现在的工作，你的家庭生活会比较好。如果把这个所谓的原则应用的好的话，你可能会到更广的一个平台。</p><p>大家都有一个共性，都有一颗非常强大的「好奇心」，好奇心会驱使着你去思考。在思考的过程中，会建立更多的认知，更加的独立思考。有<strong>一颗好奇心以及独立思考的能力</strong>，是一个非常强大的个人原则。支撑这个原则，一定要有一个道德或者价值的平台，好多成就大的人都会有的特质，比较<strong>谦逊、心胸开阔</strong>。例如<code>Ray Dalio</code>在《原则》开头说到“我是一个愚人”。当我看到这里的时候，我就把“愚人”划下来。我接触过得很多成功的企业家，跟他们有短暂交流后，发现他们都非常谦卑，而且他能够非常耐心地聆听你的讲述，给你一些非常有价值的体验。就像小分子讲到，他可能三言两语就能拨动你一个触动、一个感知。所以基于<strong>一颗谦卑跟这种open的心态，保持好奇心，保持独立思考</strong>，是比较重要的一个原则。</p><p><strong>关键字</strong>：独立思考；保持开放清醒的头脑；寻找并发现适合你的事情，并能鼓起勇气这么做。</p><h5 id="Darren-1"><a href="#Darren-1" class="headerlink" title="Darren"></a>Darren</h5><p><strong>个人原则是一种习惯、流程和方法</strong></p><p>我们在用电脑工作的时候很容易被分散精力。比如收到新邮件通知，或者同学过来临时打扰一下，注意力就被跑偏了。另一个是当我看到别人有什么优点的时候，就想如何才能去学习并养成别人的优点，如何去分析他为什么有这样的优点，并把这个优点就是复制到我的身上。以前我经常总结，用了很简单的方法：用一个笔记本去记录和总结，觉得自己应该要改的习惯。后来发现经常用这个笔记本，很久以前的总结记录就永远被尘封了，从来就没有去看，长时间去写的心得，但是每次去决定要改一个习惯，发现还是做不到，改不了这个习惯。</p><p><strong>原则落地</strong></p><p>读完《原则》后，我把习惯写成自己生活的原则，当我们去说习惯的时候，可能对我们的这种约束力不是那么强，但是我们把它写成一个原则，在什么时候、什么条件下应该要做什么事情不应该要做什么事情的时候，必须坚持这是一个原则的话，会非常有助于我们克服自己人性的弱点，快速地养成一些优秀习惯，并除掉一些不良习惯。用这样的原则来克服自己人性的弱点，改正你的问题会特别快。例如<code>8</code>个月通过健身瘦<code>47</code>斤。另一个重要性的原因是它可以减少你自己个人决策的时间，可以让你注意力关注到最重要的问题上，减少自己的困惑。例如电脑电脑坏了购买电池的问题。</p><p><strong>建立自己原则库</strong></p><p>可以把一条条原则列到原则库里面，当下次再遇到类似的情况时可以参考。例如有些东西坏掉的时候，到底应不应该买？怎么样选择？它可以极大的减少决策时间，并做出最正确的决策。经常反思总结，把总结写成原则，可以非常快的<strong>修改不良习惯，养成优秀的习惯，减少决策时间</strong>。</p><p><strong>关键字</strong>：个人原则是一种习惯、流程和方法，原则要落地还需要坚持执行。同时建立自己的原则库，需要的时候随时调用，不仅能帮助养成优秀的习惯，同时也能减少决策时间。</p><h3 id="原书金句"><a href="#原书金句" class="headerlink" title="原书金句"></a>原书金句</h3><ol><li><p>拥抱现实并与之共存。</p><p><code>Dreams + Reality + Determination = A Successful Life</code></p></li><li><p>认清自己，并彻底的敞开心胸(<code>Open-mindedness</code>)。</p><p><code>Pain + Reflection = Progress</code></p></li><li><p>抛弃自我意识(<code>ego</code>)与找出盲点(<code>blind spot</code>)。</p></li><li><p>发现他人的优点与长处，结合并发挥组织的力量。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读书会&lt;/p&gt;
&lt;p&gt;第五十三期·圆桌派第一期&lt;/p&gt;
&lt;p&gt;《原则》分享会&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="https://chensenlin.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="笔记" scheme="https://chensenlin.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="BitTiger" scheme="https://chensenlin.cn/tags/BitTiger/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据之用爬虫测试网站|第11天</title>
    <link href="https://chensenlin.cn/posts/62394/"/>
    <id>https://chensenlin.cn/posts/62394/</id>
    <published>2018-04-19T08:27:14.000Z</published>
    <updated>2018-04-23T07:31:32.657Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>测试的简介；</p><p>Selenium单元测试和Python单元测试;</p><a id="more"></a><h3 id="测试简介"><a href="#测试简介" class="headerlink" title="测试简介"></a>测试简介</h3><p>运行一套测试方法能够保证你的代码按照既定的目标运行，不仅可以节约你的时间，减少你对<code>bug</code> 的忧虑，还可以让新版本升级变得更加简单。</p><p>单元测试的特点：</p><ol><li>每个单元测试用于测试一个零件(<code>component</code>)功能的一个方面。</li><li>每个单元测试都可以完全独立地运行，一个单元测试需要的所有启动(<code>setup</code>)和卸载 (<code>teardown</code>)都必须通过这单元测试本身去处理。单元测试不能对其他测试造成干扰，而且不论按何种顺序排列，它们都必须能够正常地运行。</li><li>每个单元测试通常至少包含一个断言(<code>assertion</code>)。</li><li>单元测试与生产代码是分离的。</li></ol><h3 id="Python单元测试"><a href="#Python单元测试" class="headerlink" title="Python单元测试"></a>Python单元测试</h3><p><code>Python</code>的单元测试模块<code>unittest</code>，所有标准版<code>Python</code>安装后都有。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAddition</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Setting up the test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Tearing down the test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_twoPlusTwo</span><span class="params">(self)</span>:</span></span><br><span class="line">        total = <span class="number">2</span>+<span class="number">2</span></span><br><span class="line">        self.assertEqual(<span class="number">4</span>, total)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p><code>setUp()</code>和<code>tearDown()</code>在每个测试的开始和结束都会运行一次，而不是把类中所有测试作为一个整体在开始或结束时各运行一次。</p><h3 id="Selenium单元测试"><a href="#Selenium单元测试" class="headerlink" title="Selenium单元测试"></a>Selenium单元测试</h3><p><code>Selenium</code> 不要求单元测试必须是类的一个函数，它的 “断言”语句也不需要括号，而且测试通过的话不会有提示，只有当测试失败时才会产生信息提示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.PhantomJS()</span><br><span class="line">driver.get(<span class="string">"http://en.wikipedia.org/wiki/Monty_Python"</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="string">"Monty Python"</span> <span class="keyword">in</span> driver.title</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><p>写 <code>Selenium</code> 单元测试的时候需要比写 <code>Python</code> 单元测试更加随意，断言语句甚至可以整合到生产代码中，非常适合某些条件不能满足就中断代码的需求。</p><h4 id="Python单元测试与Selenium单元测试的选择"><a href="#Python单元测试与Selenium单元测试的选择" class="headerlink" title="Python单元测试与Selenium单元测试的选择"></a>Python单元测试与Selenium单元测试的选择</h4><p><code>Selenium</code> 可以轻易地获取网站的信息，而单元测试可以评估这些信息是否满足通过测试的条件。因此，你没有理由拒绝把 <code>Selenium</code> 导入 <code>Python</code>的单元测试，两者组合是最佳拍档。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试的简介；&lt;/p&gt;
&lt;p&gt;Selenium单元测试和Python单元测试;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之图像识别与文字处理|第10天</title>
    <link href="https://chensenlin.cn/posts/55181/"/>
    <id>https://chensenlin.cn/posts/55181/</id>
    <published>2018-04-15T10:02:11.000Z</published>
    <updated>2018-04-23T07:31:17.306Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>图像识别与文字处理；</p><p>使用<code>Pillow</code>库和<code>Tesseract</code>。</p><a id="more"></a><h3 id="图像识别与文字处理"><a href="#图像识别与文字处理" class="headerlink" title="图像识别与文字处理"></a>图像识别与文字处理</h3><p>将图像翻译成文字一般被称为光学文字识别(<code>Optical Character Recognition</code>，<code>OCR</code>)。可以实现 <code>OCR</code> 的底层库并不多，目前很多库都是使用共同的几个底层 <code>OCR</code> 库，或者是在上面进行定制。</p><h4 id="OCR库概述"><a href="#OCR库概述" class="headerlink" title="OCR库概述"></a>OCR库概述</h4><p><code>Python</code>常用的<code>OCR</code>库有两个：<code>Pillow</code> 和 <code>Tesseract</code>。每个库都可以从它们的网站上下载并安装(<code>http://pillow.readthedocs.org/installation.html</code> 和<br><code>https://pypi.python.org/pypi/pytesseract</code>)，或者用第三方管理器(像 <code>pip</code>)通过<code>“pillow”</code>和 <code>“pytesseract”</code>进行安装。</p><h5 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h5><p><code>Pillow</code> 是从 <code>Python 2.x</code>版本的 <code>Python</code>图像库(<code>Python Imaging Library</code>，<code>PIL</code>)分出来的，支持<code>Python 3.x</code>版本。和<code>PIL</code>一样，<code>Pillow</code>也可以轻松地导入代码，并通过大量的过滤、修饰甚至像素级的变换操作处理图片:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageFilter</span><br><span class="line"></span><br><span class="line">kitten = Image.open(<span class="string">"demo.jpg"</span>)<span class="comment">#打开图片</span></span><br><span class="line">blurryKitten = kitten.filter(Imagefilter.GaussianBlur)</span><br><span class="line">blurryKitten.save(<span class="string">"demo_two.jpg"</span>)<span class="comment">#另存为</span></span><br><span class="line">blurryKitten.show()</span><br></pre></td></tr></table></figure><h5 id="Tesseract"><a href="#Tesseract" class="headerlink" title="Tesseract"></a>Tesseract</h5><p><code>Tesseract</code> 是目前公认最优秀、最精确的开源 <code>OCR</code> 系统。<code>Tesseract</code> 也具有很高的灵活性。它可以通过训练识别出任何字体，也可以识别出任何<code>Unicode</code>字符。</p><p><code>Tesseract</code> 是一个 <code>Python</code>的命令行工具，不是通过 <code>import</code>语句导入的库。安装之后，要用 <code>tesseract</code> 命令在<code>Python</code>的外面运行。</p><p>安装 Tesseract</p><p>Windows:<a href="https://code.google.com/p/tesseract-ocr/ downloads/list" target="_blank" rel="noopener">点击下载安装</a></p><p>Linux:<code>sudo apt-get tessertact-ocr</code></p><p>Mac: <code>brew install tesseract</code>;也可以下载源码安装</p><h5 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h5><p><code>NumPy</code> 是一个非常强大的库，具有大量线性代数 以及大规模科学计算的方法。因为<code>NumPy</code>可以用数学方法把图片表示成巨大的像素数组，所以它可以流畅地配合 <code>Tesseract</code> 完成任务。</p><p>NumPy 可以通过第三方包管理器(比如 pip)来安装:<code>pip install numpy</code></p><h4 id="处理格式规范的文字"><a href="#处理格式规范的文字" class="headerlink" title="处理格式规范的文字"></a>处理格式规范的文字</h4><p>例如通过运行<code>Tesseract</code>，读取文件并把结果写到一个文本文件中:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesseract text.tif textoutput | cat test.txt</span><br></pre></td></tr></table></figure><p><code>Tesseract</code> 最大的缺点是对渐变背景色的处理。利用<code>Pillow</code> 库，我们可以创建一个阈值过滤器来去掉渐变的背景色，只把文字留下来，从而让图片更加清晰，便于 <code>Tesseract</code> 读取:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanFile</span><span class="params">(filePath, newFilePath)</span>:</span> </span><br><span class="line">    image = Image.open(filePath)</span><br><span class="line">    <span class="comment"># 对图片进行阈值过滤，然后保存</span></span><br><span class="line">    image = image.point(<span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span> x&lt;<span class="number">143</span> <span class="keyword">else</span> <span class="number">255</span>)</span><br><span class="line">    image.save(newFilePath)</span><br><span class="line">    <span class="comment"># 调用系统的tesseract命令对图片进行OCR识别 </span></span><br><span class="line">    subprocess.call([<span class="string">"tesseract"</span>, newFilePath, <span class="string">"output"</span>])</span><br><span class="line">    <span class="comment"># 打开文件读取结果</span></span><br><span class="line">    outputFile = open(<span class="string">"output.txt"</span>, <span class="string">'r'</span>) </span><br><span class="line">    print(outputFile.read())</span><br><span class="line">    outputFile.close()</span><br><span class="line"></span><br><span class="line">cleanFile(<span class="string">"text_2.jpg"</span>, <span class="string">"text_2_clean.png"</span>)</span><br></pre></td></tr></table></figure><p>在提交给 <code>Tesseract</code> 处理之前，那些带标题的、带有大片空白的图片，或者有其他问题的图 片，都应该做预处理。</p><p>今天的内容没有特别难，我写的比较简单，爬取网络的图片和验证码识别还没写，先从简单的消化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图像识别与文字处理；&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Pillow&lt;/code&gt;库和&lt;code&gt;Tesseract&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>微信使用小技巧</title>
    <link href="https://chensenlin.cn/posts/56894/"/>
    <id>https://chensenlin.cn/posts/56894/</id>
    <published>2018-04-15T04:56:31.000Z</published>
    <updated>2018-04-23T07:50:47.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>小技巧，大实用。</p><a id="more"></a><h3 id="微信日常小技巧"><a href="#微信日常小技巧" class="headerlink" title="微信日常小技巧"></a>微信日常小技巧</h3><p>00 朋友圈文字展示，7行不折叠。</p><p>01 査看群里已有哪些好友，通讯录-插 签-新建标签-从群里导入-选择群聊 査看关注同一个公众号的好友数，取消 关注-搜索该公众号。</p><p>02 批量査看是否好友，建30人以下群聊 不发消息，这29人不会收到提醒。</p><p>03 建单人群（发起群聊-面对面建群，拉两人删除）。</p><p>04 査看好友某个时间段朋友圈（搜索-朋 友圈-好友-蹄选）。</p><p>05 某条朋友圈互动不再提示 </p><p>当已点赞或者评论某条朋友圈，朋友们也在下面互动，如果不想收到大量的提醒，iOS用户只要将这条消息向左划然 后选择不再通知就可以，安卓用户则是长按这个提醒，然后选择不再通知。 删除好友后再次添加不会提醒对方长按头像可在群聊里@该用户。</p><p>06 朋友圈长按头像可直接设置朋友圈权限 微信发送高清照片，聊天窗口-加号长按相册按钮。</p><p>07 微信拍照不自动保存，设置内关掉自动 存储的开关。设置-通用-照片和视频。</p><p>08 主页面添加好友，输入 [:recover] ,注意有冒号，就可以进行一些问题的排查修复。 </p><p>09 长按朋友圈小视频，选择静音播放。 长按朋友圈图片可直接再次编辑朋友圈图片。 </p><p>10 微信PG端可直接右键消息引用其他人。</p><p>11 在微信的拍摄页面，双击屏幕，可以切换前后摄像头 。</p><p>12 长按拍照按钮，然后上下滑动手指，可以调节焦距。</p><p>13 在手机上删除掉与某人的全部聊天记录 之后，再登陆网页版，还可以看到依据最后聊天时间排序的好友。</p><p>14 在二人对话栏里，长按对方的微信头像，对话框里会出现对方的微信昵称。 把gif动图发到微信网页版，可以自动转为动画表情。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小技巧，大实用。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://chensenlin.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="微信" scheme="https://chensenlin.cn/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之采集JavaScript|第09天</title>
    <link href="https://chensenlin.cn/posts/12496/"/>
    <id>https://chensenlin.cn/posts/12496/</id>
    <published>2018-04-11T10:53:21.000Z</published>
    <updated>2018-04-23T07:31:13.083Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>了解JavaScript；</p><p>使用<code>selenium</code>库和<code>phantomjs</code>。</p><a id="more"></a><h3 id="采集JavaScript"><a href="#采集JavaScript" class="headerlink" title="采集JavaScript"></a>采集JavaScript</h3><p>客户端脚本语言是运行在浏览器而非服务器上的语言。客户端语言成功的前提是浏览器拥有正确地解释和执行这类语言的能力。</p><p>到目前为止，<code>JavaScript</code> 是网络上最常用也是支持者最多的客户端脚本语言。它可以收集 用户的跟踪数据，不需要重载页面直接提交表单，在页面嵌入多媒体文件，甚至运行网页游戏。那些看起来非常简单的页面背后通常使用了许多 <code>JavaScript</code> 文件。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> &gt;</span><br><span class="line">    alert(<span class="string">"这是一个JavaScript的文件！"</span>)</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h4><p>几个关键字了解一下：弱类型语言，其他语言有的基本都有。<code>JavaScript</code>里所有的变量都用 <code>var</code>关键词字进行定义，可以把函数作为变量使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> fibonacci = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = b; b = a + b;</span><br><span class="line">        a = temp; <span class="keyword">return</span> b;</span><br><span class="line">    &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fibInstance = fibonacci();</span><br><span class="line"><span class="built_in">console</span>.log(fibInstance()+<span class="string">" is in the Fibonacci sequence"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fibInstance()+<span class="string">" is in the Fibonacci sequence"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fibInstance()+<span class="string">" is in the Fibonacci sequence"</span>); </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>上面的例子看一下就好，熟悉一下就可以，就是这么简单。</p><p>常用的JavaScript库有很多。例如<a href="https://jquery.com" target="_blank" rel="noopener">jQuery</a>,<a href="https://analytics.google.com/" target="_blank" rel="noopener">Google Analytics</a>,<a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React</a>等等，了解一下。</p><h4 id="Ajax和动态HTML"><a href="#Ajax和动态HTML" class="headerlink" title="Ajax和动态HTML"></a>Ajax和动态HTML</h4><p>与网站服务器通信的唯一方式，就是发出<code>HTTP</code>请求获取新页面,如果提交表单之后，或从服务器获取信息之后，网站的页面不需要重新刷新，那么你访问的网站就在用<code>Ajax</code> 技术。</p><p><code>Ajax</code>全称是<code>Asynchronous JavaScript and XML</code>(异步 <code>JavaScript</code>和 <code>XML</code>)，网站不需要使用单独的页面请求就可以和网络服务器进行交互 (收发信息)。</p><p>在<code>Python</code>中用<code>Selenium</code>执行<code>JavaScript</code><a href="http://www.seleniumhq.org/" target="_blank" rel="noopener">Selenium</a>是一个强大的网络数据采集工具，其最初是为网站自动化测试而开发的。近几年，它还被广泛用于获取精确的网站快照，因为它们可以直接运行在浏览器上。<code>Selenium</code>可以让浏览器自动加载页面，获取需要的数据，甚至页面截屏，或者判断网站上某些动作是否发生。<code>Selenium</code> 自己不带浏览器，它需要与第三方浏览器结合在一起使用。</p><p>我们可以用一个叫<a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">PhantomJS</a>的工具代替真实的浏览器。<code>PhantomJS</code> 是一个“无头”(<code>headless</code>)浏览器。它会把网站加载到内存并执行页面上的 <code>JavaScript</code>，但是它不会向用户展示网页的图形界面。把 <code>Selenium</code>和 <code>PhantomJS</code> 结合在一 起，就可以运行一个非常强大的网络爬虫了，可以处理 <code>cookie</code>、<code>JavaScrip</code>、<code>header</code>，以及任何你需要做的事情。</p><p>安装<code>Selenium</code>可以去其官网下载安装，也可以直接<code>pip</code>来安装这个库，非常简单。但是<code>PhantomJS</code>不是库，不能直接用<code>pip</code>安装，可以直接去官网<a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">下载页面</a>下载安装，同时如果你是Mac的用户可以通过<code>homebrew</code>安装：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>phantomjs</span><br></pre></td></tr></table></figure><p><code>Selenium</code> 库是一个在 <code>WebDriver</code> 上调用的 <code>API</code>。<code>WebDriver</code> 有点儿像可以加载网站的浏览器，但是它也可以像 <code>BeautifulSoup</code> 对象一样用来查找页面元素，与页面上的元素进行交互 (发送文本、点击等)，以及执行其他动作来运行网络爬虫。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=<span class="string">'/usr/local/Cellar/phantomjs/2.1.1/bin/phantomjs'</span>) <span class="comment">#创建了一个新的Selenium WebDriver，需要指定自己的phantomjs路径</span></span><br><span class="line">driver.get(<span class="string">"http://pythonscraping.com/pages/javascript/ajaxDemo.html"</span>) <span class="comment">#用WebDriver加载页面</span></span><br><span class="line">time.sleep(<span class="number">3</span>) <span class="comment">#暂停3秒执行</span></span><br><span class="line">print(driver.find_element_by_id(<span class="string">'content'</span>).text) <span class="comment">#查看页面内容</span></span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><h4 id="处理重定向"><a href="#处理重定向" class="headerlink" title="处理重定向"></a>处理重定向</h4><p>客户端重定向是在服务器将页面内容发送到浏览器之前，由浏览器执行 <code>JavaScript</code> 完成的 页面跳转，而不是服务器完成的跳转。当使用浏览器访问页面的时候，有时很难区分这两种重定向。由于客户端重定向执行很快，加载页面时你甚至感觉不到任何延迟，所以会让你觉得这个重定向就是一个服务器端重定向。</p><p>服务端重定向可以通过<code>urllib</code>库来解决，但是客户端的重定向不能这样处理。<code>Selenium</code> 可以执行这种 <code>JavaScript</code> 重定向，和它处理其他 <code>JavaScript</code> 的方式一样;但是这类重定向的主要问题是什么时候停止页面监控，也就是说，怎么识别一个页面已经完成重定向。</p><p>我们可以用一种智能的方法来检测客户端重定向是否完成，首先从页面开始加载 时就“监视”<code>DOM</code> 中的一个元素，然后重复调用这个元素直到 <code>Selenium</code> 抛出一个<code>StaleElementReferenceException</code> 异常;也就是说，元素不在页面的 <code>DOM</code> 里了，说明这时网站已经跳转:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webelement <span class="keyword">import</span> WebElement</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> StaleElementReferenceException</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waitForLoad</span><span class="params">(driver)</span>:</span></span><br><span class="line">    elem = driver.find_element_by_tag_name(<span class="string">"html"</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">20</span>:</span><br><span class="line">            print(<span class="string">"Timing out after 10 seconds and returning"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        time.sleep(<span class="number">.5</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            elem == driver.find_element_by_tag_name(<span class="string">"html"</span>)</span><br><span class="line">        <span class="keyword">except</span> StaleElementReferenceException:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=<span class="string">'drivers/phantomjs/phantomjs-2.1.1-macosx/bin/phantomjs'</span>)</span><br><span class="line">driver.get(<span class="string">"http://pythonscraping.com/pages/javascript/redirectDemo1.html"</span>)</span><br><span class="line">waitForLoad(driver)</span><br><span class="line">print(driver.page_source)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解JavaScript；&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;selenium&lt;/code&gt;库和&lt;code&gt;phantomjs&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之登录窗口采集处理|第08天</title>
    <link href="https://chensenlin.cn/posts/64604/"/>
    <id>https://chensenlin.cn/posts/64604/</id>
    <published>2018-04-08T12:56:14.000Z</published>
    <updated>2018-04-23T07:31:06.438Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>利用<code>Requests</code>库处理<code>Cookie</code>、<code>session</code>等方式的登录。</p><a id="more"></a><h3 id="登录窗口采集处理"><a href="#登录窗口采集处理" class="headerlink" title="登录窗口采集处理"></a>登录窗口采集处理</h3><p>如果我们采集的网站需要我们登录后才能获取我们想要的数据，这就需要进一步处理登录这个问题。</p><p>登录的原理很简单，即前台向服务器传输数据进行验证。传输的方式有很多种，例如<code>GET</code>、<code>POST</code>；页面表单基本上可以看成是一种用户提交 <code>POST</code>请求的方式，且这种请求方式是服务器能够理解和使用的。</p><h4 id="Python-Requests库"><a href="#Python-Requests库" class="headerlink" title="Python Requests库"></a>Python Requests库</h4><p>除了<code>Python</code>的标准库<code>urllib</code>库，还有第三方库可以选择，例如：<code>Requests</code>。主要擅长处理那些复杂的 <code>HTTP</code> 请求、<code>cookie</code>、<code>header</code>(响应头和请求头)等内容的 <code>Python</code>第三方库。</p><blockquote><p>项目地址：<a href="https://github.com/kennethreitz/requests/" target="_blank" rel="noopener">https://github.com/kennethreitz/requests/</a></p></blockquote><p>安装的方式也很简单。例如<code>pip</code>安装，或者下载源码安装。</p><blockquote><p>源码地址：<a href="https://github.com/kennethreitz/requests/tarball/master" target="_blank" rel="noopener">https://github.com/kennethreitz/requests/tarball/master</a></p></blockquote><h4 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h4><p>提交表单一般是<code>HTML</code>的方式可以实现，且大多也采用这样的方式进行提交。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"processing.php"</span>&gt;</span></span><br><span class="line">Nickename: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"nickename"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们<code>Python</code>的用<code>Requests</code>库来提交十分简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">params = &#123;<span class="string">'name'</span>: <span class="string">'Ryan'</span>, <span class="string">'username'</span>: <span class="string">'Mitchell'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">"http://pythonscraping.com/files/processing.php"</span>, data=params)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h4 id="单选按钮、复选框等输入"><a href="#单选按钮、复选框等输入" class="headerlink" title="单选按钮、复选框等输入"></a>单选按钮、复选框等输入</h4><p>无论表单的字段看起来多么复杂，仍然只有两件事是需要关注的:字段名称和值。字段名称可以通过查看源代码寻找<code>name</code> 属性轻易获得。而字段的值有时会比较复杂，有可能是在表单提交之前通过 <code>JavaScript</code> 生成的。</p><p>我们可以通过抓包或者浏览器的网络请求信息来判断，例如：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>chensenlin.cn?c=hello<span class="variable">&amp;m</span>=senlin</span><br></pre></td></tr></table></figure><p><code>Python</code>需要理解为：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'c'</span>:<span class="string">'hello'</span>,<span class="string">'m'</span>:<span class="string">'senlin'</span>&#125;</span><br></pre></td></tr></table></figure><p>具体查看方法可以参考下图所示：</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-08-15231905765646.jpg" alt=""></p><h4 id="提交文件或者图像"><a href="#提交文件或者图像" class="headerlink" title="提交文件或者图像"></a>提交文件或者图像</h4><p><code>HTML</code>提交文件的时候，需要添加一个参数<code>enctype=&quot;multipart/form-data&quot;</code>,声明这是文件上传的类型。同时<code>input</code>的<code>type</code>为<code>file</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">from</span> <span class="attr">action</span>=<span class="string">"uploadFile.php"</span> <span class="attr">metoh</span>=<span class="string">"post"</span>  <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">uploadFile:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"filename"</span>&gt;</span></span><br><span class="line">提交：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同理，<code>Python Requests</code> 库对这种表单的处理方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">     files = &#123;<span class="string">'uploadFile'</span>: open(<span class="string">'../files/Python-logo.png'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">     r = requests.post(<span class="string">"https:chensenlin.cn?c=filename&amp;m=upload"</span>,files=files)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h4 id="处理登录和Cookie"><a href="#处理登录和Cookie" class="headerlink" title="处理登录和Cookie"></a>处理登录和Cookie</h4><p>网站大多都用 <code>cookie</code> 跟踪用户是否已登录的状态信息。一旦网站验证了你的登录权证，它就会将它们保存在你的浏览器的 <code>cookie</code> 中，里面通常包含一个服务器生成的令牌、登录有效时限和状态跟踪信息。网站会把这个<code>cookie</code>当作信息验证的证据，在你浏览网站的每个页面时出示给服务器。</p><p>根据我们上面的逻辑用<code>Requests</code>库跟踪<code>cookie</code>的代码示例也比较简单： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">params = &#123;<span class="string">'username'</span>: <span class="string">'demochen'</span>, <span class="string">'password'</span>: <span class="string">'password'</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">"http://pythonscraping.com/pages/cookies/welcome.php"</span>, params)</span><br><span class="line">print(<span class="string">"Cookie is set to:"</span>)</span><br><span class="line">print(r.cookies.get_dict())</span><br><span class="line">print(<span class="string">"-----------"</span>)</span><br><span class="line">print(<span class="string">"Going to profile page..."</span>)</span><br><span class="line">r = requests.get(<span class="string">"http://pythonscraping.com/pages/cookies/profile.php"</span>,cookies=r.cookies)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>不过也有<code>session</code>的方式进行登录,但是<code>Requests</code>库的<code>session</code>函数处理也很方便。具体和<code>cookie</code>类似，不过多阐述,或者查看文档了解也可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">session = requests.Session()</span><br><span class="line">params = &#123;<span class="string">'username'</span>: <span class="string">'username'</span>, <span class="string">'password'</span>: <span class="string">'password'</span>&#125;</span><br><span class="line">s = session.post(<span class="string">"http://pythonscraping.com/pages/cookies/welcome.php"</span>, params)</span><br><span class="line">print(<span class="string">"Cookie is set to:"</span>)</span><br><span class="line">print(s.cookies.get_dict())</span><br><span class="line">print(<span class="string">"-----------"</span>)</span><br><span class="line">print(<span class="string">"Going to profile page..."</span>)</span><br><span class="line">s = session.get(<span class="string">"http://pythonscraping.com/pages/cookies/profile.php"</span>) </span><br><span class="line">print(s.text)</span><br></pre></td></tr></table></figure><p>值得注意的是，登录还有一种是用<code>HTTP</code>基本接入认证的方式。<code>Requests</code>库有一个 <code>auth</code>模块专门用来处理 <code>HTTP</code> 认证:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> AuthBase</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line">     auth = HTTPBasicAuth(<span class="string">'ryan'</span>, <span class="string">'password'</span>)</span><br><span class="line">     r = requests.post(url=<span class="string">"http://pythonscraping.com/pages/auth/login.php"</span>, auth=</span><br><span class="line">auth)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用&lt;code&gt;Requests&lt;/code&gt;库处理&lt;code&gt;Cookie&lt;/code&gt;、&lt;code&gt;session&lt;/code&gt;等方式的登录。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之处理自然语言|第07天</title>
    <link href="https://chensenlin.cn/posts/54692/"/>
    <id>https://chensenlin.cn/posts/54692/</id>
    <published>2018-04-04T14:13:44.000Z</published>
    <updated>2018-04-23T07:31:01.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>处理自然语言包括自然语言工具包和数据概括。</p><a id="more"></a><h3 id="处理自然语言"><a href="#处理自然语言" class="headerlink" title="处理自然语言"></a>处理自然语言</h3><h4 id="概括数据"><a href="#概括数据" class="headerlink" title="概括数据"></a>概括数据</h4><p>在之前我们了解了如何把文本内容分解成 <code>n-gram</code> 模型，或者说是<code>n</code>个单词长度的词组。从最基本的功能上说，这个集合可以用来确定这段文字中最常用的单词和短语。另外，还可以提取原文中那些最常用的短语周围的句子，对原文进行看似合理的概括。</p><p>例如我们根据威廉 ·亨利 ·哈里森的就职演全文进行分析。<a href="http://pythonscraping.com/files/inaugurationSpeech.txt" target="_blank" rel="noopener">文章地址</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanSentence</span><span class="params">(sentence)</span>:</span></span><br><span class="line">    sentence = sentence.split(<span class="string">' '</span>)</span><br><span class="line">    sentence = [word.strip(string.punctuation+string.whitespace) <span class="keyword">for</span> word <span class="keyword">in</span> sentence]</span><br><span class="line">    sentence = [word <span class="keyword">for</span> word <span class="keyword">in</span> sentence <span class="keyword">if</span> len(word) &gt; <span class="number">1</span> <span class="keyword">or</span> (word.lower() == <span class="string">'a'</span> <span class="keyword">or</span> word.lower() == <span class="string">'i'</span>)]</span><br><span class="line">    <span class="keyword">return</span> sentence</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanInput</span><span class="params">(content)</span>:</span></span><br><span class="line">    content = content.upper()</span><br><span class="line">    content = re.sub(<span class="string">'\n'</span>, <span class="string">' '</span>, content)</span><br><span class="line">    content = bytes(content, <span class="string">'UTF-8'</span>)</span><br><span class="line">    content = content.decode(<span class="string">'ascii'</span>, <span class="string">'ignore'</span>)</span><br><span class="line">    sentences = content.split(<span class="string">'. '</span>)</span><br><span class="line">    <span class="keyword">return</span> [cleanSentence(sentence) <span class="keyword">for</span> sentence <span class="keyword">in</span> sentences]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNgramsFromSentence</span><span class="params">(content, n)</span>:</span></span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(content)-n+<span class="number">1</span>):</span><br><span class="line">        output.append(content[i:i+n])</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNgrams</span><span class="params">(content, n)</span>:</span></span><br><span class="line">    content = cleanInput(content)</span><br><span class="line">    ngrams = Counter()</span><br><span class="line">    ngrams_list = []</span><br><span class="line">    <span class="keyword">for</span> sentence <span class="keyword">in</span> content:</span><br><span class="line">        newNgrams = [<span class="string">' '</span>.join(ngram) <span class="keyword">for</span> ngram <span class="keyword">in</span> getNgramsFromSentence(sentence, n)]</span><br><span class="line">        ngrams_list.extend(newNgrams)</span><br><span class="line">        ngrams.update(newNgrams)</span><br><span class="line">    <span class="keyword">return</span>(ngrams)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content = str(</span><br><span class="line">      urlopen(<span class="string">'http://pythonscraping.com/files/inaugurationSpeech.txt'</span>).read(),</span><br><span class="line">              <span class="string">'utf-8'</span>)</span><br><span class="line">ngrams = getNgrams(content, <span class="number">3</span>)</span><br><span class="line">print(ngrams)</span><br></pre></td></tr></table></figure><h4 id="自然语言工具包"><a href="#自然语言工具包" class="headerlink" title="自然语言工具包"></a>自然语言工具包</h4><p>自然语言工具包(<code>Natural Language Toolkit，NLTK</code>)就是这样一个 <code>Python</code>库，用于识别和标记英语文本中各个词的词性(<code>parts of speech</code>)。</p><h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><p><code>NLTK</code>网站(<code>http://www.nltk.org/install.html</code>)。安装软件比较简单，例如<code>pip</code>安装。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  psysh git:(master) pip <span class="keyword">install</span> nltk</span><br><span class="line">Collecting nltk</span><br><span class="line">  <span class="keyword">Using</span> cached nltk<span class="number">-3.2</span><span class="number">.5</span>.tar.gz</span><br><span class="line">Requirement already satisfied: six <span class="keyword">in</span> /usr/<span class="keyword">local</span>/lib/python3<span class="number">.6</span>/site-packages (<span class="keyword">from</span> nltk)</span><br><span class="line">Building wheels <span class="keyword">for</span> collected packages: nltk</span><br><span class="line">  Running setup.py bdist_wheel <span class="keyword">for</span> nltk ... done</span><br><span class="line">  <span class="keyword">Stored</span> <span class="keyword">in</span> <span class="keyword">directory</span>: /<span class="keyword">Users</span>/demo/<span class="keyword">Library</span>/Caches/pip/wheels/<span class="number">18</span>/<span class="number">9</span>c/<span class="number">1</span>f/<span class="number">276</span>bc3f421614062468cb1c9d695e6086d0c73d67ea363c501</span><br><span class="line">Successfully built nltk</span><br><span class="line">Installing collected packages: nltk</span><br><span class="line">Successfully installed nltk<span class="number">-3.2</span><span class="number">.5</span></span><br><span class="line">You <span class="keyword">are</span> <span class="keyword">using</span> pip <span class="keyword">version</span> <span class="number">9.0</span><span class="number">.1</span>, however <span class="keyword">version</span> <span class="number">9.0</span><span class="number">.3</span> <span class="keyword">is</span> available.</span><br><span class="line">You should <span class="keyword">consider</span> upgrading via the <span class="string">'pip install --upgrade pip'</span> command.</span><br></pre></td></tr></table></figure><p>检测一下就OK </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  psysh git:(master) python</span><br><span class="line">Python 3.6.4 (default, Mar  1 2018, 18:36:50)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import nltk</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>输入<code>nltk.download()</code>就可以看到NLTK下载器。</p><p> <img src="http://p6o0wncuf.bkt.clouddn.com/15228511042439.jpg" alt="NLTK下载器"></p><p>默认下载全部的包，新手减少排除的相关的麻烦。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/15228513456509.jpg" alt="安装相关包"></p><h4 id="用NLTK做统计分析"><a href="#用NLTK做统计分析" class="headerlink" title="用NLTK做统计分析"></a>用NLTK做统计分析</h4><p>用<code>NLTK</code>做统计分析一般是从<code>Text</code>对象开始的。<code>Text</code>对象可以通过下面的方法用简单的 <code>Python</code>字符串来创建:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> word_tokenize </span><br><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> Text</span><br><span class="line"></span><br><span class="line">tokens = word_tokenize(<span class="string">"哈哈哈哈哈"</span>)</span><br><span class="line">text = Text(tokens)</span><br></pre></td></tr></table></figure><p><code>word_tokenize</code>函数的参数可以是任何<code>Python</code>字符串。如果你手边没有任何长字符串，但是还想尝试一些功能，在<code>NLTK</code>库里已经内置了几本书，可以用<code>import</code>函数导入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.book <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>统计文本中不重复的单词，然后与总单词数据进行比较:<code>&gt;&gt;&gt; len(text6)/len(words)</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;处理自然语言包括自然语言工具包和数据概括。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之数据清洗|第06天</title>
    <link href="https://chensenlin.cn/posts/48792/"/>
    <id>https://chensenlin.cn/posts/48792/</id>
    <published>2018-04-03T14:20:34.000Z</published>
    <updated>2018-04-23T07:30:54.395Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：数据清洗。</p><a id="more"></a><p>昨天有朋友在微信问我怎么没有更新，昨天回家整理了一些相关的东西，没来得及写文章。今天一个朋友听说我在简书分享，也和我一同加入了简书，很喜欢这样的感觉。之前军哥跟我说过，慢慢尝试去写，然后会有一部分人会被你影响，我发现是真的，真的能够影响到一部分人。闲话少说，开始今天的内容。</p><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><blockquote><p>从本章开始，内容稍微复杂一点，但也不是那么难。</p></blockquote><p>记得之前我在爬去<code>boss</code>网站的招聘信息的时候，抓取的数据并非我们所理想的样式，后面经过处理后，成为一个自己想要的样子，这个过程可以理解为数据清洗。这里的处理是在代码处理的，不是手工完成。</p><h4 id="编写代码清洗数据"><a href="#编写代码清洗数据" class="headerlink" title="编写代码清洗数据"></a>编写代码清洗数据</h4><p>在此之前需要了解一下<code>n-gram</code>模型，它表示文字或语言中的<code>n</code> 个连续的单词组成的序列。在进行自然语言分析时，使用 <code>n-gram</code>或者寻找常用词组，可以很容易地把一句话分解成若干个文字片段。更多详情可以去<a href="https://en.wikipedia.org/wiki/N-gram" target="_blank" rel="noopener">维基</a>查看一下，或者自行搜索。</p><p>下面通过代码将返回维基百科词条<code>“Python programming language”</code>的<code>2-gram</code>列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNgrams</span><span class="params">(content, n)</span>:</span></span><br><span class="line">  content = content.split(<span class="string">' '</span>)</span><br><span class="line">  output = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(content)-n+<span class="number">1</span>):</span><br><span class="line">    output.append(content[i:i+n])</span><br><span class="line">  <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://en.wikipedia.org/wiki/Python_(programming_language)'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">content = bs.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>:<span class="string">'mw-content-text'</span>&#125;).get_text()</span><br><span class="line">ngrams = getNgrams(content, <span class="number">2</span>)</span><br><span class="line">print(ngrams)</span><br><span class="line">print(<span class="string">'2-grams count is: '</span>+str(len(ngrams)))</span><br></pre></td></tr></table></figure><p><code>ngrams</code> 函数把一个待处理的字符串分成单词序列(假设所有单词按照空格分开)，然后增加到 <code>n-gram</code> 模型(本例中是 <code>2-gram</code>)里形成以每个单词开始的二元数组。</p><p>我们得到的数据部分如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[['\nPython\n\n\n\n\nParadigm\nObject-oriented,', 'imperative,'], ['imperative,', 'functional,'], ['functional,', 'procedural,'], ['procedural,', 'reflective\n\n\nDesigned\xa0by\nGuido'],</span><br></pre></td></tr></table></figure><p>显然，是需要处理的。</p><p>首选处理通过正则移除<code>\n</code>，再把 Unicode 字符过滤掉。先把内容中的换行符(或者多个换行符)替换成空格，然后把连续的多个空格替换成一个空格，确保所有单词之间只有一个空格。最后，把内容转换成 <code>UTF-8</code> 格式以消除转义字符。函数初步如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ngrams</span><span class="params">(input, n)</span>:</span></span><br><span class="line">    content = re.sub(<span class="string">'\n+'</span>, <span class="string">" "</span>, content) </span><br><span class="line">    content = re.sub(<span class="string">' +'</span>, <span class="string">" "</span>, content)</span><br><span class="line">    content = bytes(content, <span class="string">"UTF-8"</span>)</span><br><span class="line">    content = content.decode(<span class="string">"ascii"</span>, <span class="string">"ignore"</span>) </span><br><span class="line">    print(content)</span><br><span class="line">    input = input.split(<span class="string">' '</span>)</span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input)-n+<span class="number">1</span>):</span><br><span class="line">        output.append(input[i:i+n])</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p><code>Python</code>获取所有的标点符号：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="built_in">url</span> python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.4</span> (<span class="keyword">default</span>, Mar  <span class="number">1</span> <span class="number">2018</span>, <span class="number">18</span>:<span class="number">36</span>:<span class="number">50</span>)</span><br><span class="line">[GCC <span class="number">4.2</span><span class="number">.1</span> Compatible Apple LLVM <span class="number">9.0</span><span class="number">.0</span> (clang<span class="number">-900.0</span><span class="number">.39</span><span class="number">.2</span>)] <span class="keyword">on</span> darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">import</span> <span class="built_in">string</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">string</span>.punctuation</span><br><span class="line"><span class="string">'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span></span><br></pre></td></tr></table></figure><p>我们还要去除一些维基引用的标记、标点符号等；进一步进行清洗的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen </span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanInput</span><span class="params">(input)</span>:</span></span><br><span class="line">    input = re.sub(<span class="string">'\n+'</span>, <span class="string">" "</span>, input) </span><br><span class="line">    input = re.sub(<span class="string">'\[[0-9]*\]'</span>, <span class="string">""</span>, input) </span><br><span class="line">    input = re.sub(<span class="string">' +'</span>, <span class="string">" "</span>, input)</span><br><span class="line">    input = bytes(input, <span class="string">"UTF-8"</span>)</span><br><span class="line">    input = input.decode(<span class="string">"ascii"</span>, <span class="string">"ignore"</span>) cleanInput = []</span><br><span class="line">    input = input.split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> input:</span><br><span class="line">        item = item.strip(string.punctuation)</span><br><span class="line">        <span class="keyword">if</span> len(item) &gt; <span class="number">1</span> <span class="keyword">or</span> (item.lower() == <span class="string">'a'</span> <span class="keyword">or</span> item.lower() == <span class="string">'i'</span>):</span><br><span class="line">            cleanInput.append(item) <span class="keyword">return</span> cleanInput</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ngrams</span><span class="params">(input, n)</span>:</span></span><br><span class="line">    input = cleanInput(input) </span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input)-n+<span class="number">1</span>):</span><br><span class="line">        output.append(input[i:i+n]) </span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p>这样处理后，我们的结果就稍微好点。</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'Linux'</span>, <span class="symbol">'Foundation'</span>], [<span class="symbol">'Foundation'</span>, <span class="symbol">'Mozilla'</span>], [<span class="symbol">'Mozilla'</span>, <span class="symbol">'Foundation'</span>], [</span><br><span class="line">     <span class="symbol">'Foundation'</span>, <span class="symbol">'Open'</span>], [<span class="symbol">'Open'</span>, <span class="symbol">'Knowledge'</span>], [<span class="symbol">'Knowledge'</span>, <span class="symbol">'Foundation'</span>], [<span class="symbol">'Fou</span></span><br><span class="line">     ndation', <span class="symbol">'Open'</span>], [<span class="symbol">'Open'</span>, <span class="symbol">'Source'</span>]</span><br></pre></td></tr></table></figure><h4 id="数据存储后再清洗"><a href="#数据存储后再清洗" class="headerlink" title="数据存储后再清洗"></a>数据存储后再清洗</h4><p>对于编写代码清洗数据，你能做或想做的事情只有这些。除此之外，你可能还需要处理一些别人创建的数据库，或者要对一个之前没接触过的数据库进行清洗。</p><p>主要额方法有编写脚本或者第三方工具。例如<code>OpenRefine</code>。本小节主要是介绍一下该软件的安装和使用。也可以理解为一个图形化的应用，对于工具类的东西我一直有一个观点：点点点，就会了；何况还是图形化的。所以我不做介绍，看一下官网的三个视频就会了。</p><p>官网地址：<a href="http://openrefine.org/" target="_blank" rel="noopener">http://openrefine.org/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：数据清洗。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之读取文档|第05天</title>
    <link href="https://chensenlin.cn/posts/34041/"/>
    <id>https://chensenlin.cn/posts/34041/</id>
    <published>2018-04-01T13:33:54.000Z</published>
    <updated>2018-04-23T07:30:50.015Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>文档编码和类型的介绍；</p><p>读取CSV、PDF等格式的文件。</p><a id="more"></a><h3 id="读取文档"><a href="#读取文档" class="headerlink" title="读取文档"></a>读取文档</h3><h4 id="文档编码"><a href="#文档编码" class="headerlink" title="文档编码"></a>文档编码</h4><p>文档编码的方式通常可以根据文件的扩展名进行判断，虽然文件扩展名并不是由编码确定的，而是由开发者确定的。从最底层的角度看，所有文档都是由 <code>0</code>和 <code>1</code> 编码而成的。例如我我们将一个后缀为<code>png</code>的图片后缀改为<code>.py</code>。用编辑器打打开就完全不对了。</p><p>只要安装了合适的库， <code>Python</code> 就可以帮你处理任意类型的文档。纯文本文件、视频文件和图像文件的唯一区别，就是它们的 <code>0</code>和<code>1</code> 面向用户的转换方式不同。</p><h4 id="纯文本"><a href="#纯文本" class="headerlink" title="纯文本"></a>纯文本</h4><p>对于纯文本的文件获取的方式很简单，用 <code>urlopen</code> 获取了网页之后，我们会把它转变成 <code>BeautifulSoup</code>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen </span><br><span class="line"></span><br><span class="line">textPage = urlopen(</span><br><span class="line"><span class="string">"http://www.pythonscraping.com/pages/warandpeace/chapter1.txt"</span>) </span><br><span class="line"></span><br><span class="line">print(textPage.read())</span><br></pre></td></tr></table></figure><h4 id="CSV-文件"><a href="#CSV-文件" class="headerlink" title="CSV 文件"></a>CSV 文件</h4><p><code>Python</code>有一个标准库对<code>CSV</code>文件的处理特别的友好，可以处理各类的<code>CSV</code>文件。<a href="https://docs.python.org/3/library/csv.html" target="_blank" rel="noopener">文档地址</a></p><h5 id="读取CSV文件"><a href="#读取CSV文件" class="headerlink" title="读取CSV文件"></a>读取CSV文件</h5><p><code>Python</code> 的<code>csv</code> 库主要是面向本地文件，就是说你的 <code>CSV</code> 文件得存储在你的电脑上。而进行网络数据采集的时候，很多文件都是在线的。有几个参考解决办法：</p><ul><li>手动把CSV文件下载到本机，然后用Python定位文件位置;</li><li>写Python程序下载文件，读取之后再把源文件删除;</li><li>从网上直接把文件读成一个字符串，然后转换成一个StringIO对象，使它具有文件的<br>属性。</li></ul><p>例如获取网上的<code>CSV</code>文件，然后输出命令行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">data = urlopen(<span class="string">"http://pythonscraping.com/files/MontyPythonAlbums.csv"</span>).read().decode(<span class="string">'ASCII'</span>,<span class="string">'ignore'</span>)</span><br><span class="line"></span><br><span class="line">dataFile = StringIO(data)</span><br><span class="line">csvReader = csv.reader(dataFile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> csvReader:</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure><p>输出的结果：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'Name</span>', <span class="symbol">'Year</span>']</span><br><span class="line">[<span class="string">"Monty Python's Flying Circus"</span>, <span class="symbol">'1970</span>']</span><br><span class="line">[<span class="symbol">'Another</span> Monty Python Record', <span class="symbol">'1971</span>']</span><br><span class="line">[<span class="string">"Monty Python's Previous Record"</span>, <span class="symbol">'1972</span>']</span><br><span class="line">[<span class="symbol">'The</span> Monty Python Matching Tie and Handkerchief', <span class="symbol">'1973</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Live at Drury Lane', <span class="symbol">'1974</span>']</span><br><span class="line">[<span class="symbol">'An</span> Album of the Soundtrack of the Trailer of the Film of Monty Python and the Holy Grail', <span class="symbol">'1975</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Live at City Center', <span class="symbol">'1977</span>']</span><br><span class="line">[<span class="symbol">'The</span> Monty Python Instant Record Collection', <span class="symbol">'1977</span>']</span><br><span class="line">[<span class="string">"Monty Python's Life of Brian"</span>, <span class="symbol">'1979</span>']</span><br><span class="line">[<span class="string">"Monty Python's Cotractual Obligation Album"</span>, <span class="symbol">'1980</span>']</span><br><span class="line">[<span class="string">"Monty Python's The Meaning of Life"</span>, <span class="symbol">'1983</span>']</span><br><span class="line">[<span class="symbol">'The</span> Final Rip Off', <span class="symbol">'1987</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Sings', <span class="symbol">'1989</span>']</span><br><span class="line">[<span class="symbol">'The</span> Ultimate Monty Python Rip Off', <span class="symbol">'1994</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Sings Again', <span class="symbol">'2014</span>']</span><br></pre></td></tr></table></figure><h4 id="PDF-文件"><a href="#PDF-文件" class="headerlink" title="PDF 文件"></a>PDF 文件</h4><p><code>PDFMiner3K</code>是一个非常好用的库(是<code>PDFMiner</code>的<code>Python 3.x</code>移植版)。它非常灵活，可以通过命令行使用，也可以整合到代码中。它还可以处理不同的语言编码，而且对网络文件的处理也非常方便。</p><p>下载解压后用<code>python setup.py install</code>完成安装。</p><blockquote><p>模块的源文件下载地址： <a href="https://pypi.python.org/pypi/pdfminer3k" target="_blank" rel="noopener">https://pypi.python.org/pypi/pdfminer3k</a></p></blockquote><p>例如可以把任意 <code>PDF</code> 读成字符串，然后用 <code>StringIO</code>转换成文件对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager, process_pdf</span><br><span class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> TextConverter</span><br><span class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> LAParams</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> open</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readPDF</span><span class="params">(pdfFile)</span>:</span></span><br><span class="line">    rsrcmgr = PDFResourceManager()</span><br><span class="line">    retstr = StringIO()</span><br><span class="line">    laparams = LAParams()</span><br><span class="line">    device = TextConverter(rsrcmgr, retstr, laparams=laparams)</span><br><span class="line">             process_pdf(rsrcmgr, device, pdfFile)</span><br><span class="line">             device.close()</span><br><span class="line">    content = retstr.getvalue() retstr.close()</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line">    </span><br><span class="line">pdfFile = urlopen(<span class="string">"http://pythonscraping.com/pages/warandpeace/chapter1.pdf"</span>)</span><br><span class="line">outputString = readPDF(pdfFile)</span><br><span class="line">print(outputString)</span><br><span class="line">pdfFile.close()</span><br></pre></td></tr></table></figure><p><code>readPDF</code> 函数最大的好处是，如果<code>PDF</code>文件在电脑里，就可以直接把 <code>urlopen</code>返回的对象 <code>pdfFile</code> 替换成普通的 <code>open()</code> 文件对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdfFile = open(<span class="string">"./chapter1.pdf"</span>, <span class="string">'rb'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;文档编码和类型的介绍；&lt;/p&gt;
&lt;p&gt;读取CSV、PDF等格式的文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之存储数据|第04天</title>
    <link href="https://chensenlin.cn/posts/60544/"/>
    <id>https://chensenlin.cn/posts/60544/</id>
    <published>2018-03-31T15:49:04.000Z</published>
    <updated>2018-04-23T07:30:42.608Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>下载文件，存储数据；</p><p>MySQL的基本使用，发送邮件。</p><a id="more"></a><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>网络数据的采集，最本质的东西还是数据，我们爬取的数据是需要存储的。</p><h4 id="媒体文件"><a href="#媒体文件" class="headerlink" title="媒体文件"></a>媒体文件</h4><p>存储媒体文件有两种主要的方式:只获取文件 <code>URL</code> 链接，或者直接把源文件下载下来。</p><p>可以通过媒体文件所在的<code>URL</code> 链接直接引用它。这样做的优点如下:</p><ul><li>爬虫运行得更快，耗费的流量更少，因为只要链接，不需要下载文件;</li><li>可以节省很多存储空间，因为只需要存储<code>URL</code>链接就可以;</li><li>存储<code>URL</code>的代码更容易写，也不需要实现文件下载代码;</li><li>不下载文件能够降低目标主机服务器的负载。</li></ul><p>于此同时还会有一些缺点：</p><ul><li>网站防盗链的问题，会带来很多的麻烦；</li><li>自主性较差，因为文件在别人的服务器上，可支配性差；</li><li>链接可能是会变化的，失效的链接数增加。</li><li>….</li></ul><p>下载文件的方法也很简单，在<code>Python 3.x</code> 版本中,<code>urllib.request.urlretrieve</code>可以根据文件的 <code>URL</code> 下载文件;</p><p>例如我们从<code>http://pythonscraping.com</code> 下载 <code>logo</code>图片，然后在程序运行的文件夹里保存为 <code>logo.jpg</code> 文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">imageLocation = bs.find(<span class="string">'a'</span>, &#123;<span class="string">'id'</span>: <span class="string">'logo'</span>&#125;).find(<span class="string">'img'</span>)[<span class="string">'src'</span>]</span><br><span class="line">urlretrieve (imageLocation, <span class="string">'logo.jpg'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>下载文件需要注意exe的文件，木马文件等。不要在硬盘存储敏感信息，不要用管理员权限运行他。</p></blockquote><h4 id="把数据存储到CSV"><a href="#把数据存储到CSV" class="headerlink" title="把数据存储到CSV"></a>把数据存储到CSV</h4><p><code>CSV</code>(<code>Comma-Separated Values</code>，逗号分隔值)是存储表格数据的常用文件格式。关于<code>CSV</code>格式的文件不做过多的介绍，自行去了解一下。</p><p><code>Python</code>的<code>csv</code>库可以创建或者修改<code>CSV</code>文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv </span><br><span class="line"></span><br><span class="line">csvFile = open(<span class="string">"./demo.csv"</span>,<span class="string">"我+"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    writer = csv.writer(csvFile)</span><br><span class="line">    writer.writerow((<span class="string">'number'</span>, <span class="string">'number plus 2'</span>, <span class="string">'number times 2'</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> rang(<span class="number">10</span>):</span><br><span class="line">        writer.writerow((i,i+<span class="number">2</span>,I*<span class="number">2</span>))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    csvFile.close()</span><br></pre></td></tr></table></figure><blockquote><p>如果文件不存在就会创建demo.csv。</p></blockquote><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p><code>MySQL</code>是目前最受欢迎的开源关系型数据库管理系统。因为它受众广泛，免费，开箱即用，所以它也是网络数据采集项目中常用的数据库。</p><p>我采用的是<code>Mac</code>的平台，可以直接下载安装安装也可以通过包管理器(例如<code>homebrew</code>)安装。</p><blockquote><p>官网下载地址：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/</a></p></blockquote><p>其他的平台可以去官网查看安装详情，作为一个改变世界的程序猿，安装软件应该不是问题。</p><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><p>创建数据库:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> demo;</span><br></pre></td></tr></table></figure><p>使用数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> demo;</span><br></pre></td></tr></table></figure><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span>(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    sex tinyint(<span class="number">1</span>),</span><br><span class="line">    creatime <span class="keyword">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>和数据库不同，<code>MySQL</code> 数据表必须至少有一列，否则不能创建。为了在 <code>MySQL</code> 里定义字段(数据列)，你必须在 <code>CREATE TABLE &lt;tablename&gt;</code> 语句后面，把字段的定义放进一个带括号的、内部由逗号分隔的列表。</p><p>插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">name</span>, sex) <span class="keyword">VALUES</span> (<span class="string">"name"</span>, <span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p>查询数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">LIKE</span> <span class="string">"%chensenlin.cn%"</span></span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELELT FROM user WHERE id = 1</span><br></pre></td></tr></table></figure><p>更新数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'chensenlin'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">66</span></span><br></pre></td></tr></table></figure><blockquote><p>特别强调：更新或者删除一定要加条件！否则就说灾难，哈哈哈</p></blockquote><h5 id="与Python整合"><a href="#与Python整合" class="headerlink" title="与Python整合"></a>与Python整合</h5><p><code>Python</code>没有内置的<code>MySQL</code> 支持工具。不过，有很多开源的库可以用来与 <code>MySQL</code>做交互，<code>Python 2.x</code>和<code>Python 3.x</code>版本都支持。最有名的一个库就是<code>PyMySQL(https://github.com/PyMySQL/PyMySQL)</code>。</p><p>安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> PyMySQL</span><br></pre></td></tr></table></figure><p>基本使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, unix_socket=<span class="string">'/tmp/mysql.sock'</span>,user=<span class="string">'root'</span>, passwd=root, db=<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">"USE demo"</span>)</span><br><span class="line">cur.execute(<span class="string">"SELECT * FROM user WHERE id = 1"</span>) print(cur.fetchone())</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h4><p><code>Python</code>发送一封邮件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line">msg = MIMEText(<span class="string">"邮件正文内容"</span>)</span><br><span class="line">msg[<span class="string">'Subject'</span>] = <span class="string">"这是一个测试有奖主题"</span></span><br><span class="line">msg[<span class="string">'From'</span>] = <span class="string">"fore@gmail.com"</span></span><br><span class="line">msg[<span class="string">'To'</span>] = <span class="string">"hellosenlin@sina.cn"</span></span><br><span class="line">s = smtplib.SMTP(<span class="string">'localhost'</span>)</span><br><span class="line">s.send_message(msg)</span><br><span class="line">s.quit()</span><br></pre></td></tr></table></figure><p>与网页通过<code>HTTP</code>协议传输一样，邮件是通过<code>SMTP</code>(<code>Simple Mail Transfer Protocol</code>，简单邮件传输协议)传输的。而且,和网络服务器的客户端(浏览器)处理那些通过 <code>HTTP</code> 协议传输的网页一样。</p><p>可以将其封装成函数作为发送邮件定时使用等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;下载文件，存储数据；&lt;/p&gt;
&lt;p&gt;MySQL的基本使用，发送邮件。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之使用API|第03天</title>
    <link href="https://chensenlin.cn/posts/37773/"/>
    <id>https://chensenlin.cn/posts/37773/</id>
    <published>2018-03-30T14:12:44.000Z</published>
    <updated>2018-04-23T07:30:46.556Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本节比较简单，有开发经验可以跳过。</p><a id="more"></a><h3 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h3><h4 id="API概述"><a href="#API概述" class="headerlink" title="API概述"></a>API概述</h4><p>百度百科关于<code>API</code>的解释：<code>API</code>（<code>Application Programming Interface</code>,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><p>说明这就是接口，不受其语言的限制都可以调用。</p><h4 id="API通用规则"><a href="#API通用规则" class="headerlink" title="API通用规则"></a>API通用规则</h4><p><code>API</code>用一套非常标准的规则生成数据，而且生成的数据也是按照非常标准的方式组织的。</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>利用<code>HTTP</code>请求网络服务器信息的方法有很多种，这里举例常用的四种：<br><code>GET</code>：从服务器获取数据的方法；<br><code>POST</code>：向服务器发送数据。例如提交表单到服务器处理的逻辑；<br><code>PUT</code>：主要用来更新一个对象或信息，一般很少用到；<br><code>DELETE</code>：从服务器删除一个对象。</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p><code>API</code>并不是随时或者谁都可以调用的。为了保证服务器上的安全或者减少资源等目的，我们会对请求的方法或者次数有限制。通常情况会对接口进行验证，一般的验证方法是令牌（<code>token</code>），这个令牌一般是用户登录或者注册的时候从服务器生成然后给用户。令牌可以是可变的，也可以是不可变的。令牌除了在 <code>URL</code>链接中传递，还会通过请求头里的 <code>cookie</code> 把用户信息传递给服务器。<br>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">token = <span class="string">"&lt;your api key&gt;"</span></span><br><span class="line">webRequest = urllib.request.Request(<span class="string">"http://myapi.com"</span>, headers=&#123;<span class="string">"token"</span>:token&#125;)</span><br><span class="line">html = urlopen(webRequest)</span><br></pre></td></tr></table></figure><h4 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h4><p>服务器响应的数据格式一般是<code>JSON</code>或者<code>XML</code>。目前<code>JSON</code>比较多，原因有很多，其中一点就是<code>JSON</code> 文件比完整的 <code>XML</code> 格式小；加上网络技术的改变，后端的语言越来越多，基本上都可以实现接口。</p><p><code>API</code>调用的语法也有不同，但也有约定俗成的准则。例如，当使用 <code>GET</code>请求获取数据时，用<code>URL</code> 路径描述你要获取的数据范围，查询参数可以作为过滤器或附加请求使用;也有许多 <code>API</code> 会通过文件路径(path)的形式指定 <code>API</code> 版本、数据格式和其他属性；还有一些 <code>API</code>会通过请求参数<code>(request parameter)</code>的形式指定数据格式和 <code>API</code> 版本:</p><p>市面上比较多的公司或者网站都有自己的公开的接口，例如推特，<code>Google</code>等。</p><h4 id="解析JSON数据"><a href="#解析JSON数据" class="headerlink" title="解析JSON数据"></a>解析JSON数据</h4><p>例如我们采用<code>GET</code>的方式请求<code>http://freegeoip.net/json/50.78.253.58</code>,查看返回的数据。返回为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"ip"</span>:<span class="string">"50.78.253.58"</span>,<span class="attr">"country_code"</span>:<span class="string">"US"</span>,<span class="attr">"country_name"</span>:<span class="string">"United States"</span>,<span class="attr">"region_code"</span>:<span class="string">"MA"</span>,<span class="attr">"region_name"</span>:<span class="string">"Massachusetts"</span>,<span class="attr">"city"</span>:<span class="string">"Boston"</span>,<span class="attr">"zip_code"</span>:<span class="string">"02116"</span>,<span class="attr">"time_zone"</span>:<span class="string">"America/New_York"</span>,<span class="attr">"latitude"</span>:<span class="number">42.3496</span>,<span class="attr">"longitude"</span>:<span class="number">-71.0746</span>,<span class="attr">"metro_code"</span>:<span class="number">506</span>&#125;</span><br></pre></td></tr></table></figure><p>现在我们采用<code>Python</code>来解析。<code>JSON</code>是<code>Python</code>的标准库，不需要额外安装。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(ipAddress)</span>:</span></span><br><span class="line">    res = urlopen(<span class="string">"http://freegeoip.net/json/"</span>+ipAddress).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    resJson = json.loads(res)</span><br><span class="line">    <span class="keyword">return</span> resJson.get(<span class="string">'country_code'</span>)</span><br><span class="line"></span><br><span class="line">print(getCountry(<span class="string">"22.18.53.22"</span>))</span><br></pre></td></tr></table></figure><blockquote><p>Python 使用了一种更加灵活的方式，把 JSON 转换成字典，JSON 数组转换成列表,JSON 字符串转换成 Python 字符串。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节比较简单，有开发经验可以跳过。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之创建爬虫|第02天</title>
    <link href="https://chensenlin.cn/posts/38026/"/>
    <id>https://chensenlin.cn/posts/38026/</id>
    <published>2018-03-29T11:43:03.000Z</published>
    <updated>2018-04-23T07:30:37.242Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>单个域名和网站的采集；</p><p>互联网采集和用Scrapy采集初步介绍。 </p><a id="more"></a><h3 id="开始采集"><a href="#开始采集" class="headerlink" title="开始采集"></a>开始采集</h3><p>网络爬虫是可以根据递归方式。为了找到<code>URL</code> 链接，它们必须首先获取网页内容，检查这个页面的内容，再寻找另一个 <code>URL</code>，然后获取 <code>URL</code>对应的网页内容，不断循环这一过程。</p><h4 id="遍历单个域名"><a href="#遍历单个域名" class="headerlink" title="遍历单个域名"></a>遍历单个域名</h4><p>以抓取维基百科的<code>Kevin Baco</code>为例，实现简单的数据爬取。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://en.wikipedia.org/wiki/Kevin_Bacon'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">'a'</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> link.attrs:</span><br><span class="line">        print(link.attrs[<span class="string">'href'</span>])</span><br></pre></td></tr></table></figure><p>上述代码就获取维基百科网站的任何页面并提取页面链接。去掉我们不需要的词条，进行改进获取词条链接。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen </span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://en.wikipedia.org/wiki/Kevin_Bacon'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> bs.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>:<span class="string">'bodyContent'</span>&#125;).find_all(</span><br><span class="line">    <span class="string">'a'</span>, href=re.compile(<span class="string">'^(/wiki/)((?!:).)*$'</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> link.attrs:</span><br><span class="line">        print(link.attrs[<span class="string">'href'</span>])</span><br></pre></td></tr></table></figure><p>如果我们要做到一个函数<code>getLinks</code>，可以用维基百科词条<code>/wiki/&lt;词条名称&gt;</code>形式的<code>URL</code>链接作为参数，然后以同样的形式返回一个列表，里面包含所有的词条 <code>URL</code> 链接。一个主函数，以某个起始词条为参数调用<code>getLinks</code>，再从返回的<code>URL</code>列表里随机选择一个词条链接，再调用 <code>getLinks</code>，直到我们主动停止，或者在新的页面上没有词条链接了，程序才停止运行。<br>完善后代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLinks</span><span class="params">(articleUrl)</span>:</span></span><br><span class="line">    html = urlopen(<span class="string">'http://en.wikipedia.org&#123;&#125;'</span>.format(articleUrl))</span><br><span class="line">    bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="keyword">return</span> bs.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>:<span class="string">'bodyContent'</span>&#125;).find_all(<span class="string">'a'</span>, href=re.compile(<span class="string">'^(/wiki/)((?!:).)*$'</span>))</span><br><span class="line"></span><br><span class="line">links = getLinks(<span class="string">'/wiki/Kevin_Bacon'</span>)</span><br><span class="line"><span class="keyword">while</span> len(links) &gt; <span class="number">0</span>:</span><br><span class="line">    newArticle = links[random.randint(<span class="number">0</span>, len(links)<span class="number">-1</span>)].attrs[<span class="string">'href'</span>]</span><br><span class="line">    print(newArticle)</span><br><span class="line">    links = getLinks(newArticle)</span><br></pre></td></tr></table></figure><h4 id="遍历整个网络"><a href="#遍历整个网络" class="headerlink" title="遍历整个网络"></a>遍历整个网络</h4><p>采集整个网站，那是非常耗费内存资源的过程，尤其是处理大型网站时，最合适的工具就是用一个数据库来储存采集的资源。</p><p>遍历整个网络的数据好处：可以生产网站地图，收集网站数据等。但是一般不会消耗大量的内存资源去做采集，本节的意义不大。</p><h4 id="通过互联网采集"><a href="#通过互联网采集" class="headerlink" title="通过互联网采集"></a>通过互联网采集</h4><p>建立网络地图，需要从一个链接跳转到另一个链接，逐步建立网站的地图信息，从而达到一个合适的网站地图，于此同时我们也不能忽略外链，从一个链接跳转到另一个链接的场景也会时有发生。相比之前的单域名采集，互联网采集的难度要高很多，所以，要求我们的寻找信息的方式和采集信息的方式都应该极具灵活性，以此达到理想的采集效果。</p><p>在做数据采集之前最好能够确定自己采集的内容，明确目标，然后根据目标的展示形式去分析，该网站是否会跳转其他的链接，是否需要继续采集等各个因素。</p><p>如果采集一个网站，有时候也会考虑到网络重定向的问题，例如我的个人博客原来链接是：<code>https://forestfdemo.github.io</code>,但是我做了一个网络的重定向，我将<code>https://chensenlin.cn</code>，重定向到原来的链接，这样无论是访问哪一个链接其本质都跳转到原来的链接，此时需要了解的是网络重定向的时候，我们采集的<code>URL</code>地址会发生变化，在<code>Python3.X</code>的版本中，我们的<code>urllib</code>会帮我完成重定向的功能。</p><h4 id="用Scrapy采集"><a href="#用Scrapy采集" class="headerlink" title="用Scrapy采集"></a>用Scrapy采集</h4><p><code>Scrapy</code>就是一个可以大幅度降低我们对网页链接查找和识别工作复杂度的<code>Python</code> 库，它可以让你轻松地采集一个或多个域名的信息。</p><blockquote><p>目前<code>Scrapy</code>仅支持<code>Python 2.7</code>，还不支持 <code>Python 3.x</code>。</p></blockquote><p>利用<code>Scrapy</code>进行爬虫项目还是有一些设置，我们可以采用<a href="http://scrapy.org/download/" target="_blank" rel="noopener">官网</a>下载，也可以采用<code>pip</code>进行安装，检验安装的方法在之前的<code>Python</code>基础系列的文章有提到过。这里不做过多的阐述。</p><p>创建一个项目：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  python scrapy startproject demourl</span><br><span class="line">New Scrapy project <span class="string">'demourl'</span>, <span class="keyword">using</span> template <span class="built_in">directory</span> <span class="string">'/usr/local/lib/python3.6/site-packages/scrapy/templates/project'</span>, created <span class="keyword">in</span>:</span><br><span class="line">    /Users/demo/Project/python/demourl</span><br><span class="line"></span><br><span class="line">You can <span class="built_in">start</span> your <span class="keyword">first</span> spider <span class="keyword">with</span>:</span><br><span class="line">    cd demourl</span><br><span class="line">    scrapy genspider example example.com</span><br></pre></td></tr></table></figure><p>我们查看一下目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  demourl tree ./</span><br><span class="line">./</span><br><span class="line">├── [drwxr-xr-x]  demourl</span><br><span class="line">│   ├── [-rw-r--r--]  __init__.py</span><br><span class="line">│   ├── [drwxr-xr-x]  __pycache__</span><br><span class="line">│   ├── [-rw-r--r--]  items.py</span><br><span class="line">│   ├── [-rw-r--r--]  middlewares.py</span><br><span class="line">│   ├── [-rw-r--r--]  pipelines.py</span><br><span class="line">│   ├── [-rw-r--r--]  settings.py</span><br><span class="line">│   └── [drwxr-xr-x]  spiders</span><br><span class="line">│       ├── [-rw-r--r--]  __init__.py</span><br><span class="line">│       └── [drwxr-xr-x]  __pycache__</span><br><span class="line">└── [-rw-r--r--]  scrapy.cfg</span><br><span class="line"></span><br><span class="line">4 directories, 7 files</span><br></pre></td></tr></table></figure><p>关于<code>Scrapy</code>的内容我们后续逐一介绍，大家可以点击关注，及时收到后续更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;单个域名和网站的采集；&lt;/p&gt;
&lt;p&gt;互联网采集和用Scrapy采集初步介绍。 &lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之HTML解析|第01天</title>
    <link href="https://chensenlin.cn/posts/40836/"/>
    <id>https://chensenlin.cn/posts/40836/</id>
    <published>2018-03-28T11:12:35.000Z</published>
    <updated>2018-04-23T07:31:43.162Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>BeautifulSoup使用和<code>find()</code>和<code>find_all()</code>；</p><p>正则表达式和<code>BeautifulSoup</code>结合使用；</p><p>Lambda表达式介绍。</p><a id="more"></a><h3 id="复杂的HTML解析"><a href="#复杂的HTML解析" class="headerlink" title="复杂的HTML解析"></a>复杂的HTML解析</h3><h4 id="思考后确定获取目标"><a href="#思考后确定获取目标" class="headerlink" title="思考后确定获取目标"></a>思考后确定获取目标</h4><p>假如我们确定一个我们需要采集的目标信息，可能是一组统计数据、或者一个  <code>title</code>等，但是此时这个目标可能藏的比较深，可能在第20层的标签里面，你可能会用下面的方式去抓取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bsObj.findAll(<span class="string">"table"</span>)[<span class="number">4</span>].findAll(<span class="string">"tr"</span>)[<span class="number">2</span>].find(<span class="string">"td"</span>).findAll(<span class="string">"div"</span>)[<span class="number">1</span>].find(<span class="string">"a"</span>)</span><br></pre></td></tr></table></figure><p>同时还有一个问题，加入网站发生细微的变化。我们的代码不仅影响美观还回影响整个爬虫网络。这样的情况我们应该怎么做呢？</p><p>尝试“打印此页”的链接，或者看看该网页的移动版是够更加友好，请求的时候将请求头设置为移动端的状态。</p><p>寻找隐藏在<code>JavaScript</code>文件里的信息。网站的某些数据可能隐藏在<code>JavaScript</code>文件中。</p><p>可以试试其他的网站资源。</p><h4 id="BeautifulSoup使用"><a href="#BeautifulSoup使用" class="headerlink" title="BeautifulSoup使用"></a>BeautifulSoup使用</h4><p><a href="https://www.jianshu.com/p/9c64aff5d144" target="_blank" rel="noopener">上一篇</a>我们学会了如何安装和运行<code>BeautifulSoup</code>,现在我们逐步深入，学习通过属性查找标签的方法、标签组、标签解析树的导航过程。</p><p>每个网站都有层叠样式表(也就是我们说的<code>CSS</code>)，它对于爬虫而言有一个最大的好处就是能够让<code>HTML</code>元素表现出差异化。</p><p>例如某些标签是下面这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>爬虫可以根据<code>class</code>的属性值去区分不同的标签。例如：我们可以只抓取红色的字。</p><p>下面我们以这个<a href="http://www.pythonscraping.com/pages/warandpeace.html" target="_blank" rel="noopener">网站</a>为例来创建一个网络爬虫。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-b9f09715d532fe82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网站解释说明"></p><p>通过上图可以知道红色的为对话正文部分，绿色为姓名的信息。现在可以创建一个简单的<code>BeautifulSoup</code>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html  = urlopen(<span class="string">" http://www.pythonscraping.com/pages/warandpeace.html"</span>)</span><br><span class="line">bsObj = BeautifulSoup(html,<span class="string">'lxml'</span>) <span class="comment"># 获取了html的所有信息</span></span><br></pre></td></tr></table></figure><p>通过<code>BeautifulSoup</code>对象，我们可以用<code>findAll</code>函数抽取只包含在<code>&lt;span class=&quot;green&quot;&gt;&lt;/ span&gt;</code>标签里的文字，这样就会得到一个人物名称的 <code>Python</code>列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nameList = bsObj.find_all(<span class="string">'span'</span>,&#123;<span class="string">"class"</span>:<span class="string">"green"</span>&#125;) <span class="comment">#获取span标签的class为green的所有姓名</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line"><span class="comment"># 遍历取值</span></span><br><span class="line">    print(name.get_text())</span><br></pre></td></tr></table></figure><p>然后运行得到的就是所有的姓名列表。</p><p><code>get_text()</code>使用场景主要是处理一个包含许多超链接、段落和标 签的大段源代码，它就会吧这些超链接和段落以及标签都清理掉。也就是说它会把你正在处理的 <code>HTML</code>文档中所有的标签都清除，然后返回一个只包含文字的字符串。</p><h5 id="BeautifulSoup的find-和find-all"><a href="#BeautifulSoup的find-和find-all" class="headerlink" title="BeautifulSoup的find()和find_all()"></a>BeautifulSoup的<code>find()</code>和<code>find_all()</code></h5><p><code>BeautifulSoup</code>里的<code>find()</code>和<code>find_all()</code>可能是你最常用的两个函数。借助它们，你可以通过标签的不同属性轻松地过滤<code>HTML</code>页面,查找需要的标签组或单个标签。</p><blockquote><p>BeautifulSoup文档地址：<a href="http://beautifulsoup.readthedocs.io" target="_blank" rel="noopener">http://beautifulsoup.readthedocs.io</a></p></blockquote><p><code>find()</code>函数语法：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find( <span class="name">name</span> , attrs , recursive , string , **kwargs )</span><br></pre></td></tr></table></figure><p><code>find_all()</code>函数语法：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_all( <span class="name">name</span> , attrs , recursive , string , **kwargs )</span><br></pre></td></tr></table></figure><p>搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件。</p><p><code>name</code>参数可以查找所有名字为<code>name</code>的tag,字符串对象会被自动忽略掉。搜索 <code>name</code>参数的值可以使任一类型的过滤器,字符串,正则表达式,列表,方法等。</p><p><code>attrs</code>参数定义一个字典参数来搜索包含特殊属性的<code>tag</code>。</p><p>通过<code>string</code>参数可以搜搜文档中的字符串内容,与<code>name</code>参数的可选值一样。</p><p><code>keywork</code>参数：如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字<code>tag</code>的属性来搜索。</p><p><code>find_all()</code>方法返回全部的搜索结构,如果文档树很大那么搜索会很慢。如果我们不需要全部结果,可以使用 <code>limit</code>参数限制返回结果的数量.效果与<code>SQL</code>中的<code>limit</code>关键字类似,当搜索到的结果数量达到<code>limit</code>的限制时,就停止搜索返回结果。</p><blockquote><p>find 等价于 find_all 的 limit 等于 1 ;</p></blockquote><p>调用<code>tag</code>的 <code>find_all()</code>方法时,<code>Beautiful Soup</code>会检索当前<code>tag</code>的所有子孙节点,如果只想搜索<code>tag</code>的直接子节点,可以使用参数 <code>recursive=False</code>。</p><h5 id="其他BeautifulSoup对象"><a href="#其他BeautifulSoup对象" class="headerlink" title="其他BeautifulSoup对象"></a>其他BeautifulSoup对象</h5><p><code>NavigableString</code>对象：表示标签里面的文字；<br><code>Comment</code>对象：用来查找<code>HTML</code>文档的注释标签。例如：<code>&lt;!-- 注释 --&gt;</code></p><h5 id="导航树"><a href="#导航树" class="headerlink" title="导航树"></a>导航树</h5><p>导航树解决的问题是通过标签在文档中的位置来查找标签。以该<a href="http://www.pythonscraping.com/pages/page3.html" target="_blank" rel="noopener">网站</a>为例。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-b29a53fb1eea642f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="示例网站和源码展示"></p><p>第一类，处理子标签和其他后代标签。</p><p>子标签就是一个父标签的下一级，而后代标签是指一个父标签下面所有级别的标签。所有的子标签都是后代标签，但不是所有的后代标签都是子标签。例如：<br><code>tr</code>标签是<code>tabel</code>标签的子标签，而 <code>tr、th、td、img</code>和 <code>span</code>标签都是 <code>tabel</code> 标签的后代标签。</p><p>一般情况下，<code>BeautifulSoup</code>函数总是处理当前标签的后代标签。</p><p>例如根据示例网站我们需要找到文档中第一个<code>div</code>标签，然后获取这个<code>div</code>后代里面所有的<code>img</code>标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> bs.find(<span class="string">'table'</span>,&#123;<span class="string">'id'</span>:<span class="string">'giftList'</span>&#125;).children:</span><br><span class="line">    print(child)</span><br></pre></td></tr></table></figure><p>输出的结果就是打印 <code>giftList</code> 表格中所有产品的数据行。</p><p>第二类，处理兄弟标签。</p><p><code>BeautifulSoup</code>的<code>next_siblings()</code>函数可以让收集表格数据成为简单的事情，尤其是处理带标题行的表格:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> bs.find(<span class="string">'table'</span>, &#123;<span class="string">'id'</span>:<span class="string">'giftList'</span>&#125;).tr.next_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><p>输出的结果是打印产品列表里的所有行的产品，第一行表格标题除外。</p><p>第三类，父标签处理。</p><p>抓取网页的时候我们抓取父标签的情况比较少，但是不排除有这样的情况存在。例如，我们要观察网页的内容。这里就需要连个两个函数<code>parent</code> 和 <code>parents</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span>  urllib.requesturllib.  <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">print(bs.find(<span class="string">'img'</span>,&#123;<span class="string">'src'</span>:<span class="string">'../img/gifts/img1.jpg'</span>&#125;).parent.previous_sibling.get_text())</span><br></pre></td></tr></table></figure><p>上述代码的结果是<code>img1</code>图片的价格。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-c7d9e1d05807408e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片价格信息"></p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>正则表达式个人认为比较简单，就跟学习英语一样，只要不断的去用就了解了。贴上原图可查阅即可。关于正则的相关基础知识可以看看我推荐的网站了解一下，或者可以关注我，后续专门写一个正则表达式入门的文章。</p><blockquote><p>正则表达式30分钟入门教程：<a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">https://deerchao.net/tutorials/regex/regex.htm</a><br>正则表达式书籍：<a href="https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/" target="_blank" rel="noopener">https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/</a></p></blockquote><p>或者用下面的这张图，然后跟着去套一些例子。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-b304361decaa8763.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="正则表达式常用符号"></p><h4 id="正则表达式和BeautifulSoup"><a href="#正则表达式和BeautifulSoup" class="headerlink" title="正则表达式和BeautifulSoup"></a>正则表达式和BeautifulSoup</h4><p>结合正则表达式，来实现一下具体的例子，可能更容易理解一些。我们获取刚刚<a href="">网站</a>的所有图片，首先打开源码分析一下页面。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-398aedc12f2fbc3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="所有图片路径"></p><p>我们发现所有的图片都是以<code>../img/gifts/img</code>开头，以<code>.jpg</code> 结尾。那么就用正则去匹配一下。匹配规则如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">\.</span><span class="symbol">\.</span><span class="symbol">\/</span>img<span class="symbol">\/</span>gifts/img.*<span class="symbol">\.</span>jpg</span><br></pre></td></tr></table></figure><p>结合<code>BeautifulSoup</code>对象我们可以尝试用代码试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">images = bs.find_all(<span class="string">'img'</span>, &#123;<span class="string">'src'</span>:re.compile(<span class="string">'\.\.\/img\/gifts/img.*\.jpg'</span>)&#125;)</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images: </span><br><span class="line">    print(image[<span class="string">'src'</span>])</span><br></pre></td></tr></table></figure><p>运行的结果：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  url python pareten2.py</span><br><span class="line">../img/gifts/img1.jpg</span><br><span class="line">../img/gifts/img2.jpg</span><br><span class="line">../img/gifts/img3.jpg</span><br><span class="line">../img/gifts/img4.jpg</span><br><span class="line">../img/gifts/img6.jpg</span><br></pre></td></tr></table></figure><p>这就是网站的所有图片的相对路径，以后可以用这样的方法去匹配视频网站的路径，然后下载啦。</p><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><p>在网络数据采集时你经常不需要查找标签的内容，而是需要查找标签属性。比如标签 <code>&lt;a&gt;</code>指向 的 <code>URL</code> 链接包含在 <code>href</code>属性中，或者 <code>&lt;img&gt;</code>标签的图片文件包含在 <code>src</code> 属性中。</p><p>对于一个标签对象，可以用<code>myTag.attrs</code>获取它的全部属性,要注意这行代码返回的是一个 <code>Python</code> 字典对象，可以获取和操作这些属性。例如要获取图片的资源位置 <code>src</code>，可以用<code>myImgTag.attrs[&quot;src&quot;]</code>获取。</p><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><p><code>Lambda</code>表达式本质上是一个函数，可以作为其他函数的变量使用;也就是说，一个函数不是定义成 <code>f(x, y)</code>，而是定义成 <code>f(g(x), y)</code>，或 <code>f(g(x), h(x))</code> 的形式。</p><p><code>BeautifulSoup</code> 允许我们把特定函数类型当作 <code>findAll</code> 函数的参数。唯一的限制条件是这些函数必须把一个标签作为参数且返回结果是布尔类型。<code>BeautifulSoup</code>用这个函数来评估它遇到的每个标签对象，最后把评估结果为“真”的标签保留，把其他标签剔除。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;BeautifulSoup使用和&lt;code&gt;find()&lt;/code&gt;和&lt;code&gt;find_all()&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;正则表达式和&lt;code&gt;BeautifulSoup&lt;/code&gt;结合使用；&lt;/p&gt;
&lt;p&gt;Lambda表达式介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之创建爬虫|第00天</title>
    <link href="https://chensenlin.cn/posts/26519/"/>
    <id>https://chensenlin.cn/posts/26519/</id>
    <published>2018-03-27T09:05:32.000Z</published>
    <updated>2018-04-23T07:30:24.097Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>网络相关知识；</p><p><code>BeautifulSoup</code>介绍和使用。</p><a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>开始本系列的文章时，可能你需要了解一下<code>Python</code>的基础知识，熟悉<code>Python</code>的基本编程，了解一些网络知识等。如果不是特别了解，可以看看我的<code>Python</code>基础系列文章。</p><h3 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h3><h4 id="网络链接"><a href="#网络链接" class="headerlink" title="网络链接"></a>网络链接</h4><p>网络浏览器是一个非常有用的应用，它创建信息的数据包，发送它们，然后把你获取的数据解释成漂亮的图像、声音、视频和文字。但是，网络浏览器就是代码，而代码是可以分解的，可以分解成许多基本组件，可重写、重用，以及做成我们想要的任何东西。网络浏览器可以让服务器发送一些数据，到那些对接无线(或有线)网络接口的应用上， 但是许多语言也都有实现这些功能的库文件。关于浏览器的相关介绍，可以参考维基关于<a href="https://zh.wikipedia.org/wiki/网页浏览器" target="_blank" rel="noopener">浏览器</a>的官方介绍。</p><p><code>Python</code>实现抓取网页。新建文件为<code>urllib_request.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找 Python 的 request 模块(在 urllib 库里面)，并导入 urlopen 函数</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">html = urlopen(<span class="string">"http://www.baidu.cn"</span>)</span><br><span class="line">print(html.read())</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python urllib_request.py</span><br></pre></td></tr></table></figure><p>在进行数据抓取时需要保证能够与该网页的连通性，可以尝试用<code>ping</code>的方式进行测试。这里我采用的是抓取百度的首页数据。返回的是百度首页的全部<code>HTML</code>代码。</p><p><code>urllib</code> 是<code>Python</code>的标准库，包含了从网络请求数据，处理<code>cookie</code>，甚至改变像请求头和用户代理这些元数据的函数。<code>urlopen</code>用来打开并读取一个从网络获取的远程对象。<code>urlib</code>的<a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener">文档地址</a>。</p><blockquote><p>标准库：不用额外安装的库就可以直接运行。</p></blockquote><h4 id="BeautifulSoup简介"><a href="#BeautifulSoup简介" class="headerlink" title="BeautifulSoup简介"></a>BeautifulSoup简介</h4><p><code>BeautifulSoup</code>通过定位<code>HTML</code>标签来格式化和组织复杂的网络信息，用简单易用的<code>Python</code>对象为我们展现<code>XML</code>结构信息。</p><h5 id="安装BeautifulSoup"><a href="#安装BeautifulSoup" class="headerlink" title="安装BeautifulSoup"></a>安装BeautifulSoup</h5><p><code>BeautifulSoup</code>并不是标准库，所以需要通过安装后来使用。本人采用<code>Mac</code>的系统，同时已经安装了<code>pip</code>，所以直接可以采用<code>pip</code>来安装即可，不过需要注意版本问题。</p><p><code>Mac</code>安装<code>BeautifulSoup</code>方法：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> beautifulsoup4</span><br></pre></td></tr></table></figure><p>如果没有报错可以验证一下是否安装成功。验证的方式有很多。这里我举例两种最常用的验证方式。</p><p>第一种验证方式：终端直接查看包是否存在。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze | grep beautifulsoup4</span><br></pre></td></tr></table></figure><p>如果输出：<code>beautifulsoup4==4.6.0</code>,表示已经有了，只不过版本可能会不一致，但是模块名是一致的。</p><p>第二种验证方式：进入<code>python</code>界面，然后倒入某一个函数看看是否报错，或者直接写代码执行一下。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  day0 python</span><br><span class="line">Python 3.6.4 (default, Mar  1 2018, 18:36:50)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">from</span> bs4 import BeautifulSoup</span><br><span class="line">&gt;&gt;&gt; exit();</span><br></pre></td></tr></table></figure><p>综上所述，两种验证方式都通过了，说明现在已经安装完成且可以使用了。</p><blockquote><p>这里的安装是全局安装，如果在实际开发中不同的项目可能会有不同的环境或者版本要求，甚至会产生冲突，现在就就需要的能够支持多种的环境的需求，可以用虚拟环境保存库文件。安装一个<code>Python</code>虚拟环境来分而治之。具体的使用方法这里不做过多阐述，后续会有对应的更新，你可以关注我就可以收到更新提示。</p></blockquote><h5 id="运行BeautifulSoup"><a href="#运行BeautifulSoup" class="headerlink" title="运行BeautifulSoup"></a>运行BeautifulSoup</h5><p>结合之前抓取百度首页的代码，现在针对某网站的某文件进行抓取。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>) </span><br><span class="line">bsObj = BeautifulSoup(html.read(),<span class="string">'lxml'</span>)</span><br><span class="line">print(bsObj.h1)</span><br></pre></td></tr></table></figure><p>运行后就得到了该网页的标题。如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  day0 <span class="keyword">python</span> request.<span class="keyword">py</span></span><br><span class="line"><span class="symbol">&lt;h1&gt;</span>An Interesting Title&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>这就是根据网页的源码得到了该网页的标题。未来可以通过正则等方式获取。</p><h5 id="可靠的网络连接"><a href="#可靠的网络连接" class="headerlink" title="可靠的网络连接"></a>可靠的网络连接</h5><p>数据采集的问题在于保证程序与目标网站的服务器一直保持通信，否则的话爬虫就不会继续工作了。这个时候就需要进行网络异常处理。</p><p>例如我们上一节的代码中有下面一行代码：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">html</span> = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>)</span><br></pre></td></tr></table></figure><p>这里面会出现两个问题，服务器不存在或者这个页面不存在。也就是要么<code>404</code>,要么<code>500</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    html = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>)</span><br><span class="line"><span class="keyword">except</span> HTTPError <span class="keyword">as</span> e: </span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 返回空值，中断程序，或者执行另一个方案 </span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 程序继续。注意:如果你已经在上面异常捕捉那一段代码里返回或中断(break)， </span></span><br><span class="line">    <span class="comment"># 那么就不需要使用else语句了，这段代码也不会执行</span></span><br></pre></td></tr></table></figure><p>也有可能获取的时候，该html页面就是一个空的，是不是又需要增加判断呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> html <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">"URL is not found"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 程序继续</span></span><br></pre></td></tr></table></figure><p>获取到了内容，是不是需要继续判断一下该内容是否为我们所需要的内容呢？所以需要增加一个检查标签是否存在判断。</p><p>最后我们的判断是不是看起来代码特别的累赘，我们简单整理一下后，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getTitle</span><span class="params">(url)</span>:</span> </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            html = urlopen(url) </span><br><span class="line">        <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span> </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bsObj = BeautifulSoup(html.read())</span><br><span class="line">            title = bsObj.body.h1 </span><br><span class="line">        <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> title</span><br><span class="line">    </span><br><span class="line">title = getTitle(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>) </span><br><span class="line"><span class="keyword">if</span> title == <span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">"Title could not be found"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(title)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;网络相关知识；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BeautifulSoup&lt;/code&gt;介绍和使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python常用函数整理</title>
    <link href="https://chensenlin.cn/posts/26518/"/>
    <id>https://chensenlin.cn/posts/26518/</id>
    <published>2018-03-27T03:32:52.000Z</published>
    <updated>2018-04-20T08:46:48.103Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>字符串函数、集合函数、列表函数和字典函数。</p><a id="more"></a><h3 id="Python常用函数"><a href="#Python常用函数" class="headerlink" title="Python常用函数"></a>Python常用函数</h3><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>capitalize()</td><td>返回首字母的大写副本</td></tr><tr><td>find(string)</td><td>返回字符串中首次出现参数string的索引，如果字符串中没有参数string则返回-1</td></tr><tr><td>find(s,beg)</td><td>返回字符串中索引beg之后首次出现参数s的索引，如果字符串中索引beg之后没有参数s则返回-1</td></tr><tr><td>find(s,beg,end)</td><td>返回字符串中索引beg与end之间首次出现参数s的索引，如果字符串中索引beg和end之间没有参数s则返回-1</td></tr><tr><td>islower()</td><td>测试所有字符是否均为小写形式</td></tr><tr><td>isupper()</td><td>测试所有字符是否均为大写形式</td></tr><tr><td>lower()</td><td>将所有字符穿华为小写形式并返回</td></tr><tr><td>replace(old,new)</td><td>将字符串中所有子串old替换为new并返回</td></tr><tr><td>split()</td><td>将空格分隔的单词以列表的形式返回</td></tr><tr><td>split(del)</td><td>将del分隔的子串以列表的形式返回</td></tr><tr><td>strip()</td><td>删除字符串两端的空白符并返回</td></tr><tr><td>strip(string)</td><td>删除字符串中的string并返回</td></tr><tr><td>upper()</td><td>将所有字符串转化为大写形式并返回</td></tr></tbody></table><h4 id="列表函数"><a href="#列表函数" class="headerlink" title="列表函数"></a>列表函数</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>len(L)</td><td>返回列表L中的元素数量</td></tr><tr><td>max(L)</td><td>返回列表L中的最大值</td></tr><tr><td>min(L)</td><td>返回列表L中的最小值</td></tr><tr><td>sum(L)</td><td>返回列表L中所有元素的和</td></tr></tbody></table><h4 id="集合函数"><a href="#集合函数" class="headerlink" title="集合函数"></a>集合函数</h4><table><thead><tr><th>方法</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>add</td><td></td><td>往集合中添加一个元素</td></tr><tr><td>clear</td><td></td><td>移除集合中的所有元素</td></tr><tr><td>difference</td><td>-</td><td>根据一个集合中不存在于另一个集合中的元素，创建中一个新的集合</td></tr><tr><td>intersection</td><td>&amp;</td><td>根据两个集合中共有的元素，创建出一个新的集合</td></tr><tr><td>issubset</td><td>&lt;=</td><td>判断一个集合的所有元素是否都包含于另一个集合</td></tr><tr><td>issuperset</td><td>&gt;=</td><td>判断一个集合是否包含了另一个集合中的所有元素</td></tr><tr><td>remove</td><td></td><td>移除集合中的一个元素</td></tr><tr><td>symmetric_difference</td><td>^</td><td>根据两个集合中所有不存在于对方的元素，创建出一个新的集合</td></tr><tr><td>union</td><td></td><td>根据两个集合中所有的元素，创建出一个新的集合</td></tr></tbody></table><h4 id="字典函数"><a href="#字典函数" class="headerlink" title="字典函数"></a>字典函数</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>clear</td><td>清空字典内容</td></tr><tr><td>get</td><td>返回关键字所关联的值，如果指定键不存在，则返回默认值</td></tr><tr><td>keys</td><td>以列表的形式返回字典中的所有键。所得列表中的每个条目肯定是唯一的</td></tr><tr><td>items</td><td>返回（key,value）列表</td></tr><tr><td>values</td><td>以列表的形式返回字典中的所有值。所得列表中的每个条目不一定是唯一的</td></tr><tr><td>update</td><td>用另一个字典的内容对当前字典进行更新</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;字符串函数、集合函数、列表函数和字典函数。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python从入门到实践" scheme="https://chensenlin.cn/tags/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习09天</title>
    <link href="https://chensenlin.cn/posts/1508/"/>
    <id>https://chensenlin.cn/posts/1508/</id>
    <published>2018-03-24T13:45:21.000Z</published>
    <updated>2018-04-20T08:46:44.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>文件处理相关，读取文件和写入文件等。</p><p>异常处理和捕获异常。</p><a id="more"></a><h3 id="文件和异常处理"><a href="#文件和异常处理" class="headerlink" title="文件和异常处理"></a>文件和异常处理</h3><h4 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h4><p>要使用文本文件中的信息，首先需要将信息读取到内存中。为此，我们可以一次性读取文件的 全部内容，也可以以每次一行的方式逐步读取。</p><h5 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h5><p>要读取文件，需要一个包含几行文本的文件。新建一个圆周率后30位的文件为例，保存为<code>pi_digits.txt</code>，同时小数点后是为换行。如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.<span class="number">1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure><p>读取该文件的<code>Python</code>文件，<code>file_reader.py</code>。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_digits.txt'</span>) <span class="keyword">as</span> file_object: </span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(rstrip(contents))</span><br></pre></td></tr></table></figure><p><code>open()</code>函数是任何方式使用文件，哪怕仅仅是打印其内容，都得先打开文件。它接受一个参数: 要打开的文件的名称。<code>Python</code>在当前执行的文件所在的目录中查找指定的文件。</p><blockquote><p>close()函数是关闭文件。</p></blockquote><p>关键字<code>with</code>在不再需要访问文件后将其关闭。<code>Python</code>方法<code>rstrip()</code>删除字符串末尾的空白。</p><p>运行结果：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.<span class="number">1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure><h5 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h5><p>当你将类似<code>pi_digits.txt</code>这样的简单文件名传递给函数<code>open()</code>时，<code>Python</code>将在当前执行的文件 (即<code>.py</code>程序文件)所在的目录中查找文件。</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure><p>通过使用绝对路径，可读取系统任何地方的文件。注意区分相对路径和绝对路径。</p><h5 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h5><p>读取文件时，常常需要检查其中的每一行:你可能要在文件中查找特定的信息，或者要以 某种方式修改文件中的文本。逐行读取可以理解为遍历、循环等逻辑。所以在读取文件时，可以采用<code>for</code>语句来实现。代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object: </span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure><h5 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h5><p>使用关键字<code>with</code>时，<code>open()</code>返回的文件对象只在<code>with</code>代码块内可用。如果要在<code>with</code>代码块外 访问文件的内容，可在<code>with</code>代码块内将文件的各行存储在一个列表中，并在<code>with</code>代码块外使用该列表:你可以立即处理文件的各个部分，也可推迟到程序后面再处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object: </span><br><span class="line">    lines = file_object.readlines()<span class="comment">#从文件中读取每一行，并将其存储在一个列表中</span></span><br><span class="line"><span class="comment">#使用一个简单 的for循环来打印lines中的各行</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure><h5 id="使用文件的内容"><a href="#使用文件的内容" class="headerlink" title="使用文件的内容"></a>使用文件的内容</h5><p>将文件读取到内存中后，就可以以任何方式使用这些数据了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object: </span><br><span class="line">    lines = file_object.readlines()<span class="comment">#从文件中读取每一行，并将其存储在一个列表中</span></span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span>       <span class="comment">#创建一个变量存贮圆周率的值</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:   <span class="comment">#使用一个循环将各行都加入pi_string，并删除每行末尾的换行符</span></span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">print(pi_string)     <span class="comment">#打印这个字符串</span></span><br><span class="line">print(len(pi_string)) <span class="comment"># 长度</span></span><br></pre></td></tr></table></figure><blockquote><p>读取文本文件时，Python将其中的所有文本都解读为字符串。如果你读取的是数字，并 要将其作为数值使用，就必须使用函数int()将其转换为整数，或使用函数float()将其转 换为浮点数。</p></blockquote><h5 id="包含一百万位的大型文件"><a href="#包含一百万位的大型文件" class="headerlink" title="包含一百万位的大型文件"></a>包含一百万位的大型文件</h5><p>对于你可处理的数据量，<code>Python</code>没有任何限制;只要系统的内存足够多，想处理多少数据都可以。</p><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><p>保存数据的最简单的方式之一是将其写入到文件中。通过将输出写入文件，即便关闭包含程序输出的终端窗口，这些输出也依然存在:可以在程序结束运行后查看这些输出，可与别人分享输出文件，还可编写程序来将这些输出读取到内存中并进行处理。</p><h5 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h5><p>要将文本写入文件，你在调用<code>open()</code>时需要提供另一个实参，告诉<code>Python</code>你要写入打开的文件。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming."</span>)</span><br></pre></td></tr></table></figure><p>打开文件时，可指定读取模 式<code>(&#39;r&#39;)</code>、写入模式<code>(&#39;w&#39;)</code>、附加模式<code>(&#39;a&#39;)</code>或让你能够读取和写入文件的模式<code>(&#39;r+&#39;)</code>。如果 你省略了模式实参，<code>Python</code>将以默认的只读模式打开文件。</p><blockquote><p>以写入(‘w’)模式打开文件时,如果指定的文件已经存在，Python将在返回文件对象前清空该文件。</p></blockquote><p><code>Python</code>只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数<code>str()</code>将其转换为字符串格式。</p><h5 id="写入多行"><a href="#写入多行" class="headerlink" title="写入多行"></a>写入多行</h5><p>函数<code>write()</code>不会在你写入的文本末尾添加换行符,如果需要写入多行就需要在每行的后面添加换行符：<code>\n</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming."</span>)</span><br><span class="line">    file_object.write(<span class="string">"I love Python."</span>)</span><br></pre></td></tr></table></figure><p>输入结果：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">I</span> love programming.<span class="literal">I</span> love Python.</span><br></pre></td></tr></table></figure><h5 id="附加到文件"><a href="#附加到文件" class="headerlink" title="附加到文件"></a>附加到文件</h5><p>附加到文件可以理解为不清空当前的文件内容，在文件内容后面追加即可。如果以附加的形式打开，如果文件不存在就会被创建。具体实现只需要在使用<code>open()</code>函数的时候指定打开方式为<code>a</code>即可，其余类似。</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p><code>Python</code>使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生让<code>Python</code>不知 所措的错误时，它都会创建一个异常对象。</p><p>异常是使用<code>try-except</code>代码块处理的。<code>try-except</code>代码块让<code>Python</code>执行指定的操作，同时告诉<code>Python</code>发生异常时怎么办。使用了<code>try-except</code>代码块时，即便出现异常，程序也将继续运行: 显示你编写的友好的错误消息，而不是令用户迷惑的<code>traceback</code>。</p><h5 id="处理ZeroDivisionError异常"><a href="#处理ZeroDivisionError异常" class="headerlink" title="处理ZeroDivisionError异常"></a>处理<code>ZeroDivisionError</code>异常</h5><p>例如我们让<code>Python</code>运行<code>8/0</code>的代码报错信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span>/<span class="number">0</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>此时程序停止运行。</p><h5 id="使用try-except代码块"><a href="#使用try-except代码块" class="headerlink" title="使用try-except代码块"></a>使用<code>try-except</code>代码块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     print(<span class="number">7</span>/<span class="number">0</span>) </span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br><span class="line">    <span class="comment"># 其他的代码块将继续运行</span></span><br></pre></td></tr></table></figure><h5 id="使用异常避免崩溃"><a href="#使用异常避免崩溃" class="headerlink" title="使用异常避免崩溃"></a>使用异常避免崩溃</h5><p>发生错误时，如果程序还有工作没有完成，妥善地处理错误就尤其重要。这种情况经常会出 现在要求用户提供输入的程序中;如果程序能够妥善地处理无效输入，就能再提示用户提供有效输入，而不至于崩溃。</p><h5 id="else代码块"><a href="#else代码块" class="headerlink" title="else代码块"></a><code>else</code>代码块</h5><p><code>try-except-else</code>代码块的工作原理:<code>Python</code>尝试执行<code>try</code>代码块中的代码;只有可 能引发异常的代码才需要放在<code>try</code>语句中。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    answer = int(first_number) / int(second_number)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError: </span><br><span class="line">    print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    print(answer)</span><br></pre></td></tr></table></figure><h5 id="处理FileNotFoundError异常"><a href="#处理FileNotFoundError异常" class="headerlink" title="处理FileNotFoundError异常"></a>处理<code>FileNotFoundError</code>异常</h5><p>产生的背景：要查找的文件可能在其他地方、文件名可能 不正确或者这个文件根本就不存在。机会产生<code>FileNotFoundError</code>异常。同理可以给用户一个友好的消息提示。</p><h5 id="拆分字符串"><a href="#拆分字符串" class="headerlink" title="拆分字符串"></a>拆分字符串</h5><p>方法<code>split()</code>以空格为分隔符将字符串分拆成多个部分，并将这些部分都存储到一个列表中。</p><p>代码示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; title = <span class="string">"Alice in Wonderland"</span> </span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; title.split()</span><br><span class="line">[<span class="string">'Alice'</span>, <span class="string">'in'</span>, <span class="string">'Wonderland'</span>]</span><br></pre></td></tr></table></figure><h5 id="使用多个文件"><a href="#使用多个文件" class="headerlink" title="使用多个文件"></a>使用多个文件</h5><p>使用多个文件和单个文件逻辑一致，只不过把逻辑处理部分封装为方法，多个文件就循环处理即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment">#计算一个文件大致包含多少个单词</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            contents = f_obj.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        msg = <span class="string">"Sorry, the file "</span> + filename + <span class="string">" does not exist."</span></span><br><span class="line">        print(msg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 计算文件大致包含多少个单词</span></span><br><span class="line">        words = contents.split()</span><br><span class="line">        num_words = len(words)</span><br><span class="line">        print(<span class="string">"The file "</span> + filename + <span class="string">" has about "</span> + str(num_words) +</span><br><span class="line"><span class="string">" words."</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'alice.txt'</span> </span><br><span class="line">count_words(filename)</span><br></pre></td></tr></table></figure><h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><p>模块<code>json</code>让你能够将简单的<code>Python</code>数据结构转储到文件中，并在程序再次运行时加载该文件 中的数据。你还可以使用<code>json</code>在<code>Python</code>程序之间分享数据。更重要的是，<code>JSON</code>数据格式并非<code>Python</code>专用的，这让你能够将以<code>JSON</code>格式存储的数据与使用其他编程语言的人分享。</p><h5 id="使用json-dump-和json-load"><a href="#使用json-dump-和json-load" class="headerlink" title="使用json.dump()和json.load()"></a>使用<code>json.dump()</code>和<code>json.load()</code></h5><p>函数<code>json.dump()</code>接受两个实参:要存储的数据以及可用于存储数据的文件对象。</p><p>编写一个存储一组数字的简短程序，再编写一个将这些数字读取到内存中的程序 (<code>json.load()</code>)。</p><p>代码示例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line"><span class="built_in">num</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'num.json'</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(<span class="built_in">num</span>,f_obj)<span class="comment">#写入文件</span></span><br><span class="line">    <span class="built_in">num</span> = json.<span class="built_in">load</span>(f_obj) <span class="comment">#读到内存，可以打印</span></span><br><span class="line">    </span><br><span class="line">print(<span class="built_in">num</span>)</span><br></pre></td></tr></table></figure><p>运行后文件的内容和打印的内容一致。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h5 id="保存和读取用户生成的数据"><a href="#保存和读取用户生成的数据" class="headerlink" title="保存和读取用户生成的数据"></a>保存和读取用户生成的数据</h5><p>用户输入的信息我们可以通过写入文件的方式写在文件内，再次输入的时候可以打开文件查询判断是否存在。其实就是把写入和读取文件两个逻辑合成一个。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'username.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What is your name? "</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;文件处理相关，读取文件和写入文件等。&lt;/p&gt;
&lt;p&gt;异常处理和捕获异常。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python从入门到实践" scheme="https://chensenlin.cn/tags/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
</feed>
