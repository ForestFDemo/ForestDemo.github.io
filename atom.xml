<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DemoChen</title>
  
  <subtitle>你好，我是森林</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chensenlin.cn/"/>
  <updated>2018-03-16T08:54:10.585Z</updated>
  <id>https://chensenlin.cn/</id>
  
  <author>
    <name>DemoChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习03天</title>
    <link href="https://chensenlin.cn/posts/56807/"/>
    <id>https://chensenlin.cn/posts/56807/</id>
    <published>2018-03-16T07:14:43.000Z</published>
    <updated>2018-03-16T08:54:10.585Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用列表"><a href="#使用列表" class="headerlink" title="使用列表"></a>使用列表</h4><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数<code>range()</code>一样，<code>Python</code> 在到达你指定的第二个索引前面的元素后停止。要输出列表中的前三个元素，需要指定索引<code>0~3</code>， 这将输出分别为<code>0</code>、<code>1</code>和<code>2</code>的元素。</p><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"><span class="built_in">print</span>(players[0:3]) <span class="comment"># 取从索引0开始到第三个结束，最后输出前三个</span></span><br><span class="line"><span class="built_in">print</span>(players[0:3]) <span class="comment"># 输出从索引1到4结束，</span></span><br><span class="line"><span class="built_in">print</span>(players[:4])  <span class="comment"># 没有索引就从列表开头开始，到指定的索引值结束</span></span><br><span class="line"><span class="built_in">print</span>(players[2:]) <span class="comment"># 没有结束索引就知道最后结束</span></span><br><span class="line"><span class="built_in">print</span>(players[-3:]) <span class="comment"># 倒数第三个</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'charles</span>', <span class="symbol">'martina</span>', <span class="symbol">'michael</span>']</span><br><span class="line">[<span class="symbol">'charles</span>', <span class="symbol">'martina</span>', <span class="symbol">'michael</span>']</span><br><span class="line">[<span class="symbol">'charles</span>', <span class="symbol">'martina</span>', <span class="symbol">'michael</span>', <span class="symbol">'florence</span>']</span><br><span class="line">[<span class="symbol">'michael</span>', <span class="symbol">'florence</span>', <span class="symbol">'eli</span>']</span><br><span class="line">[<span class="symbol">'michael</span>', <span class="symbol">'florence</span>', <span class="symbol">'eli</span>']</span><br></pre></td></tr></table></figure><h5 id="遍历切片"><a href="#遍历切片" class="headerlink" title="遍历切片"></a>遍历切片</h5><p>前面我们遍历列表的时候采用<code>for</code>语句来实现的，同理，切片同样可以采用<code>for</code>语句来实现。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"Here are the first three players on my team:"</span>)</span></span></span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:</span><br><span class="line">    print(player.title())</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Here are <span class="keyword">the</span> <span class="keyword">first</span> <span class="literal">three</span> players <span class="keyword">on</span> <span class="title">my</span> <span class="title">team</span>:</span><br><span class="line">Charles</span><br><span class="line">Martina</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure><h5 id="复制切片"><a href="#复制切片" class="headerlink" title="复制切片"></a>复制切片</h5><p>要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引<code>([:])</code>。 这让<code>Python</code>创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表。复制的过程中可以进行赋值或者修改操作。例如新增一个元素。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods[:]</span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"My favorite foods are:"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(my_foods)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"\nMy friend's favorite foods are:"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(friend_foods)</span></span></span><br></pre></td></tr></table></figure><p>代码结果:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">My</span> favorite foods are:</span><br><span class="line">[<span class="symbol">'pizza'</span>, <span class="symbol">'falafel'</span>, <span class="symbol">'carrot</span> cake', <span class="symbol">'cannoli'</span>]</span><br><span class="line"></span><br><span class="line"><span class="type">My</span> friend's favorite foods are:</span><br><span class="line">[<span class="symbol">'pizza'</span>, <span class="symbol">'falafel'</span>, <span class="symbol">'carrot</span> cake', <span class="symbol">'ice</span> cream']</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><h5 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h5><p>列表是可以修改的，主要适合存储程序在运行期间可能会变化的数据。如果需要创建不可修改的值就需要用元组，所以元组可以理解为:不可被修改的列表。但是元组采用的是方括号来标识。和列表同理，均可采用索引来访问元素。</p><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change_list = (<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>) <span class="comment">#定义一个元组 </span></span><br><span class="line"><span class="built_in">print</span>(change_list[0]) <span class="comment">#取元组索引为0 的值</span></span><br><span class="line">change_list[1] = <span class="string">'hello'</span> <span class="comment">#修改元组中索引为1的值 会被报错，因为元组不可以被修改。</span></span><br></pre></td></tr></table></figure><h5 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h5><p>遍历元组和遍历列表一样，采用<code>for</code> 来实现。</p><p>代码如下:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change_list = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">number</span> in change_lis<span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">number</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h5 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h5><p>修改元组的变量不等于修改元组的元素，也就是给存储元组的变量赋值。</p><p>代码示例:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">change_list = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">number</span> in change_lis<span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">number</span>)</span><br><span class="line">    </span><br><span class="line">change_list = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">444</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">number</span> in change_lis<span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">number</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">444</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用列表&quot;&gt;&lt;a href=&quot;#使用列表&quot; class=&quot;headerlink&quot; title=&quot;使用列表&quot;&gt;&lt;/a&gt;使用列表&lt;/h4&gt;&lt;h5 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h
      
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python学习02天</title>
    <link href="https://chensenlin.cn/posts/3226/"/>
    <id>https://chensenlin.cn/posts/3226/</id>
    <published>2018-03-15T02:04:23.000Z</published>
    <updated>2018-03-16T08:54:12.451Z</updated>
    
    <content type="html"><![CDATA[<h4 id="通过循环的方式遍历列表"><a href="#通过循环的方式遍历列表" class="headerlink" title="通过循环的方式遍历列表"></a>通过循环的方式遍历列表</h4><p>通常情况下，我们需要对列表的所有元素进行操作，这个时候就需要遍历整个列表。循环采用<code>for</code>。</p><p>语法:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> change_name <span class="keyword">in</span> list_name:  </span><br><span class="line">    <span class="builtin-name">print</span>(change_name)</span><br></pre></td></tr></table></figure><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">alice</span></span><br><span class="line"><span class="attribute">david</span></span><br><span class="line"><span class="attribute">carolina</span></span><br></pre></td></tr></table></figure><p>循环的含义其实是将列表的值逐一取出，然后进行其他操作。例如拼接、赋值、运算等。</p><p>代码示例:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician.<span class="built_in">upper</span>() + <span class="string">", that was a great trick!"</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALICE, that was <span class="selector-tag">a</span> great trick!</span><br><span class="line">DAVID, that was <span class="selector-tag">a</span> great trick!</span><br><span class="line">CAROLINA, that was <span class="selector-tag">a</span> great trick!</span><br></pre></td></tr></table></figure><p>注意事项:</p><ol><li><code>python</code>中语法需要注意的主要是忘记<strong>缩进</strong>和不必要的缩进;</li><li>列表后面的<code>:</code>不能遗漏; </li><li>对于位于<code>for</code>语句后面且属于循环组成部分的代码行，一定要缩进。</li></ol><p>例如:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magiciand <span class="keyword">in</span> magicians:</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(magiciand)</span></span></span><br></pre></td></tr></table></figure><p>错误提示:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">File</span> <span class="string">"for.py"</span>, <span class="keyword">line</span> 3</span><br><span class="line">    <span class="keyword">print</span>(magiciand)</span><br><span class="line">        ^</span><br><span class="line">IndentationError: expected <span class="keyword">an</span> indented block</span><br></pre></td></tr></table></figure><h4 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h4><h5 id="range-函数认识"><a href="#range-函数认识" class="headerlink" title="range()函数认识"></a><code>range()</code>函数认识</h5><p><code>range()</code>函数产生指定范围的随机值。</p><p>代码示例:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for <span class="keyword">value</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">value</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  day2 python range.py</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>需要注意的是这是函数的使用，可以理解为<code>[1,7)</code>;</p><h5 id="range-函数创建数字列表"><a href="#range-函数创建数字列表" class="headerlink" title="range()函数创建数字列表"></a><code>range()</code>函数创建数字列表</h5><p>要创建数字列表，可使用函数<code>list()</code>将<code>range()</code>的结果直接转换为列表。如果将<code>range()</code>作为<code>list()</code>的参数，输出将为一个数字列表。同时还可以指定步长。</p><p>代码示例:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">range_num = <span class="type">list</span>(range(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line">print(range_num)</span><br><span class="line">range_num_two = <span class="type">list</span>(range(<span class="number">1</span>,<span class="number">20</span>,<span class="number">2</span>))#指定步长</span><br><span class="line">print(range_num_two)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><h5 id="统计数字列表的值"><a href="#统计数字列表的值" class="headerlink" title="统计数字列表的值"></a>统计数字列表的值</h5><p><code>min()</code> :找出列表的最小值;<br><code>max()</code> :找出列表的最大值;<br><code>sum()</code> :求和;</p><p>代码示例:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">print(min(<span class="type">list</span>))</span><br><span class="line">print(max(<span class="type">list</span>))</span><br><span class="line">print(sum(<span class="type">list</span>))</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure><h5 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h5><p>代码示例:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [<span class="keyword">value</span>**<span class="number">2</span> for <span class="keyword">value</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><p>要使用这种语法，首先指定一个描述性的列表名，如<code>squares</code>;然后，指定一个左方括号， 并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为<code>value**2</code>，它计 算平方值。接下来，编写一个<code>for</code>循环，用于给表达式提供值，再加上右方括号。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;通过循环的方式遍历列表&quot;&gt;&lt;a href=&quot;#通过循环的方式遍历列表&quot; class=&quot;headerlink&quot; title=&quot;通过循环的方式遍历列表&quot;&gt;&lt;/a&gt;通过循环的方式遍历列表&lt;/h4&gt;&lt;p&gt;通常情况下，我们需要对列表的所有元素进行操作，这个时候就需要遍历整个
      
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python学习01天</title>
    <link href="https://chensenlin.cn/posts/7874/"/>
    <id>https://chensenlin.cn/posts/7874/</id>
    <published>2018-03-14T06:10:32.000Z</published>
    <updated>2018-03-16T08:54:08.577Z</updated>
    
    <content type="html"><![CDATA[<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>列表由一系列按特定顺序排列的元素组成。可以创建包含字母表中所有字母、数字0~9或 所有家庭成员姓名的列表;也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。鉴于列表通常包含多个元素，给列表指定一个表示复数的名称(如letters、digits或names)是 个不错的主意。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>用方括号<code>([])</code>来表示列表，并用逗号来分隔其中的元素。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bicycles)</span></span></span><br></pre></td></tr></table></figure><h5 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h5><p>访问列表中的元素是通过<strong>索引</strong>获取的，而索引是从0开始的。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bicycles)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"取第0个索引:"</span> + bicycles[<span class="number">0</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"取第1个索引:"</span> + bicycles[<span class="number">1</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"取第最后一个索引的值:"</span> + bicycles[-<span class="number">1</span>])</span></span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜day1 python  dsc.py</span><br><span class="line">[<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line">取第<span class="number">0</span>个索引<span class="symbol">:demo</span></span><br><span class="line">取第<span class="number">1</span>个索引<span class="symbol">:chen</span></span><br><span class="line">取第-<span class="number">1</span>个索引<span class="symbol">:lin</span></span><br></pre></td></tr></table></figure><p>结合<a href="https://www.jianshu.com/p/bf2c88e3974f" target="_blank" rel="noopener">第0天</a>的知识，我们现在对列表元素进行拼接的操作。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line">res = <span class="string">"My name is "</span> + bicycles[<span class="number">0</span>] + <span class="string">"!"</span>;</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My <span class="built_in">name</span> <span class="keyword">is</span> demo!</span><br></pre></td></tr></table></figure><h5 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h5><p>修改元素的值可以理解为通过索引获取需要修改的值，然后重新赋值。</p><p>代码示例:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br><span class="line">bicycles[<span class="number">1</span>] = <span class="string">'Name'</span>;</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br></pre></td></tr></table></figure><p>可以理解为:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line">print(bicycles)</span><br><span class="line">change_res = bicycles[<span class="number">1</span>];</span><br><span class="line">change_res = <span class="string">'Name'</span>;</span><br><span class="line">bicycles[<span class="number">1</span>] = change_res;</span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'demo</span>', <span class="symbol">'chen</span>', <span class="symbol">'sen</span>', <span class="symbol">'lin</span>']</span><br><span class="line">[<span class="symbol">'demo</span>', <span class="symbol">'Name</span>', <span class="symbol">'sen</span>', <span class="symbol">'lin</span>']</span><br></pre></td></tr></table></figure><h5 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h5><p>添加元素主要有两种方式：列表末尾添加元素，列表中插入元素(包含开头)。其中不能影响其他的元素。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bicycles)</span></span></span><br><span class="line">bicycles.append(<span class="string">'good'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bicycles)</span></span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'demo</span>', <span class="symbol">'chen</span>', <span class="symbol">'sen</span>', <span class="symbol">'lin</span>']</span><br><span class="line">[<span class="symbol">'demo</span>', <span class="symbol">'chen</span>', <span class="symbol">'sen</span>', <span class="symbol">'lin</span>', <span class="symbol">'good</span>']</span><br></pre></td></tr></table></figure><p>甚至可以创建一个没有任何的元素空的列表，然后不断的追加元素。或者可以从开头或者中间插入元素。</p><p>代码示例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">null_list = []</span><br><span class="line">null_list.<span class="built_in">append</span>(<span class="string">'hello'</span>)</span><br><span class="line">null_list.<span class="built_in">append</span>(<span class="string">'senlin'</span>)</span><br><span class="line">null_list.<span class="built_in">append</span>(<span class="string">'chen'</span>)</span><br><span class="line"><span class="built_in">print</span>(null_list)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'hello</span>', <span class="symbol">'senlin</span>', <span class="symbol">'chen</span>']</span><br></pre></td></tr></table></figure><p><code>insert()</code>可以在任意位置添加元素。</p><p>代码示例:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span><span class="number">_</span>list = [<span class="string">'hello'</span>, <span class="string">'senlin'</span>, <span class="string">'chen'</span>]</span><br><span class="line"><span class="keyword">in</span><span class="number">_</span>list.insert(<span class="number">1</span>, <span class="string">'name'</span>)</span><br><span class="line">print(<span class="keyword">in</span><span class="number">_</span>list)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'hello</span>', <span class="symbol">'name</span>', <span class="symbol">'senlin</span>', <span class="symbol">'chen</span>']</span><br></pre></td></tr></table></figure><h5 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h5><p>删除元素的方法有:<code>del</code>删除、<code>pop()</code>弹出删除、根据<code>值</code>删除。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'on'</span>,<span class="string">'list'</span>,<span class="string">'time'</span>,<span class="string">'man'</span>,<span class="string">'like'</span>,<span class="string">'goods'</span>]</span><br><span class="line"><span class="selector-tag">del</span> list[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"删除第0个元素的值"</span>,list)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"弹出删除第最后一个元素的值"</span>,list.pop()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"弹出删除第一个元素的值"</span>,list.pop(<span class="number">1</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"根据值删除"</span>,list.remove(<span class="string">'man'</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list)</span></span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除第<span class="number">0</span>个元素的值 [<span class="string">'list'</span>, <span class="string">'time'</span>, <span class="string">'man'</span>, <span class="string">'like'</span>, <span class="string">'goods'</span>]</span><br><span class="line">弹出删除第最后一个元素的值 goods</span><br><span class="line">弹出删除第一个元素的值 time</span><br><span class="line">[<span class="string">'list'</span>, <span class="string">'man'</span>, <span class="string">'like'</span>]</span><br><span class="line">根据值删除 <span class="symbol">None</span></span><br><span class="line">[<span class="string">'list'</span>, <span class="string">'man'</span>]</span><br></pre></td></tr></table></figure><h5 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h5><p>组织列表中主要是针对列表进行排序等操作。排序分为临时排序(<code>sorted()</code>)和永久排序(<code>sort()</code>)。<code>reverse()</code>不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排 列顺序:<code>reverse()</code>永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用<code>reverse()</code>即可。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(cars)</span></span> #根据字母永久排序</span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort(reverse=True)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(cars)</span></span> #根据字母相反方向永久排序</span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(cars)</span></span> #倒着打印列表</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'audi</span>', <span class="symbol">'bmw</span>', <span class="symbol">'subaru</span>', <span class="symbol">'toyota</span>']</span><br><span class="line">[<span class="symbol">'audi</span>', <span class="symbol">'bmw</span>', <span class="symbol">'subaru</span>', <span class="symbol">'toyota</span>']</span><br><span class="line">[<span class="symbol">'toyota</span>', <span class="symbol">'subaru</span>', <span class="symbol">'bmwmw</span>', <span class="symbol">'audi</span>']</span><br><span class="line">[<span class="symbol">'subaru</span>', <span class="symbol">'toyota</span>', <span class="symbol">'audi</span>', <span class="symbol">'bmw</span>']</span><br></pre></td></tr></table></figure><h5 id="获取元素长度"><a href="#获取元素长度" class="headerlink" title="获取元素长度"></a>获取元素长度</h5><p>代码示例:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line"><span class="keyword">res</span> = <span class="built_in">len</span>(cars)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br></pre></td></tr></table></figure><p>运行结果为：<code>4</code></p><p>至此，第三章的列表已经学习完毕，本章的函数不是特别多。主要的知识点有概念，获取值，修改和排序等操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h4&gt;&lt;h5 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h5&gt;&lt;p&gt;列表由
      
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python学习00天</title>
    <link href="https://chensenlin.cn/posts/39399/"/>
    <id>https://chensenlin.cn/posts/39399/</id>
    <published>2018-03-13T03:01:32.000Z</published>
    <updated>2018-03-16T08:54:13.580Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装和准备"><a href="#安装和准备" class="headerlink" title="安装和准备"></a>安装和准备</h4><p>主要查询官网文档即可解决。官网地址：<code>https://www.python.org</code></p><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><h5 id="终端运行"><a href="#终端运行" class="headerlink" title="终端运行"></a>终端运行</h5><p> <img src="https://lh3.googleusercontent.com/-huYumIPhvak/Wqc8LEl8JBI/AAAAAAAAAIE/y4EFH7q2MzkxSlDbbziNxA_7tP3w51xqQCHMYCw/I/15209089555344.jpg" alt=""></p><h5 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h5><p>新建以<code>.py</code>结尾的文件，例如<code>hello.py</code>;打开该文件，输入：<code>print(&quot;Hello World&quot;);</code>,最后运行：<code>python hello.py</code> ;<br><img src="https://lh3.googleusercontent.com/-pskbBl4cTf8/Wqc8L9q0F-I/AAAAAAAAAII/FPdZRl0TEOw5RP5pqN9hqFzseJv1QPYmwCHMYCw/I/15209093371416.jpg" alt=""></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>变量就是保存一个值的信息，将其存储起来，随着程序后面的不断赋值（要求存储一个新的值），该变量的值也会随着改变。如下图所示，<code>change</code>变量就是被重新赋值了。<br> <img src="https://lh3.googleusercontent.com/-OayuSUsslWA/WqdGWWHwsII/AAAAAAAAAIk/-uaMZ5aWXJgt0WxthEGuN106oBWn3ICpwCHMYCw/I/15209097753941.jpg" alt=""></p><p>运行结果如下：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜day0 python hello.py</span><br><span class="line">Hello SenLin Chen!</span><br><span class="line">Hello Python SenLin!</span><br></pre></td></tr></table></figure><h5 id="语法和规则"><a href="#语法和规则" class="headerlink" title="语法和规则"></a>语法和规则</h5><p>语法：<br><code>变量名=赋值的值</code>，例如<code>change</code>是变量名，<code>Hello SenLin Chen!</code>是赋值的值。这样变量<code>change</code>的值就是:<code>Hello SenLin Chen!</code>;</p><p>规则：</p><ol><li>变量名只能包含字母、下划线和数字。数字不能开头。不能包含空格。例如:<code>12_name</code>;合格写法：<code>user_name</code>；</li><li>不能用python的关键字和函数名作为变量名，因为已经被用了，这么想就没事了。</li><li>变量名应该见名知意，尽可能简短。</li></ol><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h5><p>用引号括起来就是字符串。其中有单引号和双引号。<br>例如：<code>&#39;string&#39;</code>,<code>&quot;user_name&quot;</code>等。</p><h5 id="修改字符串大小写"><a href="#修改字符串大小写" class="headerlink" title="修改字符串大小写"></a>修改字符串大小写</h5><p>常用方法:<br> <code>title()</code>:将字符串的首字母设置为大写;<br> <code>upper()</code>:将字符串全部设置为大写;<br> <code>lower()</code>:将字符串全部设置为小写;</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">change = <span class="string">'hello,my name is demo chen!'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(change.title()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(change.upper()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(change.lower()</span></span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  day0 python hello.py</span><br><span class="line">Hello ,My <span class="keyword">Name</span> <span class="keyword">Is</span> Demo Chen!</span><br><span class="line">HELLO ,MY <span class="keyword">NAME</span> <span class="keyword">IS</span> DEMO CHEN!</span><br><span class="line">hello ,my <span class="keyword">name</span> <span class="keyword">is</span> demo chen!</span><br></pre></td></tr></table></figure><h5 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h5><p>使用场景:多个字符串合并为一个字符串形式。</p><p>使用方法:采用<code>+</code>的形式来拼接。</p><p>代码示例:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span> = <span class="string">'hello'</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">'senlin'</span></span><br><span class="line"><span class="attr">user_name</span> = user + <span class="string">'_'</span> + name</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜day0 python user_name.py</span><br><span class="line">hello_senlinenlin</span><br></pre></td></tr></table></figure><h5 id="添加空白"><a href="#添加空白" class="headerlink" title="添加空白"></a>添加空白</h5><p>制表符:<code>\t</code>;换行:<code>\n</code> ;可以组合使用。</p><h5 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h5><p><code>&#39;demo &#39;</code>不等于<code>‘demo’</code>;所以需要去除空白。</p><p>相关函数:</p><p><code>rstrip()</code>:去除末尾的空白;<br><code>lstrip()</code>:去除开头的空白;<br><code>strip()</code>:去除开头和末尾的空白;</p><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>数字主要有整数和浮点数。主要的运算有:加(<code>+</code>)、减(<code>-</code>)、乘(<code>*</code>)、除(<code>/</code>)、乘方(<code>**</code>)等</p><p>代码示例:<br><img src="https://lh3.googleusercontent.com/-vUF45QQauV0/Wqdz5bmhx7I/AAAAAAAAAJA/BRz19oZ_9CgacSPrkjZ18kztD9U2WtgvwCHMYCw/I/15209231027739.jpg" alt=""></p><p><code>str()</code>:将非字符串表示为字符串。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><code>#</code>为Python注释的语法。</p><p>代码示例:</p><p><img src="https://lh3.googleusercontent.com/-QMb6mlL6UPQ/Wqdz6BAc-kI/AAAAAAAAAJE/OhfFweS1H60qIt3n5EcuCZ605FErg8FkQCHMYCw/I/15209234725018.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装和准备&quot;&gt;&lt;a href=&quot;#安装和准备&quot; class=&quot;headerlink&quot; title=&quot;安装和准备&quot;&gt;&lt;/a&gt;安装和准备&lt;/h4&gt;&lt;p&gt;主要查询官网文档即可解决。官网地址：&lt;code&gt;https://www.python.org&lt;/code&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>购买付费软件的一点感想</title>
    <link href="https://chensenlin.cn/posts/50238/"/>
    <id>https://chensenlin.cn/posts/50238/</id>
    <published>2018-02-03T03:34:53.000Z</published>
    <updated>2018-03-16T10:33:56.581Z</updated>
    
    <content type="html"><![CDATA[<h4 id="付费还是免费？"><a href="#付费还是免费？" class="headerlink" title="付费还是免费？"></a>付费还是免费？</h4><p>以前我使用Windows的时候，如果遇到付费的软件我都会选择注册机、注册码、破解工具等方式来解决，同时某盘还存了很多的破解的软件或者工具。现在我会逐步选择付费的软件，同时选择同类产品比较好的软件。因为我觉得付费购买是对人家的一种尊重和支持。同理，我是一个开发者，我希望我的作品别人也能够支持，支持别人其实自己也会得到支持。</p><h4 id="如何付费？"><a href="#如何付费？" class="headerlink" title="如何付费？"></a>如何付费？</h4><p>一般会根据自己的需求来判断自己是否需要这个软件的功能，是否能够解决我自己的问题？是否能够满足的我的需要？然后对比同类产品中付费和免费的相关的产品，如果免费的就足够就不需要考虑付费了。例如卸载软件<code>AppCleaner</code>，还有比它更加优秀的产品，但是我选择这个就可以了。同理，如果付费中我能够接受的价格能够满足就可以了，没有必要去选择最贵的活着最好的，主要是最适合自己的。例如剪切板工具有很多，我选择了<code>iPaste</code>，专注于剪切板功能。</p><p>选择付费是一种需要，也是一种支持，更是一种态度。</p><h4 id="付费软件列表"><a href="#付费软件列表" class="headerlink" title="付费软件列表"></a>付费软件列表</h4><h4 id="iPhone"><a href="#iPhone" class="headerlink" title="iPhone"></a>iPhone</h4><table><thead><tr><th>软件名</th><th>价格(元)</th></tr></thead><tbody><tr><td>Price Tag</td><td>30</td></tr><tr><td>V2er</td><td>8</td></tr><tr><td>白描</td><td>1+6</td></tr><tr><td>熊猫吃短信</td><td>1</td></tr><tr><td>Picsew</td><td>1</td></tr><tr><td>凤凰新闻 Pro</td><td>1</td></tr><tr><td>Holo</td><td>0.00</td></tr><tr><td>小历</td><td>1</td></tr><tr><td>落格输入法</td><td>3</td></tr><tr><td>Piiic</td><td>1</td></tr><tr><td>iPaste</td><td>58.00</td></tr><tr><td>TextGrabber</td><td>30.00</td></tr><tr><td>X.cat Pro</td><td>40</td></tr><tr><td>Cosmos</td><td>0.00</td></tr><tr><td>Shu</td><td>12.00</td></tr><tr><td>鲨鱼记账Pro</td><td>1</td></tr></tbody></table><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><table><thead><tr><th>软件名</th><th>价格(元)</th></tr></thead><tbody><tr><td>Clearview</td><td>78</td></tr><tr><td>MWeb</td><td>98</td></tr><tr><td>Yummy FTP Pro</td><td>198.00</td></tr><tr><td>iPaste</td><td>58</td></tr><tr><td>Xnip</td><td>12/年</td></tr><tr><td>Disk Drill</td><td>189.00</td></tr><tr><td>Total Video Converter</td><td>0.00</td></tr><tr><td>Folx pro 5</td><td>59.00</td></tr><tr><td>iStat Menus 6</td><td>14.00</td></tr></tbody></table><p>暂时就想起来了这么点。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;付费还是免费？&quot;&gt;&lt;a href=&quot;#付费还是免费？&quot; class=&quot;headerlink&quot; title=&quot;付费还是免费？&quot;&gt;&lt;/a&gt;付费还是免费？&lt;/h4&gt;&lt;p&gt;以前我使用Windows的时候，如果遇到付费的软件我都会选择注册机、注册码、破解工具等方式来解决，同
      
    
    </summary>
    
      <category term="生活" scheme="https://chensenlin.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="软件" scheme="https://chensenlin.cn/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="生活" scheme="https://chensenlin.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>《把时间当作朋友》笔记</title>
    <link href="https://chensenlin.cn/posts/60177/"/>
    <id>https://chensenlin.cn/posts/60177/</id>
    <published>2017-12-03T00:32:03.000Z</published>
    <updated>2018-03-16T13:36:21.806Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第0章-困境"><a href="#第0章-困境" class="headerlink" title="第0章 困境"></a>第0章 困境</h3><h4 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h4><p>一般我们经常说的是就是“没有时间”。真的没有时间吗？</p><h4 id="慌乱"><a href="#慌乱" class="headerlink" title="慌乱"></a>慌乱</h4><p>于是我们开始着急，开始慌乱。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>一个不争的事实：时间是不可被管理的。于是，我们开始反思自己，一切的问题都在自己身上。这一切都需要积累，只有积累到达足够的境界，时间就是我们的朋友，否则就是敌人。人是由概念和方法论组成的。一切靠学识决定，与其花时间管理时间，不如花时间提高自我解决问题的效率。</p><h3 id="第1章-醒悟"><a href="#第1章-醒悟" class="headerlink" title="第1章 醒悟"></a>第1章 醒悟</h3><h4 id="大脑"><a href="#大脑" class="headerlink" title="大脑"></a>大脑</h4><p>我们竟然可以用自己的大脑控制自己的大脑。你的大脑并不是你，你的大脑是（属于）“你的”大脑，运用心智获得解放，不再让自己“跟着感觉走”，成为大脑的奴隶，而是翻身做大脑的主人。</p><h4 id="心智"><a href="#心智" class="headerlink" title="心智"></a>心智</h4><p>一个人的心智就是器过往获得的一切知识以及经验的总和。其中包括基于这些知识和经验造就的思考方式、思考模式。心智，上不封顶下无保底，一旦打开，就可能因为学习而像病毒一样疯狂发展，与此同时，学习能力相应大幅度增长。</p><h3 id="第2章-现实"><a href="#第2章-现实" class="headerlink" title="第2章 现实"></a>第2章 现实</h3><h4 id="速成绝无可能"><a href="#速成绝无可能" class="headerlink" title="速成绝无可能"></a>速成绝无可能</h4><p>期望速成有两个主要原因：第一个是希望自己的欲望马上得到满足；第二个是不懂“有些阶级是无法跨越的”。</p><h4 id="交换才是硬道理"><a href="#交换才是硬道理" class="headerlink" title="交换才是硬道理"></a>交换才是硬道理</h4><p>“我要”的欲望可以用“我有”的东西来满足。如果行李是必须的，那么背动行李的唯一办法不是减负，而是让自己变强。</p><h4 id="完美用不存在"><a href="#完美用不存在" class="headerlink" title="完美用不存在"></a>完美用不存在</h4><p>人人都希翼完美，只可惜，完美并不存在。越是能力差的人，越有那种非常不现实又极其脆弱的完美主义倾向。生活本来就不完美，谁的生活不是磕磕绊绊？谁又在死去的时候没有一丝遗憾？现实如此只能接受。</p><h4 id="未知永远存在"><a href="#未知永远存在" class="headerlink" title="未知永远存在"></a>未知永远存在</h4><p>未知因素给人们带来的心理压力远远超出一般人的想象。首先我们要承认自己不可能全知全晓。其次，对于未知我们要分为两种，一种是永远不能解决的，一种是可预见的未来可以解决。当遇到解决不了的问题时候，我们可以先记下来，然后继续前行。</p><h4 id="现状无法马上摆脱"><a href="#现状无法马上摆脱" class="headerlink" title="现状无法马上摆脱"></a>现状无法马上摆脱</h4><p>人们往往会低估环境的巨大力量。尽管天分很重要，但一个人的能力主要靠积累获得。心怀梦想的时间越长，它沉没的成本就越高。接受现状最优的策略是有什么做什么，有什么用什么，做什么都做好，用什么都用好。</p><h4 id="与时间做朋友"><a href="#与时间做朋友" class="headerlink" title="与时间做朋友"></a>与时间做朋友</h4><p>与时间做朋友方法很简单：用正确的方法做正确的事。几乎一切愚蠢的行为都来自于否定现实、逃避现实。只有接受现实，才能脚踏实地，避免心浮气躁，好高骛远。时间是现实的人的朋友，是不现实的人的敌人。时间不是故意这么做的，只不过事实就是如此。</p><h3 id="第3章-管理"><a href="#第3章-管理" class="headerlink" title="第3章 管理"></a>第3章 管理</h3><h4 id="估算时间"><a href="#估算时间" class="headerlink" title="估算时间"></a>估算时间</h4><p>错误估算任务所需时间是最常见，也是最致命的错误。要想提高估算时间的能力，就要从现在开始养成习惯：做任何事情之前先判断其熟悉程度（陌生程度），再据此判断估算完成任务所需要的时间。</p><h4 id="及时行动"><a href="#及时行动" class="headerlink" title="及时行动"></a>及时行动</h4><p>拖延的主要原因是，首先很多人做事拖延就是“不求有功，但求无过”心态在作祟。只要做事，就一定会出问题。这是现实。其次就是过分在乎外界的评价。如果我们明白了这是现实，就要把这种认识纳入自己的心智，就不会对“最后期限”产生幻觉。所以唯一的策略就是：现在就开始。</p><h4 id="直面困难"><a href="#直面困难" class="headerlink" title="直面困难"></a>直面困难</h4><p>就算没有低估完成任务所需要的时间，就算已经迅速开始执行任务，很多人还是没办法及时完成任务。这类效率低下的原因：回避困难。所有真正踏实做事的人都知道，任何任务的绝大部分都是枯燥而无趣的，所谓有创意的部分，可能连<code>1%</code>都不到。</p><h4 id="关注步骤"><a href="#关注步骤" class="headerlink" title="关注步骤"></a>关注步骤</h4><p>任何事情有三个方面：内容、原因、方法；<br>任何任务有三个属性：何事、何因、何法；<br>在做任何事情之前，通过关注“方法”去反复拆分任务，最终确认每个子任务都是可以完成的，这是一个人不可或缺的功课。这样的习惯会让一个人变得现实、踏实。</p><h4 id="并行串行"><a href="#并行串行" class="headerlink" title="并行串行"></a>并行串行</h4><p>提高效率指的是：原本只能串行的完成的两个任务现在可以并行完成。一些早期的计算机是单任务操作系统，为了提高效率现在有多任务操作系统。很直接的体现就是：DOS是没有办法理解Unix的。让自己拥有“多任务操作系统”方法：可以将大任务分成足够多又不太多的小任务；划分自己的时间。</p><h4 id="感知时间"><a href="#感知时间" class="headerlink" title="感知时间"></a>感知时间</h4><p>可以尝试通过“事件日志”纪录时间。除了自己亲身经历事件一概不记，尽量不记感受，不记感想，只记录事件本身。柳比歇夫的日志是：事件−时间日志。李敖的日志是只记录事件名称，是一种基于结果的纪录。两者差别在于：基于过程的纪录要比基于结果的纪录更为详细。基于过程的纪录有一个更大的好处，结果不好的时候可以更容易找到原由。管理时间基本不可能，那么解决办法是想尽一切办法真正了解自己，真正了解时间，精确感知时间，而后再想尽一切办法使自己以及自己行为和时间合拍，也就是“与时间做朋友”。</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表从来都是最有效的组织工具之一。最方便的列表工具是纸和笔。列表也没有必要工整，只要我们自己能看懂就够了。列表一定要随手可及。最重要的任务只有一个。判断一件事情是否真的重要，标准只有一个：是否对目标（无论是长期还是短期）的实现有益。制作专门的下一阶段任务列表。如果有什么新鲜主意不要放弃，只需要启用另一个列表（下一阶段的任务列表），把他们记录下来，然后马上回到当前的任务列表，专注于现在应该完成的任务上。给每个任务制定一个核对列表。列表一旦开始运作，就一定要执行到底。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>要想加快执行重复性任务的速度，只需在遇到重复性任务时先将其做完一次，然后马上总结、整理，搞清流程，再进一步实践把它变成“闭着眼睛也能做好”的事。这是提高效率、减少失误的根本手段。</p><h4 id="预演"><a href="#预演" class="headerlink" title="预演"></a>预演</h4><p>做任何事情之前，尝试把将要做的事情整个过程在脑子里预演一遍甚至数遍。只有经过大量的预演或者练习，才能够在实际执行任务的过程中有出色的表现。</p><h4 id="验收"><a href="#验收" class="headerlink" title="验收"></a>验收</h4><p>很多人做事半途而废、不了了之的根本原因在于从未想过要给自己执行 任务时的表现设计一个验收机制。最基本的验收机制是针对最终结果的，部 分有经验的人因为在做事之前总是更关注步骤，并会按照需求将任务拆分成 若干子任务，所以，他们甚至会为每一个步骤设计相应的验收机制。</p><p>从更高的层面上说，设计验收机制也是任何一个领导者必须拥有的基本能力。哪怕你领导的只是一个很小的团队，你也必然要向团队成员指派各种各样的任务。在这种情况下，如果你没有设计验收机制，最终的结果肯定会让你非常失望，因为缺少验收机制会使团队成员对自己的工作质量毫不介意， 长此以往，团队的执行力将等于零，作为困队领导者的你也必须承担失败的责任。</p><h3 id="第3章-学习"><a href="#第3章-学习" class="headerlink" title="第3章 学习"></a>第3章 学习</h3><h4 id="学习是投资回报率最高的行为"><a href="#学习是投资回报率最高的行为" class="headerlink" title="学习是投资回报率最高的行为"></a>学习是投资回报率最高的行为</h4><p>每掌握一项新的技能，就感觉自己像重生了一样。学习最关键的一点：任何知识的获取，都是不可逆的。学习的重要起点是：起码学会一种技能。总之，千万不要拒绝学习。</p><h4 id="基本途径"><a href="#基本途径" class="headerlink" title="基本途径"></a>基本途径</h4><p>获取更多知识几乎是我们开拓自身心智的唯一手段。所有人过去知识最基础的手段就是“体验”。比体验更高级的获取知识的手段是“试错”。比较聪明且重要得多的获取知识的手段是“观察”。<br>但是“体验”、“试错”、“观察”都有局限。原因：首先大量的知识无法通过个人亲身“体验”获得。其次有些知识很难通过“试错”获得。所以对此三者进行补充，那就是“阅读”。阅读是人们获取知识更加重要的手段。阅读突破了个人“体验”或“试错”的局限——“体验”和“试错”都只能通过自己，然而通过阅读可以获得别人的体验和试错结果。</p><h4 id="主要手段"><a href="#主要手段" class="headerlink" title="主要手段"></a>主要手段</h4><p>准确的说：正确的思考，才是获得真正意义上的知识的主要手段。思考、求知的过程，某种意义上就是探求因果关系的过程。开启心智、正确思考更值得我们投入时间和精力。</p><h4 id="经验局限"><a href="#经验局限" class="headerlink" title="经验局限"></a>经验局限</h4><p>学习过程最大的障碍就是经验主义。个体经验的局限案例：强光喷嚏反射。群体经验局限在于人类寿命有限。不仅存在无法通过个体或者群体经验获得的知识，还存在与现有经验相悖的知识。</p><h4 id="自学能力"><a href="#自学能力" class="headerlink" title="自学能力"></a>自学能力</h4><p>自学能力的基础就是阅读理解能力。检索能力建立在相当熟练的阅读理解能力基础之上。写作能力在自学能力中占据重要位置。实践能力是自学能力最终转化为真正价值的根本。要永远保持开放的心态。</p><p><image w="859" h="610" describe="name=Notes_1502720025000.jpeg"><br>在频繁失望甚至绝望的情况下居然坚持了那么久，最后我们会发现，原来我们是这么地有毅力啊！</image></p><h3 id="第4章-思考"><a href="#第4章-思考" class="headerlink" title="第4章 思考"></a>第4章 思考</h3><h4 id="相关命题"><a href="#相关命题" class="headerlink" title="相关命题"></a>相关命题</h4><p>有70%以上的人分不清原命题和逆命题之间的区别。每天有无数人因为分不清原命题和逆命题而被他左右。混淆原命题和逆命题，抹杀两者之间的差别，是广告设计者最常用，最舍不得放弃的手段。</p><h4 id="举证责任"><a href="#举证责任" class="headerlink" title="举证责任"></a>举证责任</h4><p>针对某一论点，对立双方的举证难度并非对称的。<br>首先，举证难度受证人能力的影响，因为每个人的学识和专业不同。其次，举证难度受当时所在社会的整体知识水平的影响。最后，举证难度还受需要证明的结论与当时普遍接受的知识相符程度的影响。</p><h4 id="对立论证"><a href="#对立论证" class="headerlink" title="对立论证"></a>对立论证</h4><p>人们可能基于一模一样的原因作出截然相反的决定。也就是用相同的论证证明截然相反的论点。实际上所谓的情商，从根源上朴素地看，还是思考力的问题。</p><h4 id="辨析感悟"><a href="#辨析感悟" class="headerlink" title="辨析感悟"></a>辨析感悟</h4><p>我们都需要清楚道理和感悟的区别。成功者其实没有必要、没有义务，也往往没有足够的时间去阐述所有的细节。与其关注成功者不妨反其道而行之：努力从失败者身上汲取经验。只有经过自己的仔细分辨，真正的成功者的宝贵经验才是无价的。需要额外注意的是，一方面多花心思分辨，另一方面多花时间真正了解自己，以便能够避开“一概而论，生搬硬套”可能带来的灾难。</p><h4 id="克服恐惧"><a href="#克服恐惧" class="headerlink" title="克服恐惧"></a>克服恐惧</h4><p>道理都明白，可是做不到，这是无数人生活中无数人在生命中无数次遭遇的尴尬。人人都有弱点，因为人人都会有恐惧。不要以为我们拥有无比的勇气，不要以为自己没有恐惧，总有那么一刻，我们的勇气无法抵御我们的恐惧。所以，我们有什么理由不能理解别人的恐惧呢？</p><h4 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h4><p>语言是一种便宜（甚至是免费）而又有效的辅助工具。当我们试图批判一个错误的立场的时候，即使是在完全正确地批判的情况下，也总会有这样的抵抗，例如：难道就没有一点可取之处吗？</p><h4 id="勤于思考"><a href="#勤于思考" class="headerlink" title="勤于思考"></a>勤于思考</h4><p>独立思考，只不过是从别人那里知道一个结论的时候，自己动脑重新推演一遍，看看结论的过程有没有漏洞和不合理的地方衡量一下到底有没有道理的过程。权威不是用来迷信的，权威在更多的时候本应该是我们认识世界的辅助工具。</p><h4 id="思维陷阱"><a href="#思维陷阱" class="headerlink" title="思维陷阱"></a>思维陷阱</h4><p>概念不清。学习任何东西最重要就是搞清它们所有的基础概念。永远都是那些能把概念理解透彻、区分清楚的人才能清楚地思考世界，进而改变整个世界。<br>拒绝接受不确定性。拒绝接受不确定性的一个根源在于害怕复杂、奢望简单。</p><h4 id="因果关系"><a href="#因果关系" class="headerlink" title="因果关系"></a>因果关系</h4><p>因果关系往往分析往往不像看上去那么简单，人们往往因为因果关系分析错误而得出错误的结论且不自知，进而莫名其妙做出错误决定，走上错误的道路。</p><p>基础。外因会影响内因，内因同样会影响外因。它们相互影响，互为因果。要做一个用心的人，要用心做事，因为这个世界其实有“心”。分析因果关系是我们在决定是否接受某个观点之前必做的功课。所谓的思维缜密，其实并非常人想象得那么高不可攀，事实上可能恰恰相反—— 做到并不难。很多人做不到的原因无非两个：习惯性拒绝思考和不懂得应该如何思考。而前者往往是由后者长期作用的。</p><h3 id="第5章-交流"><a href="#第5章-交流" class="headerlink" title="第5章 交流"></a>第5章 交流</h3><h4 id="学会倾听"><a href="#学会倾听" class="headerlink" title="学会倾听"></a>学会倾听</h4><p>正如没有人会认为自己不会说一样，几乎没有人会认为自己不会倾听。可事实上，大多数人不懂的应该如何有效的倾听。人类讲话的速度往往低于思考的速度，所以我们在倾听的过程中常常容易走神。如此这般下去终究会真正错过重要的信息。必须想办法获得一种或者一些用于鉴定已知信息有效性的知识。</p><p>那么如何倾听？</p><ol><li>为了做到真正有效的倾听，最需要克制的就是“过早质疑”。 </li><li>在倾听过程中，我们可要利用多余的脑力处理两个方向的信息：“回顾”与“预期”。</li><li>一旦决定倾听，就要主要主动帮助说者进入“倾诉”状态。</li></ol><h4 id="说与不说"><a href="#说与不说" class="headerlink" title="说与不说"></a>说与不说</h4><p>有一种极为常见却又几乎总是被忽略的现象：明明是同样的话，自己说出来就不像那么回事。通过努力和积累成为能说更多话的人。有时候，我们知道自己说的是对的，但是没有人听得进去，绝大多数人面临这样的情况多少有些失落，甚至愤怒，可事实上，这往往说明一个问题 ：还没有赢得足够的重视。</p><h4 id="交流守则"><a href="#交流守则" class="headerlink" title="交流守则"></a>交流守则</h4><ol><li>有意义讨论的前提是双方不仅要“相互竞争”，更要“相互合作”。</li><li>真理是独立存在的，他从来不会依附于任何个人或者集体。</li><li>真理不变，也不会因任何人而变；不停变化的只是人们对真理的理解或者解释。</li></ol><h4 id="正确复述"><a href="#正确复述" class="headerlink" title="正确复述"></a>正确复述</h4><p>沟通在很多时候并不像看起来那么容易。在这个过程中我们常常会因为某个参与者而导致“有效沟通根本不可能达成”。如果甲乙两个人需要沟通，那么他们沟通的过程是：甲将他想法用语言表达出来，已用自己的方式去理解甲的语言，然后反过来再次进行。此过程可能重复多次。但是两者的编码、解码机制常常不相同。所以为了保证沟通顺利，往往需要添加一个验证机制，或者说反馈机制。</p><p>这就需要我们在生活或者工作中给予别人一个反馈或者回复，让对方对此事有一定的知情权这样才能保证事情的沟通顺畅，效率更高。</p><h4 id="勤与反思"><a href="#勤与反思" class="headerlink" title="勤与反思"></a>勤与反思</h4><p>在讨论问题的时候，我们常常会被对方“固执已见”挫败，但对方眼里，我们可能也是“固执已见”的，只不过是程度不同而已。</p><p>所以，我们更需要如何做呢？</p><ol><li><strong>深刻了解经验的局限</strong>。摆脱经验主义的第一个技巧：了解经验的局限性；</li><li><strong>时时刻刻保持警惕</strong>。经验需要归纳，更需要经过演绎来论证；</li><li><strong>使用记录，使自己能够记住更多经验</strong>。做记录是一个很好的习惯；</li><li><strong>通过观察和阅读汲取他人的经验</strong>。观察和阅读是扩充有限的自我经验的最好的手段；</li><li><strong>试用类比来跨越未知与已知的障碍</strong>。类比思考几乎是跨越已知与未知之间鸿沟的唯一手段；</li><li><strong>耐心等待以拥有不能快速获得的经验</strong>。遇到不理解的问题或者不确定的想法先记录下来，保持耐心。</li></ol><h3 id="第6章-应用"><a href="#第6章-应用" class="headerlink" title="第6章 应用"></a>第6章 应用</h3><h4 id="兴趣"><a href="#兴趣" class="headerlink" title="兴趣"></a>兴趣</h4><p>首先，有些人并不是对自己正在做的事情没有兴趣，而是没有能力把目前正在做的事情做好。其次，人们常常说他们真正感兴趣的事情是其他事情。综上，我觉得兴趣不是那么重要，至少没有我们想象的那么重要。因为往往不是有兴趣才能做好，而是做好了才有兴趣。 </p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>方法固然重要，但是比起“用功”来说，方法几乎可以忽略不计。所有学习上的成功只依靠两件事：策略和坚持。而坚持本身就是最重要的策略。坚持就是重复；而重复就是，说到底就是时间投入，准确地说，是大量时间的投入。与其不停地寻找“更好的方法”，还不如马上行动。</p><h4 id="痛苦"><a href="#痛苦" class="headerlink" title="痛苦"></a>痛苦</h4><p>对痛苦的深刻感受，会扭曲或者抹杀人们感知其他事物的能力。痛苦就是这样，一旦我们学会在痛苦的时候运用心智把自己的注意了转移到其他地方去，痛苦就几近自动消失，而且在它被我重新注意之前绝不会回来。</p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>在很多人眼里，所谓的成功，不过是比较的产物，归根结底就四个字：高人一等。但是，比较是相对的，相对是永远没有尽头的。很多时候比较是一个坑，大坑。再干脆点说，比较是陷阱。</p><p>生活无法彻底回避比较，但是无须比较就可以获得快乐和幸福也同样很多，只不过常常被人忽略。其实比成功更重要的是<strong>成长</strong>。如果成功是和别人比较，那么成长就是和自己比较。显然，成长比成功意义更大。</p><h4 id="运气"><a href="#运气" class="headerlink" title="运气"></a>运气</h4><p>首先，运气是存在的；其次，运气是有好坏之分的。但是，相信运气是缺乏自制力的表现。当好运气发生在自己身上时，我们应该开心，当坏运气降临在我们身上时，我们呢应该平静接受。<strong>心态很重要</strong>。尽管对生活不应该盲目乐观，但一定不能失望悲观。</p><h4 id="人脉"><a href="#人脉" class="headerlink" title="人脉"></a>人脉</h4><p>基于某种原因，生活中广受欢迎的人总是少数。所有的人都喜欢并重视甚至偏爱一种交换：<strong>公平交换</strong>。资源更多的人更喜欢也更可能可能与另外一个资源数量或者质量对等的人进行交换。所以，承认知己能力有限，是保持心理健康的前提。</p><h4 id="自卑"><a href="#自卑" class="headerlink" title="自卑"></a>自卑</h4><p>每一个人都有一个愿望中的自己，同时还有一个感觉中的自己。最佳状态是：愿望中的自己=真实中的自己=感觉中的自己。但是很多时候是约等于并非等于，但是也有部分人处于不等于状态。</p><ol><li>作为社会的一员，大多数人并没有意识到，有时候，整个社会向他灌输的关联可能是错的。</li><li>优秀的人更容易自卑。</li><li>停止嘲笑他人。</li><li>忘记自己的优点。</li><li>在自己语言中，把“优点”和“缺点”这两个词换成“特点”。</li><li>适当地放纵一下自己。</li></ol><h4 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h4><p>素材固然重要，但是，如果提前确定一个方向或者目标，就可能会积累很多原本想象不到的素材——惊喜连连。不要无谓的相信什么“突然闪现的灵感”的存在。灵感这东西就算存在，也不会平白无故出现的，而是肯定有来历的。所以，以此类推，所有的成功，在本质上都是一样的。先花上相当的时间和精力去锁定一个方向和目标。确定它现实可行之后，运用心智的力量，在这个方向上投入更多的时间，比更多再多一点的时间，“必然”就会产生。</p><h4 id="鼓励"><a href="#鼓励" class="headerlink" title="鼓励"></a>鼓励</h4><p><strong>永远鼓励身边的人，哪怕多少有些盲目</strong>。当我们不停地鼓励所有人的时候，最大的受益者其实是我们自己，因力最终我们会发现，自己开始进入一种他人无法想象的伏态，成为一个不需要他人鼓励的人。这一点很重要。因为很多人之所以做事裹足不前，浪费时间 甚至生命，原因就在于他们是必须获得别人的鼓励才敢于行动的人。可是，我们却能成为另外一种人——我们可以不需要被别人鼓励——这是一种境界。</p><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><p><strong>任何人都不可能100%地有效率，至少不可能总是100%地有效率</strong>。确定自己是什么样的人，熟悉自己的专注的重点，然后通过一定的练习，进而控制我们的大脑。当一个人经过一段时间的训练后，分割时间的方法对他来说就没有必要了。因为，他应该已经可以比较自如的专注在他应该做的、非常重要的事情上了——无论这件事情是有趣还是无趣。</p><h4 id="节奏"><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h4><p>我们应该把自己的生活节奏调的慢一点。想办法提前预支自己需要掌握哪些技能，在确定它们是自己可以通过练习真正熟练掌握的技能，而后制定长期的计划，一步一点稳步执行。</p><h4 id="物极必反"><a href="#物极必反" class="headerlink" title="物极必反"></a>物极必反</h4><ol><li>不要盲目的试图减少睡眠时间。</li><li>尽量不要减少与家人交流的时间。</li><li>最好不要放弃自己的社交时间。</li></ol><h4 id="自我证明"><a href="#自我证明" class="headerlink" title="自我证明"></a>自我证明</h4><p>长久的观察和思考，有益干锻炼自己心气平和的能力，反正别人 如何认为、如何评价、如何议论根本没办法影响一个人所处的状态。但是，一旦某个人开始为此心烦意乱、坐卧不安，甚至为此有一些无聊的举动，那么他就不仅是倒霉，而且是可怜了， 因为他已经被别人左右了。被别人左右，是一个人相当可悲的状态之一。</p><h3 id="第7章"><a href="#第7章" class="headerlink" title="第7章"></a>第7章</h3><h4 id="坚信积累"><a href="#坚信积累" class="headerlink" title="坚信积累"></a>坚信积累</h4><p>现状会影响一个人的心态。如果有一个人心态受到了现状的影响，那么他的行为和决策都会随之发生变化。进而，行为和决策的结果形成新的现状，再次影响心态，形成恶性循环。</p><p>任何积累都需要时间，而且必然需要漫长的时间。也正是因为如此，大多数人才不肯积累，不愿积累，甚至不谢积累。相信积累的力量本质就是相信复利的力量。</p><p>越早醒悟越好，坚信积累的力量。</p><h4 id="越早越好"><a href="#越早越好" class="headerlink" title="越早越好"></a>越早越好</h4><p><strong>越早开始的事情没有几个，理财排在第一位</strong>。理财困难与矛盾来自这样一个窘境：<strong>很难很早开心，等开始的时候已经太晚</strong>。</p><p>为什么今天的人需要重视理财？第一：人们的平均寿命变得长了；第二：人们可获得收入的工作时间也随之变成了。</p><p>理财最难得两个地方是<strong>对自我的把控</strong>和<strong>对风险的把控</strong>。但是这两个技能可以通过习得而习得，最重要的是必须通过<strong>反复实践</strong>。</p><p><strong>转移注意力</strong>是抵御诱惑的一种常用的有效手段。理财的风险意识必须通过自己的实践、失败、教训、总结才能获得的东西。</p><p>所以，理财这件事越早越好，开始学会理财，可能是改善自制力、自控力的方法。</p><h4 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h4><ol><li>从今天开始存钱。</li><li>该花就花，有时候就要活在当下。（有时候）</li><li>爱面子其实是绝大多数人存不下钱的根本原因。</li><li>给自己培养一个不那么费钱的兴趣爱好。</li><li>开源节流。开源是正途，努力提高未来的营收能力才是当务之急，花时间提高自己的大脑。</li><li>给自己一个机会，在5年之后体会一下突然可以动用一笔闲钱的机会。</li></ol><h4 id="躺着赚钱"><a href="#躺着赚钱" class="headerlink" title="躺着赚钱"></a>躺着赚钱</h4><p>收入分为两种：主动收入和被动收入。主动收入：就是必须做点什才能获取的收入。被动则相反。例如利息。很多人不仅没有“睡后收入”，还有“睡后支出”。<strong>分期消费的负担其实很重</strong>。<strong>创作</strong>和<strong>课程</strong>都是是一个睡后收入的不错选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第0章-困境&quot;&gt;&lt;a href=&quot;#第0章-困境&quot; class=&quot;headerlink&quot; title=&quot;第0章 困境&quot;&gt;&lt;/a&gt;第0章 困境&lt;/h3&gt;&lt;h4 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="生活" scheme="https://chensenlin.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="生活" scheme="https://chensenlin.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="阅读" scheme="https://chensenlin.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="笔记" scheme="https://chensenlin.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
