<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你好我是森林</title>
  
  <subtitle>你好我是森林</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chensenlin.cn/"/>
  <updated>2018-04-03T14:44:16.235Z</updated>
  <id>https://chensenlin.cn/</id>
  
  <author>
    <name>你好我是森林</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python网络数据采集之数据清洗|第06天</title>
    <link href="https://chensenlin.cn/posts/48792/"/>
    <id>https://chensenlin.cn/posts/48792/</id>
    <published>2018-04-03T14:20:34.000Z</published>
    <updated>2018-04-03T14:44:16.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：数据清洗。</p><a id="more"></a><p>昨天有朋友在微信问我怎么没有更新，昨天回家整理了一些相关的东西，没来得及写文章。今天一个朋友听说我在简书分享，也和我一同加入了简书，很喜欢这样的感觉。之前军哥跟我说过，慢慢尝试去写，然后会有一部分人会被你影响，我发现是真的，真的能够影响到一部分人。闲话少说，开始今天的内容。</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"autoplay":true,"video":{"url":"http://u.wimg.cc/7%2Fl%2F2.mp4?OSSAccessKeyId=LTAITJNMFGO3ZU7e&Expires=1522773825&Signature=6GCTRi8F2lubgdOcV%2F4uieJOrTA%3D"},"danmaku":{"id":"someid","api":"https://api.prprpr.me/dplayer/","addition":["/some.json"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);player.on("loadstart",function(){console.log("loadstart")})})()</script> <h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><blockquote><p>从本章开始，内容稍微复杂一点，但也不是那么难。</p></blockquote><p>记得之前我在爬去<code>boss</code>网站的招聘信息的时候，抓取的数据并非我们所理想的样式，后面经过处理后，成为一个自己想要的样子，这个过程可以理解为数据清洗。这里的处理是在代码处理的，不是手工完成。</p><h4 id="编写代码清洗数据"><a href="#编写代码清洗数据" class="headerlink" title="编写代码清洗数据"></a>编写代码清洗数据</h4><p>在此之前需要了解一下<code>n-gram</code>模型，它表示文字或语言中的<code>n</code> 个连续的单词组成的序列。在进行自然语言分析时，使用 <code>n-gram</code>或者寻找常用词组，可以很容易地把一句话分解成若干个文字片段。更多详情可以去<a href="https://en.wikipedia.org/wiki/N-gram" target="_blank" rel="noopener">维基</a>查看一下，或者自行搜索。</p><p>下面通过代码将返回维基百科词条<code>“Python programming language”</code>的<code>2-gram</code>列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNgrams</span><span class="params">(content, n)</span>:</span></span><br><span class="line">  content = content.split(<span class="string">' '</span>)</span><br><span class="line">  output = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(content)-n+<span class="number">1</span>):</span><br><span class="line">    output.append(content[i:i+n])</span><br><span class="line">  <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://en.wikipedia.org/wiki/Python_(programming_language)'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">content = bs.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>:<span class="string">'mw-content-text'</span>&#125;).get_text()</span><br><span class="line">ngrams = getNgrams(content, <span class="number">2</span>)</span><br><span class="line">print(ngrams)</span><br><span class="line">print(<span class="string">'2-grams count is: '</span>+str(len(ngrams)))</span><br></pre></td></tr></table></figure><p><code>ngrams</code> 函数把一个待处理的字符串分成单词序列(假设所有单词按照空格分开)，然后增加到 <code>n-gram</code> 模型(本例中是 <code>2-gram</code>)里形成以每个单词开始的二元数组。</p><p>我们得到的数据部分如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[['\nPython\n\n\n\n\nParadigm\nObject-oriented,', 'imperative,'], ['imperative,', 'functional,'], ['functional,', 'procedural,'], ['procedural,', 'reflective\n\n\nDesigned\xa0by\nGuido'],</span><br></pre></td></tr></table></figure><p>显然，是需要处理的。</p><p>首选处理通过正则移除<code>\n</code>，再把 Unicode 字符过滤掉。先把内容中的换行符(或者多个换行符)替换成空格，然后把连续的多个空格替换成一个空格，确保所有单词之间只有一个空格。最后，把内容转换成 <code>UTF-8</code> 格式以消除转义字符。函数初步如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ngrams</span><span class="params">(input, n)</span>:</span></span><br><span class="line">    content = re.sub(<span class="string">'\n+'</span>, <span class="string">" "</span>, content) </span><br><span class="line">    content = re.sub(<span class="string">' +'</span>, <span class="string">" "</span>, content)</span><br><span class="line">    content = bytes(content, <span class="string">"UTF-8"</span>)</span><br><span class="line">    content = content.decode(<span class="string">"ascii"</span>, <span class="string">"ignore"</span>) </span><br><span class="line">    print(content)</span><br><span class="line">    input = input.split(<span class="string">' '</span>)</span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input)-n+<span class="number">1</span>):</span><br><span class="line">        output.append(input[i:i+n])</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p><code>Python</code>获取所有的标点符号：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="built_in">url</span> python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.4</span> (<span class="keyword">default</span>, Mar  <span class="number">1</span> <span class="number">2018</span>, <span class="number">18</span>:<span class="number">36</span>:<span class="number">50</span>)</span><br><span class="line">[GCC <span class="number">4.2</span><span class="number">.1</span> Compatible Apple LLVM <span class="number">9.0</span><span class="number">.0</span> (clang<span class="number">-900.0</span><span class="number">.39</span><span class="number">.2</span>)] <span class="keyword">on</span> darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">import</span> <span class="built_in">string</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">string</span>.punctuation</span><br><span class="line"><span class="string">'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span></span><br></pre></td></tr></table></figure><p>我们还要去除一些维基引用的标记、标点符号等；进一步进行清洗的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen </span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanInput</span><span class="params">(input)</span>:</span></span><br><span class="line">    input = re.sub(<span class="string">'\n+'</span>, <span class="string">" "</span>, input) </span><br><span class="line">    input = re.sub(<span class="string">'\[[0-9]*\]'</span>, <span class="string">""</span>, input) </span><br><span class="line">    input = re.sub(<span class="string">' +'</span>, <span class="string">" "</span>, input)</span><br><span class="line">    input = bytes(input, <span class="string">"UTF-8"</span>)</span><br><span class="line">    input = input.decode(<span class="string">"ascii"</span>, <span class="string">"ignore"</span>) cleanInput = []</span><br><span class="line">    input = input.split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> input:</span><br><span class="line">        item = item.strip(string.punctuation)</span><br><span class="line">        <span class="keyword">if</span> len(item) &gt; <span class="number">1</span> <span class="keyword">or</span> (item.lower() == <span class="string">'a'</span> <span class="keyword">or</span> item.lower() == <span class="string">'i'</span>):</span><br><span class="line">            cleanInput.append(item) <span class="keyword">return</span> cleanInput</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ngrams</span><span class="params">(input, n)</span>:</span></span><br><span class="line">    input = cleanInput(input) </span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input)-n+<span class="number">1</span>):</span><br><span class="line">        output.append(input[i:i+n]) </span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p>这样处理后，我们的结果就稍微好点。</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'Linux'</span>, <span class="symbol">'Foundation'</span>], [<span class="symbol">'Foundation'</span>, <span class="symbol">'Mozilla'</span>], [<span class="symbol">'Mozilla'</span>, <span class="symbol">'Foundation'</span>], [</span><br><span class="line">     <span class="symbol">'Foundation'</span>, <span class="symbol">'Open'</span>], [<span class="symbol">'Open'</span>, <span class="symbol">'Knowledge'</span>], [<span class="symbol">'Knowledge'</span>, <span class="symbol">'Foundation'</span>], [<span class="symbol">'Fou</span></span><br><span class="line">     ndation', <span class="symbol">'Open'</span>], [<span class="symbol">'Open'</span>, <span class="symbol">'Source'</span>]</span><br></pre></td></tr></table></figure><h4 id="数据存储后再清洗"><a href="#数据存储后再清洗" class="headerlink" title="数据存储后再清洗"></a>数据存储后再清洗</h4><p>对于编写代码清洗数据，你能做或想做的事情只有这些。除此之外，你可能还需要处理一些别人创建的数据库，或者要对一个之前没接触过的数据库进行清洗。</p><p>主要额方法有编写脚本或者第三方工具。例如<code>OpenRefine</code>。本小节主要是介绍一下该软件的安装和使用。也可以理解为一个图形化的应用，对于工具类的东西我一直有一个观点：点点点，就会了；何况还是图形化的。所以我不做介绍，看一下官网的三个视频就会了。</p><p>官网地址：<a href="http://openrefine.org/" target="_blank" rel="noopener">http://openrefine.org/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：数据清洗。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之读取文档|第05天</title>
    <link href="https://chensenlin.cn/posts/34041/"/>
    <id>https://chensenlin.cn/posts/34041/</id>
    <published>2018-04-01T13:33:54.000Z</published>
    <updated>2018-04-03T14:23:29.214Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>文档编码和类型的介绍；</p><p>读取CSV、PDF等格式的文件。</p><a id="more"></a><h3 id="读取文档"><a href="#读取文档" class="headerlink" title="读取文档"></a>读取文档</h3><h4 id="文档编码"><a href="#文档编码" class="headerlink" title="文档编码"></a>文档编码</h4><p>文档编码的方式通常可以根据文件的扩展名进行判断，虽然文件扩展名并不是由编码确定的，而是由开发者确定的。从最底层的角度看，所有文档都是由 <code>0</code>和 <code>1</code> 编码而成的。例如我我们将一个后缀为<code>png</code>的图片后缀改为<code>.py</code>。用编辑器打打开就完全不对了。</p><p>只要安装了合适的库， <code>Python</code> 就可以帮你处理任意类型的文档。纯文本文件、视频文件和图像文件的唯一区别，就是它们的 <code>0</code>和<code>1</code> 面向用户的转换方式不同。</p><h4 id="纯文本"><a href="#纯文本" class="headerlink" title="纯文本"></a>纯文本</h4><p>对于纯文本的文件获取的方式很简单，用 <code>urlopen</code> 获取了网页之后，我们会把它转变成 <code>BeautifulSoup</code>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen </span><br><span class="line"></span><br><span class="line">textPage = urlopen(</span><br><span class="line"><span class="string">"http://www.pythonscraping.com/pages/warandpeace/chapter1.txt"</span>) </span><br><span class="line"></span><br><span class="line">print(textPage.read())</span><br></pre></td></tr></table></figure><h4 id="CSV-文件"><a href="#CSV-文件" class="headerlink" title="CSV 文件"></a>CSV 文件</h4><p><code>Python</code>有一个标准库对<code>CSV</code>文件的处理特别的友好，可以处理各类的<code>CSV</code>文件。<a href="https://docs.python.org/3/library/csv.html" target="_blank" rel="noopener">文档地址</a></p><h5 id="读取CSV文件"><a href="#读取CSV文件" class="headerlink" title="读取CSV文件"></a>读取CSV文件</h5><p><code>Python</code> 的<code>csv</code> 库主要是面向本地文件，就是说你的 <code>CSV</code> 文件得存储在你的电脑上。而进行网络数据采集的时候，很多文件都是在线的。有几个参考解决办法：</p><ul><li>手动把CSV文件下载到本机，然后用Python定位文件位置;</li><li>写Python程序下载文件，读取之后再把源文件删除;</li><li>从网上直接把文件读成一个字符串，然后转换成一个StringIO对象，使它具有文件的<br>属性。</li></ul><p>例如获取网上的<code>CSV</code>文件，然后输出命令行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">data = urlopen(<span class="string">"http://pythonscraping.com/files/MontyPythonAlbums.csv"</span>).read().decode(<span class="string">'ASCII'</span>,<span class="string">'ignore'</span>)</span><br><span class="line"></span><br><span class="line">dataFile = StringIO(data)</span><br><span class="line">csvReader = csv.reader(dataFile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> csvReader:</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure><p>输出的结果：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'Name</span>', <span class="symbol">'Year</span>']</span><br><span class="line">[<span class="string">"Monty Python's Flying Circus"</span>, <span class="symbol">'1970</span>']</span><br><span class="line">[<span class="symbol">'Another</span> Monty Python Record', <span class="symbol">'1971</span>']</span><br><span class="line">[<span class="string">"Monty Python's Previous Record"</span>, <span class="symbol">'1972</span>']</span><br><span class="line">[<span class="symbol">'The</span> Monty Python Matching Tie and Handkerchief', <span class="symbol">'1973</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Live at Drury Lane', <span class="symbol">'1974</span>']</span><br><span class="line">[<span class="symbol">'An</span> Album of the Soundtrack of the Trailer of the Film of Monty Python and the Holy Grail', <span class="symbol">'1975</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Live at City Center', <span class="symbol">'1977</span>']</span><br><span class="line">[<span class="symbol">'The</span> Monty Python Instant Record Collection', <span class="symbol">'1977</span>']</span><br><span class="line">[<span class="string">"Monty Python's Life of Brian"</span>, <span class="symbol">'1979</span>']</span><br><span class="line">[<span class="string">"Monty Python's Cotractual Obligation Album"</span>, <span class="symbol">'1980</span>']</span><br><span class="line">[<span class="string">"Monty Python's The Meaning of Life"</span>, <span class="symbol">'1983</span>']</span><br><span class="line">[<span class="symbol">'The</span> Final Rip Off', <span class="symbol">'1987</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Sings', <span class="symbol">'1989</span>']</span><br><span class="line">[<span class="symbol">'The</span> Ultimate Monty Python Rip Off', <span class="symbol">'1994</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Sings Again', <span class="symbol">'2014</span>']</span><br></pre></td></tr></table></figure><h4 id="PDF-文件"><a href="#PDF-文件" class="headerlink" title="PDF 文件"></a>PDF 文件</h4><p><code>PDFMiner3K</code>是一个非常好用的库(是<code>PDFMiner</code>的<code>Python 3.x</code>移植版)。它非常灵活，可以通过命令行使用，也可以整合到代码中。它还可以处理不同的语言编码，而且对网络文件的处理也非常方便。</p><p>下载解压后用<code>python setup.py install</code>完成安装。</p><blockquote><p>模块的源文件下载地址： <a href="https://pypi.python.org/pypi/pdfminer3k" target="_blank" rel="noopener">https://pypi.python.org/pypi/pdfminer3k</a></p></blockquote><p>例如可以把任意 <code>PDF</code> 读成字符串，然后用 <code>StringIO</code>转换成文件对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager, process_pdf</span><br><span class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> TextConverter</span><br><span class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> LAParams</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> open</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readPDF</span><span class="params">(pdfFile)</span>:</span></span><br><span class="line">    rsrcmgr = PDFResourceManager()</span><br><span class="line">    retstr = StringIO()</span><br><span class="line">    laparams = LAParams()</span><br><span class="line">    device = TextConverter(rsrcmgr, retstr, laparams=laparams)</span><br><span class="line">             process_pdf(rsrcmgr, device, pdfFile)</span><br><span class="line">             device.close()</span><br><span class="line">    content = retstr.getvalue() retstr.close()</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line">    </span><br><span class="line">pdfFile = urlopen(<span class="string">"http://pythonscraping.com/pages/warandpeace/chapter1.pdf"</span>)</span><br><span class="line">outputString = readPDF(pdfFile)</span><br><span class="line">print(outputString)</span><br><span class="line">pdfFile.close()</span><br></pre></td></tr></table></figure><p><code>readPDF</code> 函数最大的好处是，如果<code>PDF</code>文件在电脑里，就可以直接把 <code>urlopen</code>返回的对象 <code>pdfFile</code> 替换成普通的 <code>open()</code> 文件对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdfFile = open(<span class="string">"./chapter1.pdf"</span>, <span class="string">'rb'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;文档编码和类型的介绍；&lt;/p&gt;
&lt;p&gt;读取CSV、PDF等格式的文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之存储数据|第04天</title>
    <link href="https://chensenlin.cn/posts/60544/"/>
    <id>https://chensenlin.cn/posts/60544/</id>
    <published>2018-03-31T15:49:04.000Z</published>
    <updated>2018-03-31T15:50:29.459Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>下载文件，存储数据；</p><p>MySQL的基本使用，发送邮件。</p><a id="more"></a><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>网络数据的采集，最本质的东西还是数据，我们爬取的数据是需要存储的。</p><h4 id="媒体文件"><a href="#媒体文件" class="headerlink" title="媒体文件"></a>媒体文件</h4><p>存储媒体文件有两种主要的方式:只获取文件 <code>URL</code> 链接，或者直接把源文件下载下来。</p><p>可以通过媒体文件所在的<code>URL</code> 链接直接引用它。这样做的优点如下:</p><ul><li>爬虫运行得更快，耗费的流量更少，因为只要链接，不需要下载文件;</li><li>可以节省很多存储空间，因为只需要存储<code>URL</code>链接就可以;</li><li>存储<code>URL</code>的代码更容易写，也不需要实现文件下载代码;</li><li>不下载文件能够降低目标主机服务器的负载。</li></ul><p>于此同时还会有一些缺点：</p><ul><li>网站防盗链的问题，会带来很多的麻烦；</li><li>自主性较差，因为文件在别人的服务器上，可支配性差；</li><li>链接可能是会变化的，失效的链接数增加。</li><li>….</li></ul><p>下载文件的方法也很简单，在<code>Python 3.x</code> 版本中,<code>urllib.request.urlretrieve</code>可以根据文件的 <code>URL</code> 下载文件;</p><p>例如我们从<code>http://pythonscraping.com</code> 下载 <code>logo</code>图片，然后在程序运行的文件夹里保存为 <code>logo.jpg</code> 文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">imageLocation = bs.find(<span class="string">'a'</span>, &#123;<span class="string">'id'</span>: <span class="string">'logo'</span>&#125;).find(<span class="string">'img'</span>)[<span class="string">'src'</span>]</span><br><span class="line">urlretrieve (imageLocation, <span class="string">'logo.jpg'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>下载文件需要注意exe的文件，木马文件等。不要在硬盘存储敏感信息，不要用管理员权限运行他。</p></blockquote><h4 id="把数据存储到CSV"><a href="#把数据存储到CSV" class="headerlink" title="把数据存储到CSV"></a>把数据存储到CSV</h4><p><code>CSV</code>(<code>Comma-Separated Values</code>，逗号分隔值)是存储表格数据的常用文件格式。关于<code>CSV</code>格式的文件不做过多的介绍，自行去了解一下。</p><p><code>Python</code>的<code>csv</code>库可以创建或者修改<code>CSV</code>文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv </span><br><span class="line"></span><br><span class="line">csvFile = open(<span class="string">"./demo.csv"</span>,<span class="string">"我+"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    writer = csv.writer(csvFile)</span><br><span class="line">    writer.writerow((<span class="string">'number'</span>, <span class="string">'number plus 2'</span>, <span class="string">'number times 2'</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> rang(<span class="number">10</span>):</span><br><span class="line">        writer.writerow((i,i+<span class="number">2</span>,I*<span class="number">2</span>))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    csvFile.close()</span><br></pre></td></tr></table></figure><blockquote><p>如果文件不存在就会创建demo.csv。</p></blockquote><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p><code>MySQL</code>是目前最受欢迎的开源关系型数据库管理系统。因为它受众广泛，免费，开箱即用，所以它也是网络数据采集项目中常用的数据库。</p><p>我采用的是<code>Mac</code>的平台，可以直接下载安装安装也可以通过包管理器(例如<code>homebrew</code>)安装。</p><blockquote><p>官网下载地址：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/</a></p></blockquote><p>其他的平台可以去官网查看安装详情，作为一个改变世界的程序猿，安装软件应该不是问题。</p><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><p>创建数据库:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> demo;</span><br></pre></td></tr></table></figure><p>使用数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> demo;</span><br></pre></td></tr></table></figure><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span>(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    sex tinyint(<span class="number">1</span>),</span><br><span class="line">    creatime <span class="keyword">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>和数据库不同，<code>MySQL</code> 数据表必须至少有一列，否则不能创建。为了在 <code>MySQL</code> 里定义字段(数据列)，你必须在 <code>CREATE TABLE &lt;tablename&gt;</code> 语句后面，把字段的定义放进一个带括号的、内部由逗号分隔的列表。</p><p>插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">name</span>, sex) <span class="keyword">VALUES</span> (<span class="string">"name"</span>, <span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p>查询数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">LIKE</span> <span class="string">"%chensenlin.cn%"</span></span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELELT FROM user WHERE id = 1</span><br></pre></td></tr></table></figure><p>更新数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'chensenlin'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">66</span></span><br></pre></td></tr></table></figure><blockquote><p>特别强调：更新或者删除一定要加条件！否则就说灾难，哈哈哈</p></blockquote><h5 id="与Python整合"><a href="#与Python整合" class="headerlink" title="与Python整合"></a>与Python整合</h5><p><code>Python</code>没有内置的<code>MySQL</code> 支持工具。不过，有很多开源的库可以用来与 <code>MySQL</code>做交互，<code>Python 2.x</code>和<code>Python 3.x</code>版本都支持。最有名的一个库就是<code>PyMySQL(https://github.com/PyMySQL/PyMySQL)</code>。</p><p>安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> PyMySQL</span><br></pre></td></tr></table></figure><p>基本使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, unix_socket=<span class="string">'/tmp/mysql.sock'</span>,user=<span class="string">'root'</span>, passwd=root, db=<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">"USE demo"</span>)</span><br><span class="line">cur.execute(<span class="string">"SELECT * FROM user WHERE id = 1"</span>) print(cur.fetchone())</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h4><p><code>Python</code>发送一封邮件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line">msg = MIMEText(<span class="string">"邮件正文内容"</span>)</span><br><span class="line">msg[<span class="string">'Subject'</span>] = <span class="string">"这是一个测试有奖主题"</span></span><br><span class="line">msg[<span class="string">'From'</span>] = <span class="string">"fore@gmail.com"</span></span><br><span class="line">msg[<span class="string">'To'</span>] = <span class="string">"hellosenlin@sina.cn"</span></span><br><span class="line">s = smtplib.SMTP(<span class="string">'localhost'</span>)</span><br><span class="line">s.send_message(msg)</span><br><span class="line">s.quit()</span><br></pre></td></tr></table></figure><p>与网页通过<code>HTTP</code>协议传输一样，邮件是通过<code>SMTP</code>(<code>Simple Mail Transfer Protocol</code>，简单邮件传输协议)传输的。而且,和网络服务器的客户端(浏览器)处理那些通过 <code>HTTP</code> 协议传输的网页一样。</p><p>可以将其封装成函数作为发送邮件定时使用等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;下载文件，存储数据；&lt;/p&gt;
&lt;p&gt;MySQL的基本使用，发送邮件。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之使用API|第03天</title>
    <link href="https://chensenlin.cn/posts/37773/"/>
    <id>https://chensenlin.cn/posts/37773/</id>
    <published>2018-03-30T14:12:44.000Z</published>
    <updated>2018-03-30T14:13:31.290Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本节比较简单，有开发经验可以跳过。</p><a id="more"></a><h3 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h3><h4 id="API概述"><a href="#API概述" class="headerlink" title="API概述"></a>API概述</h4><p>百度百科关于<code>API</code>的解释：<code>API</code>（<code>Application Programming Interface</code>,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><p>说明这就是接口，不受其语言的限制都可以调用。</p><h4 id="API通用规则"><a href="#API通用规则" class="headerlink" title="API通用规则"></a>API通用规则</h4><p><code>API</code>用一套非常标准的规则生成数据，而且生成的数据也是按照非常标准的方式组织的。</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>利用<code>HTTP</code>请求网络服务器信息的方法有很多种，这里举例常用的四种：<br><code>GET</code>：从服务器获取数据的方法；<br><code>POST</code>：向服务器发送数据。例如提交表单到服务器处理的逻辑；<br><code>PUT</code>：主要用来更新一个对象或信息，一般很少用到；<br><code>DELETE</code>：从服务器删除一个对象。</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p><code>API</code>并不是随时或者谁都可以调用的。为了保证服务器上的安全或者减少资源等目的，我们会对请求的方法或者次数有限制。通常情况会对接口进行验证，一般的验证方法是令牌（<code>token</code>），这个令牌一般是用户登录或者注册的时候从服务器生成然后给用户。令牌可以是可变的，也可以是不可变的。令牌除了在 <code>URL</code>链接中传递，还会通过请求头里的 <code>cookie</code> 把用户信息传递给服务器。<br>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">token = <span class="string">"&lt;your api key&gt;"</span></span><br><span class="line">webRequest = urllib.request.Request(<span class="string">"http://myapi.com"</span>, headers=&#123;<span class="string">"token"</span>:token&#125;)</span><br><span class="line">html = urlopen(webRequest)</span><br></pre></td></tr></table></figure><h4 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h4><p>服务器响应的数据格式一般是<code>JSON</code>或者<code>XML</code>。目前<code>JSON</code>比较多，原因有很多，其中一点就是<code>JSON</code> 文件比完整的 <code>XML</code> 格式小；加上网络技术的改变，后端的语言越来越多，基本上都可以实现接口。</p><p><code>API</code>调用的语法也有不同，但也有约定俗成的准则。例如，当使用 <code>GET</code>请求获取数据时，用<code>URL</code> 路径描述你要获取的数据范围，查询参数可以作为过滤器或附加请求使用;也有许多 <code>API</code> 会通过文件路径(path)的形式指定 <code>API</code> 版本、数据格式和其他属性；还有一些 <code>API</code>会通过请求参数<code>(request parameter)</code>的形式指定数据格式和 <code>API</code> 版本:</p><p>市面上比较多的公司或者网站都有自己的公开的接口，例如推特，<code>Google</code>等。</p><h4 id="解析JSON数据"><a href="#解析JSON数据" class="headerlink" title="解析JSON数据"></a>解析JSON数据</h4><p>例如我们采用<code>GET</code>的方式请求<code>http://freegeoip.net/json/50.78.253.58</code>,查看返回的数据。返回为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"ip"</span>:<span class="string">"50.78.253.58"</span>,<span class="attr">"country_code"</span>:<span class="string">"US"</span>,<span class="attr">"country_name"</span>:<span class="string">"United States"</span>,<span class="attr">"region_code"</span>:<span class="string">"MA"</span>,<span class="attr">"region_name"</span>:<span class="string">"Massachusetts"</span>,<span class="attr">"city"</span>:<span class="string">"Boston"</span>,<span class="attr">"zip_code"</span>:<span class="string">"02116"</span>,<span class="attr">"time_zone"</span>:<span class="string">"America/New_York"</span>,<span class="attr">"latitude"</span>:<span class="number">42.3496</span>,<span class="attr">"longitude"</span>:<span class="number">-71.0746</span>,<span class="attr">"metro_code"</span>:<span class="number">506</span>&#125;</span><br></pre></td></tr></table></figure><p>现在我们采用<code>Python</code>来解析。<code>JSON</code>是<code>Python</code>的标准库，不需要额外安装。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(ipAddress)</span>:</span></span><br><span class="line">    res = urlopen(<span class="string">"http://freegeoip.net/json/"</span>+ipAddress).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    resJson = json.loads(res)</span><br><span class="line">    <span class="keyword">return</span> resJson.get(<span class="string">'country_code'</span>)</span><br><span class="line"></span><br><span class="line">print(getCountry(<span class="string">"22.18.53.22"</span>))</span><br></pre></td></tr></table></figure><blockquote><p>Python 使用了一种更加灵活的方式，把 JSON 转换成字典，JSON 数组转换成列表,JSON 字符串转换成 Python 字符串。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节比较简单，有开发经验可以跳过。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之创建爬虫|第02天</title>
    <link href="https://chensenlin.cn/posts/38026/"/>
    <id>https://chensenlin.cn/posts/38026/</id>
    <published>2018-03-29T11:43:03.000Z</published>
    <updated>2018-03-29T11:44:46.614Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>单个域名和网站的采集；</p><p>互联网采集和用Scrapy采集初步介绍。 </p><a id="more"></a><h3 id="开始采集"><a href="#开始采集" class="headerlink" title="开始采集"></a>开始采集</h3><p>网络爬虫是可以根据递归方式。为了找到<code>URL</code> 链接，它们必须首先获取网页内容，检查这个页面的内容，再寻找另一个 <code>URL</code>，然后获取 <code>URL</code>对应的网页内容，不断循环这一过程。</p><h4 id="遍历单个域名"><a href="#遍历单个域名" class="headerlink" title="遍历单个域名"></a>遍历单个域名</h4><p>以抓取维基百科的<code>Kevin Baco</code>为例，实现简单的数据爬取。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://en.wikipedia.org/wiki/Kevin_Bacon'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">'a'</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> link.attrs:</span><br><span class="line">        print(link.attrs[<span class="string">'href'</span>])</span><br></pre></td></tr></table></figure><p>上述代码就获取维基百科网站的任何页面并提取页面链接。去掉我们不需要的词条，进行改进获取词条链接。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen </span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://en.wikipedia.org/wiki/Kevin_Bacon'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> bs.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>:<span class="string">'bodyContent'</span>&#125;).find_all(</span><br><span class="line">    <span class="string">'a'</span>, href=re.compile(<span class="string">'^(/wiki/)((?!:).)*$'</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> link.attrs:</span><br><span class="line">        print(link.attrs[<span class="string">'href'</span>])</span><br></pre></td></tr></table></figure><p>如果我们要做到一个函数<code>getLinks</code>，可以用维基百科词条<code>/wiki/&lt;词条名称&gt;</code>形式的<code>URL</code>链接作为参数，然后以同样的形式返回一个列表，里面包含所有的词条 <code>URL</code> 链接。一个主函数，以某个起始词条为参数调用<code>getLinks</code>，再从返回的<code>URL</code>列表里随机选择一个词条链接，再调用 <code>getLinks</code>，直到我们主动停止，或者在新的页面上没有词条链接了，程序才停止运行。<br>完善后代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLinks</span><span class="params">(articleUrl)</span>:</span></span><br><span class="line">    html = urlopen(<span class="string">'http://en.wikipedia.org&#123;&#125;'</span>.format(articleUrl))</span><br><span class="line">    bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="keyword">return</span> bs.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>:<span class="string">'bodyContent'</span>&#125;).find_all(<span class="string">'a'</span>, href=re.compile(<span class="string">'^(/wiki/)((?!:).)*$'</span>))</span><br><span class="line"></span><br><span class="line">links = getLinks(<span class="string">'/wiki/Kevin_Bacon'</span>)</span><br><span class="line"><span class="keyword">while</span> len(links) &gt; <span class="number">0</span>:</span><br><span class="line">    newArticle = links[random.randint(<span class="number">0</span>, len(links)<span class="number">-1</span>)].attrs[<span class="string">'href'</span>]</span><br><span class="line">    print(newArticle)</span><br><span class="line">    links = getLinks(newArticle)</span><br></pre></td></tr></table></figure><h4 id="遍历整个网络"><a href="#遍历整个网络" class="headerlink" title="遍历整个网络"></a>遍历整个网络</h4><p>采集整个网站，那是非常耗费内存资源的过程，尤其是处理大型网站时，最合适的工具就是用一个数据库来储存采集的资源。</p><p>遍历整个网络的数据好处：可以生产网站地图，收集网站数据等。但是一般不会消耗大量的内存资源去做采集，本节的意义不大。</p><h4 id="通过互联网采集"><a href="#通过互联网采集" class="headerlink" title="通过互联网采集"></a>通过互联网采集</h4><p>建立网络地图，需要从一个链接跳转到另一个链接，逐步建立网站的地图信息，从而达到一个合适的网站地图，于此同时我们也不能忽略外链，从一个链接跳转到另一个链接的场景也会时有发生。相比之前的单域名采集，互联网采集的难度要高很多，所以，要求我们的寻找信息的方式和采集信息的方式都应该极具灵活性，以此达到理想的采集效果。</p><p>在做数据采集之前最好能够确定自己采集的内容，明确目标，然后根据目标的展示形式去分析，该网站是否会跳转其他的链接，是否需要继续采集等各个因素。</p><p>如果采集一个网站，有时候也会考虑到网络重定向的问题，例如我的个人博客原来链接是：<code>https://forestfdemo.github.io</code>,但是我做了一个网络的重定向，我将<code>https://chensenlin.cn</code>，重定向到原来的链接，这样无论是访问哪一个链接其本质都跳转到原来的链接，此时需要了解的是网络重定向的时候，我们采集的<code>URL</code>地址会发生变化，在<code>Python3.X</code>的版本中，我们的<code>urllib</code>会帮我完成重定向的功能。</p><h4 id="用Scrapy采集"><a href="#用Scrapy采集" class="headerlink" title="用Scrapy采集"></a>用Scrapy采集</h4><p><code>Scrapy</code>就是一个可以大幅度降低我们对网页链接查找和识别工作复杂度的<code>Python</code> 库，它可以让你轻松地采集一个或多个域名的信息。</p><blockquote><p>目前<code>Scrapy</code>仅支持<code>Python 2.7</code>，还不支持 <code>Python 3.x</code>。</p></blockquote><p>利用<code>Scrapy</code>进行爬虫项目还是有一些设置，我们可以采用<a href="http://scrapy.org/download/" target="_blank" rel="noopener">官网</a>下载，也可以采用<code>pip</code>进行安装，检验安装的方法在之前的<code>Python</code>基础系列的文章有提到过。这里不做过多的阐述。</p><p>创建一个项目：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  python scrapy startproject demourl</span><br><span class="line">New Scrapy project <span class="string">'demourl'</span>, <span class="keyword">using</span> template <span class="built_in">directory</span> <span class="string">'/usr/local/lib/python3.6/site-packages/scrapy/templates/project'</span>, created <span class="keyword">in</span>:</span><br><span class="line">    /Users/demo/Project/python/demourl</span><br><span class="line"></span><br><span class="line">You can <span class="built_in">start</span> your <span class="keyword">first</span> spider <span class="keyword">with</span>:</span><br><span class="line">    cd demourl</span><br><span class="line">    scrapy genspider example example.com</span><br></pre></td></tr></table></figure><p>我们查看一下目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  demourl tree ./</span><br><span class="line">./</span><br><span class="line">├── [drwxr-xr-x]  demourl</span><br><span class="line">│   ├── [-rw-r--r--]  __init__.py</span><br><span class="line">│   ├── [drwxr-xr-x]  __pycache__</span><br><span class="line">│   ├── [-rw-r--r--]  items.py</span><br><span class="line">│   ├── [-rw-r--r--]  middlewares.py</span><br><span class="line">│   ├── [-rw-r--r--]  pipelines.py</span><br><span class="line">│   ├── [-rw-r--r--]  settings.py</span><br><span class="line">│   └── [drwxr-xr-x]  spiders</span><br><span class="line">│       ├── [-rw-r--r--]  __init__.py</span><br><span class="line">│       └── [drwxr-xr-x]  __pycache__</span><br><span class="line">└── [-rw-r--r--]  scrapy.cfg</span><br><span class="line"></span><br><span class="line">4 directories, 7 files</span><br></pre></td></tr></table></figure><p>关于<code>Scrapy</code>的内容我们后续逐一介绍，大家可以点击关注，及时收到后续更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;单个域名和网站的采集；&lt;/p&gt;
&lt;p&gt;互联网采集和用Scrapy采集初步介绍。 &lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之HTML解析|第01天</title>
    <link href="https://chensenlin.cn/posts/40836/"/>
    <id>https://chensenlin.cn/posts/40836/</id>
    <published>2018-03-28T11:12:35.000Z</published>
    <updated>2018-03-28T11:25:22.160Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>BeautifulSoup使用和<code>find()</code>和<code>find_all()</code>；</p><p>正则表达式和<code>BeautifulSoup</code>结合使用；</p><p>Lambda表达式介绍。</p><a id="more"></a><h3 id="复杂的HTML解析"><a href="#复杂的HTML解析" class="headerlink" title="复杂的HTML解析"></a>复杂的HTML解析</h3><h4 id="思考后确定获取目标"><a href="#思考后确定获取目标" class="headerlink" title="思考后确定获取目标"></a>思考后确定获取目标</h4><p>假如我们确定一个我们需要采集的目标信息，可能是一组统计数据、或者一个  <code>title</code>等，但是此时这个目标可能藏的比较深，可能在第20层的标签里面，你可能会用下面的方式去抓取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bsObj.findAll(<span class="string">"table"</span>)[<span class="number">4</span>].findAll(<span class="string">"tr"</span>)[<span class="number">2</span>].find(<span class="string">"td"</span>).findAll(<span class="string">"div"</span>)[<span class="number">1</span>].find(<span class="string">"a"</span>)</span><br></pre></td></tr></table></figure><p>同时还有一个问题，加入网站发生细微的变化。我们的代码不仅影响美观还回影响整个爬虫网络。这样的情况我们应该怎么做呢？</p><p>尝试“打印此页”的链接，或者看看该网页的移动版是够更加友好，请求的时候将请求头设置为移动端的状态。</p><p>寻找隐藏在<code>JavaScript</code>文件里的信息。网站的某些数据可能隐藏在<code>JavaScript</code>文件中。</p><p>可以试试其他的网站资源。</p><h4 id="BeautifulSoup使用"><a href="#BeautifulSoup使用" class="headerlink" title="BeautifulSoup使用"></a>BeautifulSoup使用</h4><p><a href="https://www.jianshu.com/p/9c64aff5d144" target="_blank" rel="noopener">上一篇</a>我们学会了如何安装和运行<code>BeautifulSoup</code>,现在我们逐步深入，学习通过属性查找标签的方法、标签组、标签解析树的导航过程。</p><p>每个网站都有层叠样式表(也就是我们说的<code>CSS</code>)，它对于爬虫而言有一个最大的好处就是能够让<code>HTML</code>元素表现出差异化。</p><p>例如某些标签是下面这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>爬虫可以根据<code>class</code>的属性值去区分不同的标签。例如：我们可以只抓取红色的字。</p><p>下面我们以这个<a href="http://www.pythonscraping.com/pages/warandpeace.html" target="_blank" rel="noopener">网站</a>为例来创建一个网络爬虫。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-b9f09715d532fe82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网站解释说明"></p><p>通过上图可以知道红色的为对话正文部分，绿色为姓名的信息。现在可以创建一个简单的<code>BeautifulSoup</code>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html  = urlopen(<span class="string">" http://www.pythonscraping.com/pages/warandpeace.html"</span>)</span><br><span class="line">bsObj = BeautifulSoup(html,<span class="string">'lxml'</span>) <span class="comment"># 获取了html的所有信息</span></span><br></pre></td></tr></table></figure><p>通过<code>BeautifulSoup</code>对象，我们可以用<code>findAll</code>函数抽取只包含在<code>&lt;span class=&quot;green&quot;&gt;&lt;/ span&gt;</code>标签里的文字，这样就会得到一个人物名称的 <code>Python</code>列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nameList = bsObj.find_all(<span class="string">'span'</span>,&#123;<span class="string">"class"</span>:<span class="string">"green"</span>&#125;) <span class="comment">#获取span标签的class为green的所有姓名</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line"><span class="comment"># 遍历取值</span></span><br><span class="line">    print(name.get_text())</span><br></pre></td></tr></table></figure><p>然后运行得到的就是所有的姓名列表。</p><p><code>get_text()</code>使用场景主要是处理一个包含许多超链接、段落和标 签的大段源代码，它就会吧这些超链接和段落以及标签都清理掉。也就是说它会把你正在处理的 <code>HTML</code>文档中所有的标签都清除，然后返回一个只包含文字的字符串。</p><h5 id="BeautifulSoup的find-和find-all"><a href="#BeautifulSoup的find-和find-all" class="headerlink" title="BeautifulSoup的find()和find_all()"></a>BeautifulSoup的<code>find()</code>和<code>find_all()</code></h5><p><code>BeautifulSoup</code>里的<code>find()</code>和<code>find_all()</code>可能是你最常用的两个函数。借助它们，你可以通过标签的不同属性轻松地过滤<code>HTML</code>页面,查找需要的标签组或单个标签。</p><blockquote><p>BeautifulSoup文档地址：<a href="http://beautifulsoup.readthedocs.io" target="_blank" rel="noopener">http://beautifulsoup.readthedocs.io</a></p></blockquote><p><code>find()</code>函数语法：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find( <span class="name">name</span> , attrs , recursive , string , **kwargs )</span><br></pre></td></tr></table></figure><p><code>find_all()</code>函数语法：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_all( <span class="name">name</span> , attrs , recursive , string , **kwargs )</span><br></pre></td></tr></table></figure><p>搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件。</p><p><code>name</code>参数可以查找所有名字为<code>name</code>的tag,字符串对象会被自动忽略掉。搜索 <code>name</code>参数的值可以使任一类型的过滤器,字符串,正则表达式,列表,方法等。</p><p><code>attrs</code>参数定义一个字典参数来搜索包含特殊属性的<code>tag</code>。</p><p>通过<code>string</code>参数可以搜搜文档中的字符串内容,与<code>name</code>参数的可选值一样。</p><p><code>keywork</code>参数：如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字<code>tag</code>的属性来搜索。</p><p><code>find_all()</code>方法返回全部的搜索结构,如果文档树很大那么搜索会很慢。如果我们不需要全部结果,可以使用 <code>limit</code>参数限制返回结果的数量.效果与<code>SQL</code>中的<code>limit</code>关键字类似,当搜索到的结果数量达到<code>limit</code>的限制时,就停止搜索返回结果。</p><blockquote><p>find 等价于 find_all 的 limit 等于 1 ;</p></blockquote><p>调用<code>tag</code>的 <code>find_all()</code>方法时,<code>Beautiful Soup</code>会检索当前<code>tag</code>的所有子孙节点,如果只想搜索<code>tag</code>的直接子节点,可以使用参数 <code>recursive=False</code>。</p><h5 id="其他BeautifulSoup对象"><a href="#其他BeautifulSoup对象" class="headerlink" title="其他BeautifulSoup对象"></a>其他BeautifulSoup对象</h5><p><code>NavigableString</code>对象：表示标签里面的文字；<br><code>Comment</code>对象：用来查找<code>HTML</code>文档的注释标签。例如：<code>&lt;!-- 注释 --&gt;</code></p><h5 id="导航树"><a href="#导航树" class="headerlink" title="导航树"></a>导航树</h5><p>导航树解决的问题是通过标签在文档中的位置来查找标签。以该<a href="http://www.pythonscraping.com/pages/page3.html" target="_blank" rel="noopener">网站</a>为例。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-b29a53fb1eea642f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="示例网站和源码展示"></p><p>第一类，处理子标签和其他后代标签。</p><p>子标签就是一个父标签的下一级，而后代标签是指一个父标签下面所有级别的标签。所有的子标签都是后代标签，但不是所有的后代标签都是子标签。例如：<br><code>tr</code>标签是<code>tabel</code>标签的子标签，而 <code>tr、th、td、img</code>和 <code>span</code>标签都是 <code>tabel</code> 标签的后代标签。</p><p>一般情况下，<code>BeautifulSoup</code>函数总是处理当前标签的后代标签。</p><p>例如根据示例网站我们需要找到文档中第一个<code>div</code>标签，然后获取这个<code>div</code>后代里面所有的<code>img</code>标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> bs.find(<span class="string">'table'</span>,&#123;<span class="string">'id'</span>:<span class="string">'giftList'</span>&#125;).children:</span><br><span class="line">    print(child)</span><br></pre></td></tr></table></figure><p>输出的结果就是打印 <code>giftList</code> 表格中所有产品的数据行。</p><p>第二类，处理兄弟标签。</p><p><code>BeautifulSoup</code>的<code>next_siblings()</code>函数可以让收集表格数据成为简单的事情，尤其是处理带标题行的表格:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> bs.find(<span class="string">'table'</span>, &#123;<span class="string">'id'</span>:<span class="string">'giftList'</span>&#125;).tr.next_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><p>输出的结果是打印产品列表里的所有行的产品，第一行表格标题除外。</p><p>第三类，父标签处理。</p><p>抓取网页的时候我们抓取父标签的情况比较少，但是不排除有这样的情况存在。例如，我们要观察网页的内容。这里就需要连个两个函数<code>parent</code> 和 <code>parents</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span>  urllib.requesturllib.  <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">print(bs.find(<span class="string">'img'</span>,&#123;<span class="string">'src'</span>:<span class="string">'../img/gifts/img1.jpg'</span>&#125;).parent.previous_sibling.get_text())</span><br></pre></td></tr></table></figure><p>上述代码的结果是<code>img1</code>图片的价格。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-c7d9e1d05807408e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片价格信息"></p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>正则表达式个人认为比较简单，就跟学习英语一样，只要不断的去用就了解了。贴上原图可查阅即可。关于正则的相关基础知识可以看看我推荐的网站了解一下，或者可以关注我，后续专门写一个正则表达式入门的文章。</p><blockquote><p>正则表达式30分钟入门教程：<a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">https://deerchao.net/tutorials/regex/regex.htm</a><br>正则表达式书籍：<a href="https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/" target="_blank" rel="noopener">https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/</a></p></blockquote><p>或者用下面的这张图，然后跟着去套一些例子。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-b304361decaa8763.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="正则表达式常用符号"></p><h4 id="正则表达式和BeautifulSoup"><a href="#正则表达式和BeautifulSoup" class="headerlink" title="正则表达式和BeautifulSoup"></a>正则表达式和BeautifulSoup</h4><p>结合正则表达式，来实现一下具体的例子，可能更容易理解一些。我们获取刚刚<a href="">网站</a>的所有图片，首先打开源码分析一下页面。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-398aedc12f2fbc3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="所有图片路径"></p><p>我们发现所有的图片都是以<code>../img/gifts/img</code>开头，以<code>.jpg</code> 结尾。那么就用正则去匹配一下。匹配规则如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">\.</span><span class="symbol">\.</span><span class="symbol">\/</span>img<span class="symbol">\/</span>gifts/img.*<span class="symbol">\.</span>jpg</span><br></pre></td></tr></table></figure><p>结合<code>BeautifulSoup</code>对象我们可以尝试用代码试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">images = bs.find_all(<span class="string">'img'</span>, &#123;<span class="string">'src'</span>:re.compile(<span class="string">'\.\.\/img\/gifts/img.*\.jpg'</span>)&#125;)</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images: </span><br><span class="line">    print(image[<span class="string">'src'</span>])</span><br></pre></td></tr></table></figure><p>运行的结果：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  url python pareten2.py</span><br><span class="line">../img/gifts/img1.jpg</span><br><span class="line">../img/gifts/img2.jpg</span><br><span class="line">../img/gifts/img3.jpg</span><br><span class="line">../img/gifts/img4.jpg</span><br><span class="line">../img/gifts/img6.jpg</span><br></pre></td></tr></table></figure><p>这就是网站的所有图片的相对路径，以后可以用这样的方法去匹配视频网站的路径，然后下载啦。</p><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><p>在网络数据采集时你经常不需要查找标签的内容，而是需要查找标签属性。比如标签 <code>&lt;a&gt;</code>指向 的 <code>URL</code> 链接包含在 <code>href</code>属性中，或者 <code>&lt;img&gt;</code>标签的图片文件包含在 <code>src</code> 属性中。</p><p>对于一个标签对象，可以用<code>myTag.attrs</code>获取它的全部属性,要注意这行代码返回的是一个 <code>Python</code> 字典对象，可以获取和操作这些属性。例如要获取图片的资源位置 <code>src</code>，可以用<code>myImgTag.attrs[&quot;src&quot;]</code>获取。</p><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><p><code>Lambda</code>表达式本质上是一个函数，可以作为其他函数的变量使用;也就是说，一个函数不是定义成 <code>f(x, y)</code>，而是定义成 <code>f(g(x), y)</code>，或 <code>f(g(x), h(x))</code> 的形式。</p><p><code>BeautifulSoup</code> 允许我们把特定函数类型当作 <code>findAll</code> 函数的参数。唯一的限制条件是这些函数必须把一个标签作为参数且返回结果是布尔类型。<code>BeautifulSoup</code>用这个函数来评估它遇到的每个标签对象，最后把评估结果为“真”的标签保留，把其他标签剔除。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;BeautifulSoup使用和&lt;code&gt;find()&lt;/code&gt;和&lt;code&gt;find_all()&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;正则表达式和&lt;code&gt;BeautifulSoup&lt;/code&gt;结合使用；&lt;/p&gt;
&lt;p&gt;Lambda表达式介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之创建爬虫|第00天</title>
    <link href="https://chensenlin.cn/posts/26519/"/>
    <id>https://chensenlin.cn/posts/26519/</id>
    <published>2018-03-27T09:05:32.000Z</published>
    <updated>2018-03-27T09:43:22.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>网络相关知识；</p><p><code>BeautifulSoup</code>介绍和使用。</p><a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>开始本系列的文章时，可能你需要了解一下<code>Python</code>的基础知识，熟悉<code>Python</code>的基本编程，了解一些网络知识等。如果不是特别了解，可以看看我的<code>Python</code>基础系列文章。</p><h3 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h3><h4 id="网络链接"><a href="#网络链接" class="headerlink" title="网络链接"></a>网络链接</h4><p>网络浏览器是一个非常有用的应用，它创建信息的数据包，发送它们，然后把你获取的数据解释成漂亮的图像、声音、视频和文字。但是，网络浏览器就是代码，而代码是可以分解的，可以分解成许多基本组件，可重写、重用，以及做成我们想要的任何东西。网络浏览器可以让服务器发送一些数据，到那些对接无线(或有线)网络接口的应用上， 但是许多语言也都有实现这些功能的库文件。关于浏览器的相关介绍，可以参考维基关于<a href="https://zh.wikipedia.org/wiki/网页浏览器" target="_blank" rel="noopener">浏览器</a>的官方介绍。</p><p><code>Python</code>实现抓取网页。新建文件为<code>urllib_request.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找 Python 的 request 模块(在 urllib 库里面)，并导入 urlopen 函数</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">html = urlopen(<span class="string">"http://www.baidu.cn"</span>)</span><br><span class="line">print(html.read())</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python urllib_request.py</span><br></pre></td></tr></table></figure><p>在进行数据抓取时需要保证能够与该网页的连通性，可以尝试用<code>ping</code>的方式进行测试。这里我采用的是抓取百度的首页数据。返回的是百度首页的全部<code>HTML</code>代码。</p><p><code>urllib</code> 是<code>Python</code>的标准库，包含了从网络请求数据，处理<code>cookie</code>，甚至改变像请求头和用户代理这些元数据的函数。<code>urlopen</code>用来打开并读取一个从网络获取的远程对象。<code>urlib</code>的<a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener">文档地址</a>。</p><blockquote><p>标准库：不用额外安装的库就可以直接运行。</p></blockquote><h4 id="BeautifulSoup简介"><a href="#BeautifulSoup简介" class="headerlink" title="BeautifulSoup简介"></a>BeautifulSoup简介</h4><p><code>BeautifulSoup</code>通过定位<code>HTML</code>标签来格式化和组织复杂的网络信息，用简单易用的<code>Python</code>对象为我们展现<code>XML</code>结构信息。</p><h5 id="安装BeautifulSoup"><a href="#安装BeautifulSoup" class="headerlink" title="安装BeautifulSoup"></a>安装BeautifulSoup</h5><p><code>BeautifulSoup</code>并不是标准库，所以需要通过安装后来使用。本人采用<code>Mac</code>的系统，同时已经安装了<code>pip</code>，所以直接可以采用<code>pip</code>来安装即可，不过需要注意版本问题。</p><p><code>Mac</code>安装<code>BeautifulSoup</code>方法：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> beautifulsoup4</span><br></pre></td></tr></table></figure><p>如果没有报错可以验证一下是否安装成功。验证的方式有很多。这里我举例两种最常用的验证方式。</p><p>第一种验证方式：终端直接查看包是否存在。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze | grep beautifulsoup4</span><br></pre></td></tr></table></figure><p>如果输出：<code>beautifulsoup4==4.6.0</code>,表示已经有了，只不过版本可能会不一致，但是模块名是一致的。</p><p>第二种验证方式：进入<code>python</code>界面，然后倒入某一个函数看看是否报错，或者直接写代码执行一下。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  day0 python</span><br><span class="line">Python 3.6.4 (default, Mar  1 2018, 18:36:50)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">from</span> bs4 import BeautifulSoup</span><br><span class="line">&gt;&gt;&gt; exit();</span><br></pre></td></tr></table></figure><p>综上所述，两种验证方式都通过了，说明现在已经安装完成且可以使用了。</p><blockquote><p>这里的安装是全局安装，如果在实际开发中不同的项目可能会有不同的环境或者版本要求，甚至会产生冲突，现在就就需要的能够支持多种的环境的需求，可以用虚拟环境保存库文件。安装一个<code>Python</code>虚拟环境来分而治之。具体的使用方法这里不做过多阐述，后续会有对应的更新，你可以关注我就可以收到更新提示。</p></blockquote><h5 id="运行BeautifulSoup"><a href="#运行BeautifulSoup" class="headerlink" title="运行BeautifulSoup"></a>运行BeautifulSoup</h5><p>结合之前抓取百度首页的代码，现在针对某网站的某文件进行抓取。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>) </span><br><span class="line">bsObj = BeautifulSoup(html.read(),<span class="string">'lxml'</span>)</span><br><span class="line">print(bsObj.h1)</span><br></pre></td></tr></table></figure><p>运行后就得到了该网页的标题。如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  day0 <span class="keyword">python</span> request.<span class="keyword">py</span></span><br><span class="line"><span class="symbol">&lt;h1&gt;</span>An Interesting Title&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>这就是根据网页的源码得到了该网页的标题。未来可以通过正则等方式获取。</p><h5 id="可靠的网络连接"><a href="#可靠的网络连接" class="headerlink" title="可靠的网络连接"></a>可靠的网络连接</h5><p>数据采集的问题在于保证程序与目标网站的服务器一直保持通信，否则的话爬虫就不会继续工作了。这个时候就需要进行网络异常处理。</p><p>例如我们上一节的代码中有下面一行代码：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">html</span> = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>)</span><br></pre></td></tr></table></figure><p>这里面会出现两个问题，服务器不存在或者这个页面不存在。也就是要么<code>404</code>,要么<code>500</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    html = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>)</span><br><span class="line"><span class="keyword">except</span> HTTPError <span class="keyword">as</span> e: </span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 返回空值，中断程序，或者执行另一个方案 </span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 程序继续。注意:如果你已经在上面异常捕捉那一段代码里返回或中断(break)， </span></span><br><span class="line">    <span class="comment"># 那么就不需要使用else语句了，这段代码也不会执行</span></span><br></pre></td></tr></table></figure><p>也有可能获取的时候，该html页面就是一个空的，是不是又需要增加判断呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> html <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">"URL is not found"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 程序继续</span></span><br></pre></td></tr></table></figure><p>获取到了内容，是不是需要继续判断一下该内容是否为我们所需要的内容呢？所以需要增加一个检查标签是否存在判断。</p><p>最后我们的判断是不是看起来代码特别的累赘，我们简单整理一下后，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getTitle</span><span class="params">(url)</span>:</span> </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            html = urlopen(url) </span><br><span class="line">        <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span> </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bsObj = BeautifulSoup(html.read())</span><br><span class="line">            title = bsObj.body.h1 </span><br><span class="line">        <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> title</span><br><span class="line">    </span><br><span class="line">title = getTitle(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>) </span><br><span class="line"><span class="keyword">if</span> title == <span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">"Title could not be found"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(title)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;网络相关知识；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BeautifulSoup&lt;/code&gt;介绍和使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python常用函数整理</title>
    <link href="https://chensenlin.cn/posts/26518/"/>
    <id>https://chensenlin.cn/posts/26518/</id>
    <published>2018-03-27T03:32:52.000Z</published>
    <updated>2018-03-27T03:40:34.309Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>字符串函数、集合函数、列表函数和字典函数。</p><a id="more"></a><h3 id="Python常用函数"><a href="#Python常用函数" class="headerlink" title="Python常用函数"></a>Python常用函数</h3><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>capitalize()</td><td>返回首字母的大写副本</td></tr><tr><td>find(string)</td><td>返回字符串中首次出现参数string的索引，如果字符串中没有参数string则返回-1</td></tr><tr><td>find(s,beg)</td><td>返回字符串中索引beg之后首次出现参数s的索引，如果字符串中索引beg之后没有参数s则返回-1</td></tr><tr><td>find(s,beg,end)</td><td>返回字符串中索引beg与end之间首次出现参数s的索引，如果字符串中索引beg和end之间没有参数s则返回-1</td></tr><tr><td>islower()</td><td>测试所有字符是否均为小写形式</td></tr><tr><td>isupper()</td><td>测试所有字符是否均为大写形式</td></tr><tr><td>lower()</td><td>将所有字符穿华为小写形式并返回</td></tr><tr><td>replace(old,new)</td><td>将字符串中所有子串old替换为new并返回</td></tr><tr><td>split()</td><td>将空格分隔的单词以列表的形式返回</td></tr><tr><td>split(del)</td><td>将del分隔的子串以列表的形式返回</td></tr><tr><td>strip()</td><td>删除字符串两端的空白符并返回</td></tr><tr><td>strip(string)</td><td>删除字符串中的string并返回</td></tr><tr><td>upper()</td><td>将所有字符串转化为大写形式并返回</td></tr></tbody></table><h4 id="列表函数"><a href="#列表函数" class="headerlink" title="列表函数"></a>列表函数</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>len(L)</td><td>返回列表L中的元素数量</td></tr><tr><td>max(L)</td><td>返回列表L中的最大值</td></tr><tr><td>min(L)</td><td>返回列表L中的最小值</td></tr><tr><td>sum(L)</td><td>返回列表L中所有元素的和</td></tr></tbody></table><h4 id="集合函数"><a href="#集合函数" class="headerlink" title="集合函数"></a>集合函数</h4><table><thead><tr><th>方法</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>add</td><td></td><td>往集合中添加一个元素</td></tr><tr><td>clear</td><td></td><td>移除集合中的所有元素</td></tr><tr><td>difference</td><td>-</td><td>根据一个集合中不存在于另一个集合中的元素，创建中一个新的集合</td></tr><tr><td>intersection</td><td>&amp;</td><td>根据两个集合中共有的元素，创建出一个新的集合</td></tr><tr><td>issubset</td><td>&lt;=</td><td>判断一个集合的所有元素是否都包含于另一个集合</td></tr><tr><td>issuperset</td><td>&gt;=</td><td>判断一个集合是否包含了另一个集合中的所有元素</td></tr><tr><td>remove</td><td></td><td>移除集合中的一个元素</td></tr><tr><td>symmetric_difference</td><td>^</td><td>根据两个集合中所有不存在于对方的元素，创建出一个新的集合</td></tr><tr><td>union</td><td></td><td>根据两个集合中所有的元素，创建出一个新的集合</td></tr></tbody></table><h4 id="字典函数"><a href="#字典函数" class="headerlink" title="字典函数"></a>字典函数</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>clear</td><td>清空字典内容</td></tr><tr><td>get</td><td>返回关键字所关联的值，如果指定键不存在，则返回默认值</td></tr><tr><td>keys</td><td>以列表的形式返回字典中的所有键。所得列表中的每个条目肯定是唯一的</td></tr><tr><td>items</td><td>返回（key,value）列表</td></tr><tr><td>values</td><td>以列表的形式返回字典中的所有值。所得列表中的每个条目不一定是唯一的</td></tr><tr><td>update</td><td>用另一个字典的内容对当前字典进行更新</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;字符串函数、集合函数、列表函数和字典函数。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习09天</title>
    <link href="https://chensenlin.cn/posts/1508/"/>
    <id>https://chensenlin.cn/posts/1508/</id>
    <published>2018-03-24T13:45:21.000Z</published>
    <updated>2018-03-27T05:34:49.159Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>文件处理相关，读取文件和写入文件等。</p><p>异常处理和捕获异常。</p><a id="more"></a><h3 id="文件和异常处理"><a href="#文件和异常处理" class="headerlink" title="文件和异常处理"></a>文件和异常处理</h3><h4 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h4><p>要使用文本文件中的信息，首先需要将信息读取到内存中。为此，我们可以一次性读取文件的 全部内容，也可以以每次一行的方式逐步读取。</p><h5 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h5><p>要读取文件，需要一个包含几行文本的文件。新建一个圆周率后30位的文件为例，保存为<code>pi_digits.txt</code>，同时小数点后是为换行。如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.<span class="number">1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure><p>读取该文件的<code>Python</code>文件，<code>file_reader.py</code>。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_digits.txt'</span>) <span class="keyword">as</span> file_object: </span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(rstrip(contents))</span><br></pre></td></tr></table></figure><p><code>open()</code>函数是任何方式使用文件，哪怕仅仅是打印其内容，都得先打开文件。它接受一个参数: 要打开的文件的名称。<code>Python</code>在当前执行的文件所在的目录中查找指定的文件。</p><blockquote><p>close()函数是关闭文件。</p></blockquote><p>关键字<code>with</code>在不再需要访问文件后将其关闭。<code>Python</code>方法<code>rstrip()</code>删除字符串末尾的空白。</p><p>运行结果：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.<span class="number">1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure><h5 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h5><p>当你将类似<code>pi_digits.txt</code>这样的简单文件名传递给函数<code>open()</code>时，<code>Python</code>将在当前执行的文件 (即<code>.py</code>程序文件)所在的目录中查找文件。</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure><p>通过使用绝对路径，可读取系统任何地方的文件。注意区分相对路径和绝对路径。</p><h5 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h5><p>读取文件时，常常需要检查其中的每一行:你可能要在文件中查找特定的信息，或者要以 某种方式修改文件中的文本。逐行读取可以理解为遍历、循环等逻辑。所以在读取文件时，可以采用<code>for</code>语句来实现。代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object: </span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure><h5 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h5><p>使用关键字<code>with</code>时，<code>open()</code>返回的文件对象只在<code>with</code>代码块内可用。如果要在<code>with</code>代码块外 访问文件的内容，可在<code>with</code>代码块内将文件的各行存储在一个列表中，并在<code>with</code>代码块外使用该列表:你可以立即处理文件的各个部分，也可推迟到程序后面再处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object: </span><br><span class="line">    lines = file_object.readlines()<span class="comment">#从文件中读取每一行，并将其存储在一个列表中</span></span><br><span class="line"><span class="comment">#使用一个简单 的for循环来打印lines中的各行</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure><h5 id="使用文件的内容"><a href="#使用文件的内容" class="headerlink" title="使用文件的内容"></a>使用文件的内容</h5><p>将文件读取到内存中后，就可以以任何方式使用这些数据了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object: </span><br><span class="line">    lines = file_object.readlines()<span class="comment">#从文件中读取每一行，并将其存储在一个列表中</span></span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span>       <span class="comment">#创建一个变量存贮圆周率的值</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:   <span class="comment">#使用一个循环将各行都加入pi_string，并删除每行末尾的换行符</span></span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">print(pi_string)     <span class="comment">#打印这个字符串</span></span><br><span class="line">print(len(pi_string)) <span class="comment"># 长度</span></span><br></pre></td></tr></table></figure><blockquote><p>读取文本文件时，Python将其中的所有文本都解读为字符串。如果你读取的是数字，并 要将其作为数值使用，就必须使用函数int()将其转换为整数，或使用函数float()将其转 换为浮点数。</p></blockquote><h5 id="包含一百万位的大型文件"><a href="#包含一百万位的大型文件" class="headerlink" title="包含一百万位的大型文件"></a>包含一百万位的大型文件</h5><p>对于你可处理的数据量，<code>Python</code>没有任何限制;只要系统的内存足够多，想处理多少数据都可以。</p><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><p>保存数据的最简单的方式之一是将其写入到文件中。通过将输出写入文件，即便关闭包含程序输出的终端窗口，这些输出也依然存在:可以在程序结束运行后查看这些输出，可与别人分享输出文件，还可编写程序来将这些输出读取到内存中并进行处理。</p><h5 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h5><p>要将文本写入文件，你在调用<code>open()</code>时需要提供另一个实参，告诉<code>Python</code>你要写入打开的文件。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming."</span>)</span><br></pre></td></tr></table></figure><p>打开文件时，可指定读取模 式<code>(&#39;r&#39;)</code>、写入模式<code>(&#39;w&#39;)</code>、附加模式<code>(&#39;a&#39;)</code>或让你能够读取和写入文件的模式<code>(&#39;r+&#39;)</code>。如果 你省略了模式实参，<code>Python</code>将以默认的只读模式打开文件。</p><blockquote><p>以写入(‘w’)模式打开文件时,如果指定的文件已经存在，Python将在返回文件对象前清空该文件。</p></blockquote><p><code>Python</code>只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数<code>str()</code>将其转换为字符串格式。</p><h5 id="写入多行"><a href="#写入多行" class="headerlink" title="写入多行"></a>写入多行</h5><p>函数<code>write()</code>不会在你写入的文本末尾添加换行符,如果需要写入多行就需要在每行的后面添加换行符：<code>\n</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming."</span>)</span><br><span class="line">    file_object.write(<span class="string">"I love Python."</span>)</span><br></pre></td></tr></table></figure><p>输入结果：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">I</span> love programming.<span class="literal">I</span> love Python.</span><br></pre></td></tr></table></figure><h5 id="附加到文件"><a href="#附加到文件" class="headerlink" title="附加到文件"></a>附加到文件</h5><p>附加到文件可以理解为不清空当前的文件内容，在文件内容后面追加即可。如果以附加的形式打开，如果文件不存在就会被创建。具体实现只需要在使用<code>open()</code>函数的时候指定打开方式为<code>a</code>即可，其余类似。</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p><code>Python</code>使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生让<code>Python</code>不知 所措的错误时，它都会创建一个异常对象。</p><p>异常是使用<code>try-except</code>代码块处理的。<code>try-except</code>代码块让<code>Python</code>执行指定的操作，同时告诉<code>Python</code>发生异常时怎么办。使用了<code>try-except</code>代码块时，即便出现异常，程序也将继续运行: 显示你编写的友好的错误消息，而不是令用户迷惑的<code>traceback</code>。</p><h5 id="处理ZeroDivisionError异常"><a href="#处理ZeroDivisionError异常" class="headerlink" title="处理ZeroDivisionError异常"></a>处理<code>ZeroDivisionError</code>异常</h5><p>例如我们让<code>Python</code>运行<code>8/0</code>的代码报错信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span>/<span class="number">0</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>此时程序停止运行。</p><h5 id="使用try-except代码块"><a href="#使用try-except代码块" class="headerlink" title="使用try-except代码块"></a>使用<code>try-except</code>代码块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     print(<span class="number">7</span>/<span class="number">0</span>) </span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br><span class="line">    <span class="comment"># 其他的代码块将继续运行</span></span><br></pre></td></tr></table></figure><h5 id="使用异常避免崩溃"><a href="#使用异常避免崩溃" class="headerlink" title="使用异常避免崩溃"></a>使用异常避免崩溃</h5><p>发生错误时，如果程序还有工作没有完成，妥善地处理错误就尤其重要。这种情况经常会出 现在要求用户提供输入的程序中;如果程序能够妥善地处理无效输入，就能再提示用户提供有效输入，而不至于崩溃。</p><h5 id="else代码块"><a href="#else代码块" class="headerlink" title="else代码块"></a><code>else</code>代码块</h5><p><code>try-except-else</code>代码块的工作原理:<code>Python</code>尝试执行<code>try</code>代码块中的代码;只有可 能引发异常的代码才需要放在<code>try</code>语句中。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    answer = int(first_number) / int(second_number)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError: </span><br><span class="line">    print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    print(answer)</span><br></pre></td></tr></table></figure><h5 id="处理FileNotFoundError异常"><a href="#处理FileNotFoundError异常" class="headerlink" title="处理FileNotFoundError异常"></a>处理<code>FileNotFoundError</code>异常</h5><p>产生的背景：要查找的文件可能在其他地方、文件名可能 不正确或者这个文件根本就不存在。机会产生<code>FileNotFoundError</code>异常。同理可以给用户一个友好的消息提示。</p><h5 id="拆分字符串"><a href="#拆分字符串" class="headerlink" title="拆分字符串"></a>拆分字符串</h5><p>方法<code>split()</code>以空格为分隔符将字符串分拆成多个部分，并将这些部分都存储到一个列表中。</p><p>代码示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; title = <span class="string">"Alice in Wonderland"</span> </span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; title.split()</span><br><span class="line">[<span class="string">'Alice'</span>, <span class="string">'in'</span>, <span class="string">'Wonderland'</span>]</span><br></pre></td></tr></table></figure><h5 id="使用多个文件"><a href="#使用多个文件" class="headerlink" title="使用多个文件"></a>使用多个文件</h5><p>使用多个文件和单个文件逻辑一致，只不过把逻辑处理部分封装为方法，多个文件就循环处理即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment">#计算一个文件大致包含多少个单词</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            contents = f_obj.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        msg = <span class="string">"Sorry, the file "</span> + filename + <span class="string">" does not exist."</span></span><br><span class="line">        print(msg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 计算文件大致包含多少个单词</span></span><br><span class="line">        words = contents.split()</span><br><span class="line">        num_words = len(words)</span><br><span class="line">        print(<span class="string">"The file "</span> + filename + <span class="string">" has about "</span> + str(num_words) +</span><br><span class="line"><span class="string">" words."</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'alice.txt'</span> </span><br><span class="line">count_words(filename)</span><br></pre></td></tr></table></figure><h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><p>模块<code>json</code>让你能够将简单的<code>Python</code>数据结构转储到文件中，并在程序再次运行时加载该文件 中的数据。你还可以使用<code>json</code>在<code>Python</code>程序之间分享数据。更重要的是，<code>JSON</code>数据格式并非<code>Python</code>专用的，这让你能够将以<code>JSON</code>格式存储的数据与使用其他编程语言的人分享。</p><h5 id="使用json-dump-和json-load"><a href="#使用json-dump-和json-load" class="headerlink" title="使用json.dump()和json.load()"></a>使用<code>json.dump()</code>和<code>json.load()</code></h5><p>函数<code>json.dump()</code>接受两个实参:要存储的数据以及可用于存储数据的文件对象。</p><p>编写一个存储一组数字的简短程序，再编写一个将这些数字读取到内存中的程序 (<code>json.load()</code>)。</p><p>代码示例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line"><span class="built_in">num</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'num.json'</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(<span class="built_in">num</span>,f_obj)<span class="comment">#写入文件</span></span><br><span class="line">    <span class="built_in">num</span> = json.<span class="built_in">load</span>(f_obj) <span class="comment">#读到内存，可以打印</span></span><br><span class="line">    </span><br><span class="line">print(<span class="built_in">num</span>)</span><br></pre></td></tr></table></figure><p>运行后文件的内容和打印的内容一致。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h5 id="保存和读取用户生成的数据"><a href="#保存和读取用户生成的数据" class="headerlink" title="保存和读取用户生成的数据"></a>保存和读取用户生成的数据</h5><p>用户输入的信息我们可以通过写入文件的方式写在文件内，再次输入的时候可以打开文件查询判断是否存在。其实就是把写入和读取文件两个逻辑合成一个。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'username.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What is your name? "</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;文件处理相关，读取文件和写入文件等。&lt;/p&gt;
&lt;p&gt;异常处理和捕获异常。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习08天</title>
    <link href="https://chensenlin.cn/posts/63973/"/>
    <id>https://chensenlin.cn/posts/63973/</id>
    <published>2018-03-23T10:48:11.000Z</published>
    <updated>2018-03-27T05:34:42.863Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>类的基本介绍、创建和使用；</p><p>实例化类，设置属性和和修改等。</p><a id="more"></a><h4 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h4><h5 id="创建Dog类"><a href="#创建Dog类" class="headerlink" title="创建Dog类"></a>创建<code>Dog</code>类</h5><p>根据约定，在<code>Python</code>中，首字母大写的名称指的是类。 这个类定义中的括号是空的，因为我们要从空白创建这个类。类中的函数称为方法。</p><p>代码如下:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span>():</span></span><br><span class="line">    <span class="comment"># 创建一个小狗的类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(<span class="keyword">self</span>,name,age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 初始化属性name和age</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 模拟小狗被命令时蹲下</span></span><br><span class="line">        print(<span class="keyword">self</span>.name.title() + <span class="string">" is now sitting !"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 打滚</span></span><br><span class="line">        print(<span class="keyword">self</span>.name.title() + <span class="string">" rolled over!"</span>)</span><br></pre></td></tr></table></figure><p><code>__init__</code>方法</p><p><code>__init__()</code>是一个特殊的方法，每当你根据<code>Dog</code>类创建新实例时，<code>Python</code>都会自动运行它。在这个方法的名称中，开头和末尾各有两个下划线，这是一种约定，旨在避免<code>Python</code>默认方法与普通方法发生名称冲突。它包含了三个形参：<code>self</code>、<code>name</code>和<code>age</code>，在这个方法的定义中，形 参self必不可少，还必须位于其他形参的前面。</p><h5 id="根据类创建实例"><a href="#根据类创建实例" class="headerlink" title="根据类创建实例"></a>根据类创建实例</h5><p>可将类视为有关如何创建实例的说明。</p><p>代码示例:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog('demo',<span class="number">18</span>)</span><br><span class="line">print(<span class="name">my_dog</span>.name.title())</span><br><span class="line">print(<span class="name">my_dog</span>.age)</span><br></pre></td></tr></table></figure><p><strong>访问属性</strong></p><p>要访问实例的属性，可使用句点表示法。例如<code>my_dog.name</code></p><p><strong>调用方法</strong></p><p>要调用方法，可指定实例的名称和要调用的方法，并用句点分隔它们。</p><p>代码示例：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog<span class="comment">('demo', 6)</span></span><br><span class="line">my_dog.sit<span class="comment">()</span></span><br><span class="line">my_dog.roll_over<span class="comment">()</span></span><br></pre></td></tr></table></figure><p><strong>创建多个实例</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my_dog</span> = Dog(<span class="string">'demo'</span>, <span class="number">6</span>)</span><br><span class="line"><span class="attr">you_dog</span> = Dog(<span class="string">'demo_go'</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h4 id="使用类和实例"><a href="#使用类和实例" class="headerlink" title="使用类和实例"></a>使用类和实例</h4><p>类编写好后，你的大部分时间都将花在使用根据类创建的实例上。你需要执行的一个重要任务是修改实例的属性。你可以直接修改实例的属性，也可以编写方法以特定的方式进行修改。</p><h5 id="Car类"><a href="#Car类" class="headerlink" title="Car类"></a><code>Car</code>类</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="comment"># Car类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name,model,year)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.model = model</span><br><span class="line">        <span class="keyword">self</span>.year = year</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descript</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 返回描述信息</span></span><br><span class="line">        long_name = str(<span class="keyword">self</span>.year) + <span class="string">'---'</span> + <span class="keyword">self</span>.name + <span class="string">'---'</span> + <span class="keyword">self</span>.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 示例化</span></span><br><span class="line">my_car = Car(<span class="string">'audi'</span>,<span class="string">'A4'</span>,<span class="string">'2016'</span>)</span><br><span class="line">print(my_car.get_descript())</span><br></pre></td></tr></table></figure><p>处理的结果是:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">2016</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">Audi</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">A4</span></span><br></pre></td></tr></table></figure><h5 id="给属性设置默认值"><a href="#给属性设置默认值" class="headerlink" title="给属性设置默认值"></a>给属性设置默认值</h5><p>类中的每个属性都必须有初始值，哪怕这个值是<code>0</code>或空字符串。在有些情况下，如设置默认值时，在方法<code>__init__()</code>内指定这种初始值是可行的;如果你对某个属性这样做了，就无需包含为它提供初始值的形参。</p><p>在<code>car</code>类在<code>__init__</code>的方法新增属性<code>self.odometer_reading = 0</code>，同时新增一个方法<code>read_odometer()</code>：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(<span class="keyword">self</span>)</span></span>: </span><br><span class="line">    <span class="comment"># 打印一条指出汽车里程的消息 </span></span><br><span class="line">    print(<span class="string">"汽车的里程有："</span> + str(<span class="keyword">self</span>.odometer_reading))</span><br></pre></td></tr></table></figure><p>调用该方法:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_car = Car(<span class="string">'audi'</span>,<span class="string">'A4'</span>,<span class="string">'2016'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(my_car.get_descript()</span></span>)</span><br><span class="line">my_car.read_odometer()</span><br></pre></td></tr></table></figure><h5 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h5><p>可以以三种不同的方式修改属性的值：直接通过实例进行修改;通过方法进行设置;通过方法进行递增(增加特定的值)。</p><p><strong>直接修改属性的值</strong></p><p>代码如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_new<span class="type">_car</span>.odometer_reading = <span class="number">23</span> my_new<span class="type">_car</span>.read_odometer()</span><br></pre></td></tr></table></figure><p>有时候需要像这样直接访问属性，但其他时候需要编写对属性进行更新的方法。</p><p><strong>通过方法修改属性的值</strong></p><p>在<code>Car</code>类新增一个<code>update_odometer()</code>的方法，专门用来修改属性的值。</p><p>代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(<span class="keyword">self</span>,update_value)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 修改里程值</span></span><br><span class="line">    <span class="keyword">self</span>.odometer_reading = update_value</span><br></pre></td></tr></table></figure><p>在调用的时候就很简单了:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.update_odometer</span>(66)</span><br><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.read_odometer</span>()</span><br></pre></td></tr></table></figure><p><strong>通过方法对属性的值进行递增</strong></p><p>递增的逻辑其实很简单，只有将之前的记录保存并且和后面传入的值进行相加操作即可。</p><p>代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(<span class="keyword">self</span>,update_value)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 修改里程值</span></span><br><span class="line">    <span class="keyword">self</span>.odometer_reading += update_value</span><br></pre></td></tr></table></figure><p>调用方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.update_odometer</span>(6)</span><br><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.read_odometer</span>()</span><br><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.update_odometer</span>(1)</span><br><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.read_odometer</span>()</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>编写类时，并非总是要从空白开始。如果你要编写的类是另一个现成类的特殊版本，可使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法;原有的类称为父类，而新类称为子类。子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法。</p><h5 id="子类的方法-init"><a href="#子类的方法-init" class="headerlink" title="子类的方法__init__()"></a>子类的方法<code>__init__()</code></h5><p>创建子类的实例时，<code>Python</code>首先需要完成的任务是给父类的所有属性赋值。我们直接在上一节的汽车类基础上添加一个<code>ElectricCar</code>类，让它继承<code>Car</code>类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="comment"># 电动汽车</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,model,year)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化父类的属性</span></span><br><span class="line">        super().__init__(name,model,year)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 示例化</span></span><br><span class="line">my_car = ElectricCar(<span class="string">'dian'</span>, <span class="string">'models'</span>, <span class="number">2019</span>)</span><br><span class="line">print(my_tesla.get_descriptive())</span><br></pre></td></tr></table></figure><p><code>super()是</code>一个特殊函数，帮助<code>Python</code>将父类和子类关联起来。这行代码让<code>Python</code>调用<code>ElectricCar</code>的父类的方法<code>__init__()</code>，让<code>ElectricCar</code>实例包含父类的所有属性。父类也称为超 类(<code>superclass</code>)，<code>super</code>因此而得名。</p><h5 id="给子类定义属性和方法"><a href="#给子类定义属性和方法" class="headerlink" title="给子类定义属性和方法"></a>给子类定义属性和方法</h5><p> 让一个类继承另一个类后，可添加区分子类和父类所需的新属性和方法。和之前的定义属性和方法的逻辑类似，不做过多的阐述。可以理解为在子类里面可以自定义一些自己需要的方法或者属性。</p><h5 id="重写父类的方法"><a href="#重写父类的方法" class="headerlink" title="重写父类的方法"></a>重写父类的方法</h5><p>对于父类的方法，只要它不符合子类模拟的实物的行为，都可对其进行重写。为此，可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样，<code>Python</code>将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。或者可以理解为在子类里面可以重写一个新的方法，重新赋值一个新的属性等。通俗的理解为：“取其精华，去其糟粕”。</p><h5 id="将实例用作属性"><a href="#将实例用作属性" class="headerlink" title="将实例用作属性"></a>将实例用作属性</h5><p>使用代码模拟实物时，你可能会发现自己给类添加的细节越来越多:属性和方法清单以及文 件都越来越长。在这种情况下，可能需要将类的一部分作为一个独立的类提取出来。你可以将大 型类拆分成多个协同工作的小类。</p><h4 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h4><h5 id="导入单个类"><a href="#导入单个类" class="headerlink" title="导入单个类"></a>导入单个类</h5><p>为了使项目代码的可读性更加高，使用该模块的程序都必须使用更具体的文件名。例如<code>my_car.py</code>。导入的方法和之前类似，具体语法结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> model_name <span class="keyword">import</span> Class_name</span><br></pre></td></tr></table></figure><p>采用<code>improt</code>语句让<code>Python</code>打开模块<code>car</code>，并导入其中的<code>Car</code>类，剩下的就可以使用了。</p><p>导入类是一种有效的编程方式。如果在这个程序中包含了整个<code>Car</code>类，它该有多长呀!通过 将这个类移到一个模块中，并导入该模块，你依然可以使用其所有功能，但主程序文件变得整洁而易于阅读。</p><h5 id="在一个模块中存储多个类"><a href="#在一个模块中存储多个类" class="headerlink" title="在一个模块中存储多个类"></a>在一个模块中存储多个类</h5><p>也就是一个模块中可以有多个类，例如父类和子类。假设<code>my_car.py</code>有两个类，一个是父类<code>Car</code>，另一个是子类<code>ElectricCar</code>，那么在导入该模块时，可以选择导入某一个类。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> model_name <span class="keyword">import</span> Class_name</span><br></pre></td></tr></table></figure><p>现在就可以进行示例化或者其他的操作了。</p><h5 id="从一个模块中导入多个类"><a href="#从一个模块中导入多个类" class="headerlink" title="从一个模块中导入多个类"></a>从一个模块中导入多个类</h5><p>和我们之前导入函数的时候原理一样，我们可以导入任意数量的类。导入模块多个类的时候，采用逗号拼接即可。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> model_name <span class="keyword">import</span> Class_name0, Class_name1</span><br></pre></td></tr></table></figure><p>导入之后，就可根据需要创建每个类的任意数量的实例。</p><h5 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h5><p>导入整个模块的语法也特别的简单，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> model_name</span><br></pre></td></tr></table></figure><p>这样就可以使用整个模块的任意类。</p><h5 id="导入模块中的所有类"><a href="#导入模块中的所有类" class="headerlink" title="导入模块中的所有类"></a>导入模块中的所有类</h5><p>导入多个就用逗号一个个区分，然后倒入所有的就用<code>*</code>代替。所以语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> model_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><blockquote><p>引用原文。</p></blockquote><p>不推荐使用这种导入方式，其原因有二。首先，如果只要看一下文件开头的<code>import</code>语句，就能清楚地知道程序使用了哪些类，将大有裨益;但这种导入方式没有明确地指出你使用了模块中的哪些类。这种导入方式还可能引发名称方面的困惑。如果你不小心导入了一个与程序文件中其 他东西同名的类，将引发难以诊断的错误。这里之所以介绍这种导入方式，是因为虽然不推荐使 用这种方式，但你可能会在别人编写的代码中见到它。 </p><p>需要从一个模块中导入很多类时，最好导入整个模块，并使用<code>module_name.class_name</code>语法来访问类。这样做时，虽然文件开头并没有列出用到的所有类，但你清楚地知道在程序的哪些地方使用了导入的模块;你还避免了导入模块中的每个类可能引发的名称冲突。</p><h5 id="在一个模块中导入另一个模块"><a href="#在一个模块中导入另一个模块" class="headerlink" title="在一个模块中导入另一个模块"></a>在一个模块中导入另一个模块</h5><p>有时候，需要将类分散到多个模块中，以免模块太大，或在同一个模块中存储不相关的类。将类存储在多个模块中时，你可能会发现一个模块中的类依赖于另一个模块中的类。在这种情况下，可在前一个模块中导入必要的类。</p><p>这部分的笔记实在是比较简单，没有过多的代码，逻辑上的问题基本在之前都涉及过了。如果不是特别了解，可以看看之前的文章，或者可以关注我，后续将继续更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;类的基本介绍、创建和使用；&lt;/p&gt;
&lt;p&gt;实例化类，设置属性和和修改等。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习07天</title>
    <link href="https://chensenlin.cn/posts/60902/"/>
    <id>https://chensenlin.cn/posts/60902/</id>
    <published>2018-03-21T07:30:41.000Z</published>
    <updated>2018-03-27T05:34:39.083Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>函数的定义和使用；</p><p>传递实参和返回值；</p><p>模块的导入、使用和函数导入、使用。</p><a id="more"></a><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数是带名字的代码块，用于完 成具体的工作。要执行函数定义的特定任务，可调用该函数。需要在程序中多次 执行同一项任务时，你无需反复编写完成该任务的代码，而只需调用 执行该任务的函数，让<code>Python</code>运行其中的代码。</p><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><p>定义函数的关键字：<code>def</code>，由此来告诉<code>Python</code>这是一个函数。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"函数体说明部分"</span></span><br><span class="line">    mes = <span class="string">"你好我是森林"</span></span><br><span class="line">    print(mes)</span><br><span class="line">    </span><br><span class="line">hello_user()</span><br></pre></td></tr></table></figure><p><code>def</code>关键字定义函数；<code>hello_user()</code>是该函数的函数名；冒号定义结尾；冒号后面到缩进结尾表示该函数的函数体，也就是函数需要做什么。上述函数就是打印一个变量。执行结果为：<code>你好我是森林</code>。而最后一行表示调用函数名为<code>hello_user()</code>的函数。</p><h5 id="向函数传递信息"><a href="#向函数传递信息" class="headerlink" title="向函数传递信息"></a>向函数传递信息</h5><p>在函数名后面的括号可以进行传参操作，例如传入简单的用户名。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的名字叫: "</span> + username)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"你好我是森林"</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的名字叫：你好我是森林</span><br></pre></td></tr></table></figure><h5 id="实参和形参"><a href="#实参和形参" class="headerlink" title="实参和形参"></a>实参和形参</h5><p>方法在定义的时候的参数称为形参，函数完成其工作所需的一项信 息；函数在调用的时候传入的参数称为实参。</p><p>例如在上面的代码中，<code>get_user(username)</code>的<code></code>username<code>未形参，而调用的时候输入</code>你好我是森林`为实际参数。</p><h4 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h4><p>鉴于函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式很多，可使用位置实参，这要求实参的顺序与形参的顺序相同;也可使用关键字实参，其中每个实参都由变量名和值组成;还可使用列表和字典。</p><h5 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h5><p>调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序。这种关联方式被称为位置实参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(type,value)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的"</span> + type + <span class="string">"是: "</span> + value)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"年龄"</span>,<span class="string">'18'</span>)</span><br></pre></td></tr></table></figure><p>根据<code>type</code>的类型传入的值，输入不一样的结果。传入的<code>年龄</code>就存入函数的<code>type</code>变量中，<code>88</code>就存入<code>value</code>变量中。这样就能够完整的输出。结果为：<code>我的年龄是: 88</code>。</p><p>根据这个结果可以推出，该函数可以被多次调用。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(type,value)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的"</span> + type + <span class="string">"是: "</span> + value)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"年龄"</span>,<span class="string">'18'</span>)</span><br><span class="line">get_user(<span class="string">"体重"</span>,<span class="string">'100'</span>)</span><br><span class="line">get_user(<span class="string">"身高"</span>,<span class="string">'180'</span>)</span><br><span class="line">get_user(<span class="string">"性别"</span>,<span class="string">'男'</span>)</span><br></pre></td></tr></table></figure><p>输出的结果是：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">我的年龄是: 18</span></span><br><span class="line"><span class="section">我的体重是: 100</span></span><br><span class="line"><span class="section">我的身高是: 180</span></span><br><span class="line"><span class="section">我的性别是: 男</span></span><br></pre></td></tr></table></figure><p>需要注意的是传参的位置很重要。如果传参顺序出错，就容易出现笑话。</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(type,value)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的"</span> + type + <span class="string">"是: "</span> + value)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"年龄"</span>,<span class="string">'18'</span>)</span><br><span class="line">get_user(<span class="string">"100"</span>,<span class="string">'体重'</span>)</span><br><span class="line">get_user(<span class="string">"100"</span>,<span class="string">'身高'</span>)</span><br><span class="line">get_user(<span class="string">"男"</span>,<span class="string">'性别'</span>)</span><br></pre></td></tr></table></figure><p>运行的结果：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">我的年龄是: 18</span></span><br><span class="line"><span class="section">我的100是: 体重</span></span><br><span class="line"><span class="section">我的100是: 身高</span></span><br><span class="line"><span class="section">我的男是: 性别</span></span><br></pre></td></tr></table></figure><h5 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h5><p>关键字实参是传递给函数的名称—值对。直接在实参中将名称和值关联起来了，因此向函数传递实参时不会混淆。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(type,value)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的"</span> + type + <span class="string">"是: "</span> + value)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"年龄"</span>,<span class="string">'18'</span>)</span><br><span class="line">get_user(value=<span class="string">"18"</span>,type = <span class="string">'age'</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">我的年龄是: 18</span></span><br><span class="line"><span class="section">我的age是: 18</span></span><br></pre></td></tr></table></figure><h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h5><p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，<code>Python</code>将使用 指定的实参值;否则，将使用形参的默认值。因此，给形参指定默认值后，可在函数调用中省略相应的实参。使用默认值可简化函数调用，还可清楚地指出函数的典型用法。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(type,value = <span class="string">'19'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的"</span> + type + <span class="string">"是: "</span> + value)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"年龄"</span>,<span class="string">'18'</span>)</span><br><span class="line">get_user(<span class="string">"年龄"</span>) <span class="comment">#没有传值</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">我的年龄是: 18</span></span><br><span class="line"><span class="section">我的年龄是: 19</span></span><br></pre></td></tr></table></figure><blockquote><p>使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参。 这让Python依然能够正确地解读位置实参。</p></blockquote><h5 id="等效的函数调用"><a href="#等效的函数调用" class="headerlink" title="等效的函数调用"></a>等效的函数调用</h5><p>鉴于可混合使用位置实参、关键字实参和默认值，通常有多种等效的函数调用方式。基于这种定义，在任何情况下都必须给函数提供实参;指定该实参时可以使用位置方式，也可以使用关键字方式。同样，指定该实参时可以使用位置方式，也可以使用关键字方式。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回 的值被称为返回值。在函数中，可使用<code>return</code>语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。</p><h5 id="返回简单值"><a href="#返回简单值" class="headerlink" title="返回简单值"></a>返回简单值</h5><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_info</span><span class="params">(type,info)</span>:</span></span><br><span class="line">    <span class="string">"""返回用户信息"""</span></span><br><span class="line">    user_info =  <span class="string">"我的"</span> + type + <span class="string">"是: "</span> + info</span><br><span class="line">    <span class="keyword">return</span> user_info.title()</span><br><span class="line"></span><br><span class="line">user_info = get_user_info(<span class="string">'身高'</span>,<span class="string">'190'</span>)</span><br><span class="line">print(user_info)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">我的身高是: 190</span></span><br></pre></td></tr></table></figure><p>返回一条字符串类型的用户的信息，然后赋值给变量<code>user_info</code>，最后打印输出。</p><h5 id="让实参变成可选的"><a href="#让实参变成可选的" class="headerlink" title="让实参变成可选的"></a>让实参变成可选的</h5><p>在某些时候我们的参数可能不是必选，但是需要设置默认值就可以决定是否需要传参。</p><h5 id="返回字典"><a href="#返回字典" class="headerlink" title="返回字典"></a>返回字典</h5><p>将用户的信息存储在字典中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span><span class="params">(first_name, last_name)</span>:</span> </span><br><span class="line">    <span class="string">"""返回一个字典，其中包含有关一个人的信息"""</span></span><br><span class="line">    person = &#123;<span class="string">'first'</span>: first_name, <span class="string">'last'</span>: last_name&#125;</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>)</span><br><span class="line">print(musician)</span><br></pre></td></tr></table></figure><p>同时该字典还可以不断的增加。例如新增返回年龄。</p><p>调用函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span><span class="params">(first_name, last_name,age=<span class="string">''</span>)</span>:</span> </span><br><span class="line">    <span class="string">"""返回一个字典，其中包含有关一个人的信息"""</span></span><br><span class="line">    person = &#123;<span class="string">'first'</span>: first_name, <span class="string">'last'</span>: last_name&#125;</span><br><span class="line">    <span class="keyword">if</span> age:</span><br><span class="line">        person[<span class="string">'age'</span>] = age</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"> </span><br><span class="line">musician = build_person(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>,age=<span class="number">19</span>)</span><br><span class="line">print(musician)</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'first'</span>: <span class="string">'jimi'</span>, <span class="string">'last'</span>: <span class="string">'hendrix'</span>, <span class="string">'age'</span>: <span class="number">19</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h4><p>向函数传递列表很有用，这种列表包含的可能是名字、数字或更复杂的对象(如字典)。将列表传递给函数后，函数就能直接访问其内容。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_users</span><span class="params">(names)</span>:</span> </span><br><span class="line">    <span class="string">"""向列表中的每位用户都发出简单的问候"""</span> </span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">"Hello, "</span> + name + <span class="string">"!"</span></span><br><span class="line">        print(msg)</span><br><span class="line"></span><br><span class="line">usernames = [<span class="string">'Hannah'</span>, <span class="string">'Ty'</span>, <span class="string">'Margot'</span>] greet_users(usernames)</span><br></pre></td></tr></table></figure><p>传入一个列表，进行循环遍历打印，然后得到如下结果。</p><p>运行结果：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Hannah!</span><br><span class="line"><span class="built_in">Hello,</span> Ty!</span><br><span class="line"><span class="built_in">Hello,</span> Margot!</span><br></pre></td></tr></table></figure><h5 id="在函数中修改列表"><a href="#在函数中修改列表" class="headerlink" title="在函数中修改列表"></a>在函数中修改列表</h5><p>由上面的例子可以得出，函数在遍历的过程中是可以通过一些函数进行修改的。例如将传入的值全部变为大写。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_users</span><span class="params">(names)</span>:</span> </span><br><span class="line">    <span class="string">"""向列表中的每位用户都发出简单的问候"""</span> </span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">"Hello, "</span> + name.upper() + <span class="string">"!"</span></span><br><span class="line">        print(msg)</span><br><span class="line"></span><br><span class="line">usernames = [<span class="string">'hannah'</span>, <span class="string">'ty'</span>, <span class="string">'margot'</span>] greet_users(usernames)</span><br></pre></td></tr></table></figure><p>当然，也可以进行复杂的修改操作。例如把传入的列表复制给第二个列表；同样，我们也可以紧致修改列表。</p><h5 id="禁止函数修改列表"><a href="#禁止函数修改列表" class="headerlink" title="禁止函数修改列表"></a>禁止函数修改列表</h5><p>将列表的副本传递给函数就可以实现没有修改列表。切片表示法<code>[:]</code>创建列表的副本。语法如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">function_name</span><span class="params">(list_name[:])</span></span></span><br></pre></td></tr></table></figure><h4 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h4><p>利用<code>*</code>定义为一个空元组就可以将所有传入的实参都进行打印。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span> </span><br><span class="line">    <span class="string">"""打印顾客点的所有配料"""</span> </span><br><span class="line">    print(toppings)</span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>无论传入多少值都可以被打印出来。</p><h5 id="结合使用位置实参和任意数量实参"><a href="#结合使用位置实参和任意数量实参" class="headerlink" title="结合使用位置实参和任意数量实参"></a>结合使用位置实参和任意数量实参</h5><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。`Python·先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span></span><br><span class="line">        <span class="string">"""概述要制作的比萨"""</span> </span><br><span class="line">        print(<span class="string">"\nMaking a "</span> + str(size) + <span class="string">"-inch pizza with the following toppings:"</span>)</span><br><span class="line">       <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br><span class="line">        </span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><h5 id="使用任意数量的关键字实参"><a href="#使用任意数量的关键字实参" class="headerlink" title="使用任意数量的关键字实参"></a>使用任意数量的关键字实参</h5><p>有时候，需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量的键—值对——调用语句提供了多少就接受多少。只要坚持一个原则，无论用户输入的实参有多少信息，采用遍历的方式将其逐步返回，然后打印就可以实现无论用户输入什么信息就返回。</p><h4 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h4><p>函数的优点之一是，使用它们可将代码块与主程序分离。通过给函数指定描述性名称，可让 主程序容易理解得多。你还可以更进一步，将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。<code>import</code>语句允许在当前运行的程序文件中使用模块中的代码。</p><h5 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h5><p>要让函数是可导入的，得先创建模块。模块是扩展名为<code>.py</code>的文件，包含要导入到程序中的代码。创建模块代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span> </span><br><span class="line">        <span class="string">"""概述要制作的比萨"""</span> </span><br><span class="line">        print(<span class="string">"\nMaking a "</span> + str(size) + <span class="string">"-inch pizza with the following toppings:"</span>) </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">            print(<span class="string">"- "</span> + topping)</span><br></pre></td></tr></table></figure><p>保存为<code>make_pizza.py</code>的文件，然后创建一个新的文件<code>make.py</code>。代码如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  make_pizza</span><br><span class="line"></span><br><span class="line">make_pizza.make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br></pre></td></tr></table></figure><p>运行后结果如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  day8 python make.py</span><br><span class="line">Making <span class="selector-tag">a</span> <span class="number">16</span>-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br></pre></td></tr></table></figure><h5 id="导入模块的某些函数"><a href="#导入模块的某些函数" class="headerlink" title="导入模块的某些函数"></a>导入模块的某些函数</h5><p>既然可以导入整个模块，说明是能完全读取整个模块的信息，同理，可以推出，我们导入文件的时候是不是可以将某些函数导入进入使用呢？具体的语法如下：</p><p>导入某一个函数：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from <span class="keyword">module</span><span class="number">_n</span>ame <span class="keyword">import</span> <span class="keyword">function</span><span class="number">_n</span>ame</span><br></pre></td></tr></table></figure><p>导入某些函数，也就是多个函数：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from <span class="keyword">module</span><span class="number">_n</span>ame <span class="keyword">import</span> <span class="keyword">function</span><span class="number">_0</span>, <span class="keyword">function</span><span class="number">_1</span>, <span class="keyword">function</span><span class="number">_2</span></span><br></pre></td></tr></table></figure><p>具体的使用方法同理，相当于该函数就可以被调用，和函数调用一致，没有什么区别。即：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pizz import make_pizz</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">make_pizz</span><span class="params">(<span class="number">12</span>,<span class="string">'demo_pizz'</span>)</span></span></span><br></pre></td></tr></table></figure><h5 id="使用as给函数指定别名"><a href="#使用as给函数指定别名" class="headerlink" title="使用as给函数指定别名"></a>使用<code>as</code>给函数指定别名</h5><p>某些业务的需求，函数名可能有特别长，但是在新的模块文件中，我们不需要这样的函数名，一来影响代码的美观；二来对开发人员不太友好，于是采用关键字<code>as</code>可以给函数取一个在新的模块中的别名。具体的语法如下：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name <span class="keyword">as</span> fun_name</span><br></pre></td></tr></table></figure><p>在这里可以看到<code>fun_name</code>就是起的别名，在调用的时候就可以直接采用<code>fun_name</code>进行调用。具体调用方法如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizz <span class="keyword">import</span> make_install_pizz_div <span class="keyword">as</span> mpip</span><br><span class="line"></span><br><span class="line">mpip(<span class="number">14</span>,<span class="string">'pizz_name'</span>)</span><br></pre></td></tr></table></figure><p>具体的调用和实际导入的函数没有什么区别，同样的使用。但是为了提高代码的可读性，建议最好将别名取的有意义。</p><h5 id="使用as给模块指定别名"><a href="#使用as给模块指定别名" class="headerlink" title="使用as给模块指定别名"></a>使用<code>as</code>给模块指定别名</h5><p>由<strong>使用<code>as</code>给函数指定别名</strong>可以推出，同样可以为模块取一个更有意义或者更适合自己的别名。在日常的<code>Python</code>开发中，常用的库或模块有很多，我们同样可以进行别名的方式来实现。具体语法如下：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn</span><br></pre></td></tr></table></figure><p>使用方式不再阐述，和没有指定别名的方式是一样的。</p><h5 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h5><p>在日常开发中<code>*</code>通常是通配符的意思，所以我们要实现一个导入模块的所有函数可以用<code>*</code>来实现。具体语法如下：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>调用对应函数的方法和上面类似，不做过多的阐述。</p><h4 id="函数编写指南"><a href="#函数编写指南" class="headerlink" title="函数编写指南"></a>函数编写指南</h4><blockquote><p>原文内容。</p></blockquote><p>编写函数时，需要牢记几个细节。应给函数指定描述性名称，且只在其中使用小写字母和下划线。描述性名称可帮助你和别人明白代码想要做什么。给模块命名时也应遵循上述约定。</p><p>每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式。文档良好的函数让其他程序员只需阅读文档字符串中的描述就能够使用它:他们完全可以相信代码如描述的那样运行;只要知道函数的名称、需要的实参以及返回值的类型，就能在自己的程序中使用它。</p><p>给形参指定默认值时，等号两边不要有空格。<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP 8</a>建议代码行的长度不要超过79字符，这样 只要编辑器窗口适中，就能看到整行代码。如果形参很多，导致函数定义的长度超过了79字符，可在函数定义中输入左括号后按回车键，并在下一行按两次Tab键，从而将形参列表和只缩进一层的函数体区分开来。大多数编辑器都会自动对齐后续参数列表行，使其缩进程度与你给第一个参数列表行指定的 缩进程度相同:</p><p>如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开，这样将更容易知道前一个函数在什么地方结束，下一个函数从什么地方开始。所有的import语句都应放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;函数的定义和使用；&lt;/p&gt;
&lt;p&gt;传递实参和返回值；&lt;/p&gt;
&lt;p&gt;模块的导入、使用和函数导入、使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习06天</title>
    <link href="https://chensenlin.cn/posts/4583/"/>
    <id>https://chensenlin.cn/posts/4583/</id>
    <published>2018-03-20T04:03:31.000Z</published>
    <updated>2018-03-27T05:34:36.619Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>用户输入和<code>while</code>循环；</p><p>利用<code>while</code>处理列表和字典。</p><a id="more"></a><h3 id="用户输入和while循环"><a href="#用户输入和while循环" class="headerlink" title="用户输入和while循环"></a>用户输入和while循环</h3><h4 id="函数input-的工作原理"><a href="#函数input-的工作原理" class="headerlink" title="函数input()的工作原理"></a>函数<code>input()</code>的工作原理</h4><p>函数<code>input()</code>让程序暂停运行，等待用户输入一些文本。获取用户输入后，<code>Python</code>将其存储在 一个变量中，以方便你使用。</p><p>代码示例:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_res = input(<span class="string">"输入你最喜欢的食物:"</span>)</span><br><span class="line">print(<span class="name">input_res</span>)</span><br></pre></td></tr></table></figure><h5 id="编写清晰的程序"><a href="#编写清晰的程序" class="headerlink" title="编写清晰的程序"></a>编写清晰的程序</h5><p>有时候，提示可能超过一行，例如，你可能需要指出获取特定输入的原因。在这种情况下， 可将提示存储在一个变量中，再将该变量传递给函数<code>input()</code>。</p><p>代码示例:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"If you tell us who you are, we can personalize the messages you see."</span></span><br><span class="line">prompt += <span class="string">"\nWhat is your first name? "</span></span><br><span class="line">name = input(prompt)</span><br><span class="line">print(<span class="string">"\nHello, "</span> + name + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>第1行将消息的前半部分存储在变量<code>prompt</code>中; 在第2行中，运算符+=在存储在<code>prompt</code>中的字符串末尾附加一个字符串。</p><h5 id="使用int-来获取数值输入"><a href="#使用int-来获取数值输入" class="headerlink" title="使用int()来获取数值输入"></a>使用<code>int()</code>来获取数值输入</h5><p>使用函数<code>input()</code>时，<code>Python</code>将用户输入解读为字符串。如果用户输入的值需要进行和数字比较，就会发生错误，这个时候就需要转换一下。可以采用<code>int()</code>来进行字符串和整型之间的转换</p><p>代码示例:<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="keyword">input</span>(<span class="string">"请输入你的年龄: "</span>)</span><br><span class="line">age = <span class="keyword">int</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"你已经成年"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"你还未成年"</span>)</span><br></pre></td></tr></table></figure></p><p>运行示例:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  day6 <span class="keyword">python</span> <span class="keyword">int</span>.<span class="keyword">py</span></span><br><span class="line">请输入你的年龄: <span class="number">12</span></span><br><span class="line">你还未成年</span><br><span class="line">➜  day6 <span class="keyword">python</span> <span class="keyword">int</span>.<span class="keyword">py</span></span><br><span class="line">请输入你的年龄: <span class="number">18</span></span><br><span class="line">你已经成年</span><br></pre></td></tr></table></figure><h5 id="求模运算符"><a href="#求模运算符" class="headerlink" title="求模运算符"></a>求模运算符</h5><p>处理数值信息时，求模运算符<code>(%)</code>是一个很有用的工具，它将两个数相除并返回余数。求模运算符不会指出一个数是另一个数的多少倍，而只指出余数是多少。如果一个数可被另一个数整除，余数就为<code>0</code>，因此求模运算符将返回<code>0</code>。</p><p>代码示例:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">4</span> % <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">5</span> % <span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">4</span> % <span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>利用这一点来判 断一个数是奇数还是偶数:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">number</span> = <span class="built_in">input</span>(<span class="string">"Enter a number, and I'll tell you if it's even or odd: "</span>) <span class="number">13</span> </span><br><span class="line"><span class="keyword">number</span> = <span class="keyword">int</span>(<span class="keyword">number</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">number</span> % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"\nThe number "</span> + str(<span class="keyword">number</span>) + <span class="string">" is even."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"\nThe number "</span> + str(<span class="keyword">number</span>) + <span class="string">" is odd."</span>)</span><br></pre></td></tr></table></figure><h4 id="while-循环简介"><a href="#while-循环简介" class="headerlink" title="while 循环简介"></a><code>while</code> 循环简介</h4><p><code>for</code>循环用于针对集合中的每个元素都一个代码块，而<code>while</code>循环不断地运行，直到指定的条 件不满足为止。</p><h5 id="使用while循环"><a href="#使用while循环" class="headerlink" title="使用while循环"></a>使用<code>while</code>循环</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">current_number = 1</span><br><span class="line"><span class="keyword">while</span> current_number &lt;= 5:</span><br><span class="line">    <span class="builtin-name">print</span>(current_number) </span><br><span class="line">    current_number += 1</span><br></pre></td></tr></table></figure><p>在第<code>1</code>行，我们将<code>current_number</code>设置为<code>1</code>，从而指定从<code>1</code>开始数。接下来的<code>while</code>循环被设置 成这样:只要<code>current_number</code>小于或等于<code>5</code>，就接着运行这个循环。循环中的代码打印 <code>current_number</code>的值，再使用代码<code>current_number += 1</code>(代码<code>current_number = current_number + 1</code>的简写)将其值加<code>1</code>。只要满足条件<code>current_number &lt;= 5</code>，<code>Python</code>就接着运行这个循环。</p><h5 id="让用户选择何时退出"><a href="#让用户选择何时退出" class="headerlink" title="让用户选择何时退出"></a>让用户选择何时退出</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line">message = <span class="string">""</span> </span><br><span class="line">while message != 'quit':</span><br><span class="line">        message = input(prompt) </span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure><p>只有当用户输入<code>quit</code>的时候才能推出，否者一直不能退出。</p><h5 id="采用标志"><a href="#采用标志" class="headerlink" title="采用标志"></a>采用标志</h5><p>在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量被称为<strong>标志</strong>，充当了程序的交通信号灯。你可让程序在标志为<code>True</code>时继续运 行，并在任何事件导致标志的值为<code>False</code>时让程序停止运行。这样，在<code>while</code>语句中就只需检查一 个条件——标志的当前值是否为<code>True</code>，并将所有测试(是否发生了应将标志设置为<code>False</code>的事件) 都放在其他地方，从而让程序变得更为整洁。</p><h5 id="使用break退出循环"><a href="#使用break退出循环" class="headerlink" title="使用break退出循环"></a>使用<code>break</code>退出循环</h5><p>要立即退出<code>while</code>循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用<code>break</code>语句。<code>break</code>语句用于控制程序流程，可使用它来控制哪些代码行将执行，哪些代码行不执行，从而让程序按你的要求执行你要执行的代码。</p><h5 id="在循环中使用continue"><a href="#在循环中使用continue" class="headerlink" title="在循环中使用continue"></a>在循环中使用<code>continue</code></h5><p>要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它 不像break语句那样不再执行余下的代码并退出整个循环。</p><h5 id="避免无限循环"><a href="#避免无限循环" class="headerlink" title="避免无限循环"></a>避免无限循环</h5><p>每个<code>while</code>循环都必须有停止运行的途径，这样才不会没完没了地执行下去。每一个循环必须要有一个可结束的条件。</p><h4 id="使用while循环来处理列表和字典"><a href="#使用while循环来处理列表和字典" class="headerlink" title="使用while循环来处理列表和字典"></a>使用while循环来处理列表和字典</h4><p><code>for</code>循环是一种遍历列表的有效方式，但在<code>for</code>循环中不应修改列表，否则将导致<code>Python</code>难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用<code>while</code>循环。通过将<code>while</code>循环同列表和字典结合起来使用，可收集、存储并组织大量输入，供以后查看和显示。<br>主要的处理有：在列表之间移动元素；删除包含特定值的所有列表元素；使用用户输入来填充字典等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;用户输入和&lt;code&gt;while&lt;/code&gt;循环；&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;while&lt;/code&gt;处理列表和字典。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习05天</title>
    <link href="https://chensenlin.cn/posts/21991/"/>
    <id>https://chensenlin.cn/posts/21991/</id>
    <published>2018-03-18T15:43:03.000Z</published>
    <updated>2018-03-27T05:34:53.130Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>字典的介绍和基本使用；</p><p>遍历字典和字典嵌套相关知识；</p><a id="more"></a><h4 id="字典及其使用"><a href="#字典及其使用" class="headerlink" title="字典及其使用"></a>字典及其使用</h4><p>在<code>Python</code>中，字典是一系列键—值对。每个键都与一个值相关联，你可以使用键来访问与之 相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何<code>Python</code>对 象用作字典中的值。<br>在Python中，字典用放在花括号<code>{}</code>中的一系列键—值对表示。<br>键—值对是两个相关联的值。指定键时，Python将返回与之相关联的值。键和值之间用冒号 分隔，而键—值对之间用逗号分隔。在字典中，你想存储多少个键—值对都可以。最简单的字典只有一个键—值对。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0[<span class="string">'color'</span>])</span></span> </span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0[<span class="string">'points'</span>])</span></span></span><br></pre></td></tr></table></figure><h5 id="访问字典的值"><a href="#访问字典的值" class="headerlink" title="访问字典的值"></a>访问字典的值</h5><p>要获取与键相关联的值，可依次指定字典名和放在方括号内的键。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0[<span class="string">'color'</span>])</span></span></span><br></pre></td></tr></table></figure><p>字典中可包含任意数量的键—值对。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alien_0</span> = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="添加键-值对"><a href="#添加键-值对" class="headerlink" title="添加键-值对"></a>添加键-值对</h5><p>字典是一种动态结构，可随时在其中添加键—值对。要添加键—值对，可依次指定字典名、用 方括号括起的键和相关联的值。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0)</span></span></span><br><span class="line">alien_0[<span class="string">'y_position'</span>] = <span class="number">25</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0)</span></span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125; <span class="number">13</span></span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'y_position'</span>: <span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，键—值对的排列顺序与添加顺序不同。Python不关心键—值对的添加顺序， 而只关心键和值之间的关联关系。</p></blockquote><h5 id="创建一个空字典"><a href="#创建一个空字典" class="headerlink" title="创建一个空字典"></a>创建一个空字典</h5><p>方法：用一对空的花括号定义一个字典，再分行添加各个键—值对。使用字典来存储用户提供的数据或在编写能自动生成大量键—值对的代码时，通常都需要先 定义一个空字典。</p><p>代码:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br><span class="line">alien_0[<span class="string">'color'</span>] = <span class="string">'green'</span> alien_0[<span class="string">'points'</span>] = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0)</span></span></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h5><p>要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"The alien is "</span> + alien_0[<span class="string">'color'</span>] + <span class="string">"."</span>)</span></span></span><br><span class="line">alien_0[<span class="string">'color'</span>] = <span class="string">'yellow'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"The alien is now "</span> + alien_0[<span class="string">'color'</span>] + <span class="string">"."</span>)</span></span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The alien <span class="keyword">is</span> green.</span><br><span class="line">The alien <span class="keyword">is</span> <span class="keyword">now</span> yellow.</span><br></pre></td></tr></table></figure><h5 id="删除键—值对"><a href="#删除键—值对" class="headerlink" title="删除键—值对"></a>删除键—值对</h5><p>对于字典中不再需要的信息，可使用del语句将相应的键—值对彻底删除。使用<code>del</code>语句时， 必须指定字典名和要删除的键。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0)</span></span></span><br><span class="line"><span class="selector-tag">del</span> alien_0[<span class="string">'points'</span>] print(alien_0)</span><br></pre></td></tr></table></figure><h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><p>一个<code>Python</code>字典可能只包含几个键—值对，也可能包含数百万个键—值对。鉴于字典可能包含 大量的数据，<code>Python</code>支持对字典遍历。字典可用于以各种方式存储信息，因此有多种遍历字典的 方式:可遍历字典的所有键—值对、键或值。</p><h5 id="遍历所有的键-值对"><a href="#遍历所有的键-值对" class="headerlink" title="遍历所有的键-值对"></a>遍历所有的键-值对</h5><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'efermi'</span>, </span><br><span class="line">    <span class="string">'first'</span>: <span class="string">'enrico'</span>, </span><br><span class="line">    <span class="string">'last'</span>: <span class="string">'fermi'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">key</span>, value in user_0.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\nKey: "</span> + <span class="built_in">key</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Value: "</span> + value)</span><br></pre></td></tr></table></figure><p><code>for</code>语句的第二部分包含字典名和方法<code>items()</code>，它返回一个键—值对列表。</p><h5 id="遍历字典中的所有键"><a href="#遍历字典中的所有键" class="headerlink" title="遍历字典中的所有键"></a>遍历字典中的所有键</h5><p><code>keys()</code>获取字典的所有值。</p><p>代码示例:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>, </span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>, </span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>, </span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>, </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">name</span> <span class="built_in">in</span> favorite_languages.keys():</span><br><span class="line">    print(<span class="built_in">name</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">jen</span></span><br><span class="line"><span class="attribute">sarah</span></span><br><span class="line"><span class="attribute">edward</span></span><br><span class="line"><span class="attribute">phil</span></span><br></pre></td></tr></table></figure><h5 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h5><p><code>values()</code>获取字典的所有值。<code>set()</code>可以去除重复的值。</p><p>代码示例:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>, </span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>, </span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>, </span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>, </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">name</span> <span class="built_in">in</span> favorite_languages.values():</span><br><span class="line">    print(<span class="built_in">name</span>)</span><br><span class="line">print(<span class="string">"去重复的值"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">name</span> <span class="built_in">in</span> <span class="built_in">set</span>(favorite_languages.values()):</span><br><span class="line">    print(<span class="built_in">name</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span></span><br><span class="line"><span class="keyword">c</span></span><br><span class="line"><span class="keyword">ruby</span></span><br><span class="line"><span class="keyword">python</span></span><br><span class="line">去重复的值</span><br><span class="line"><span class="keyword">python</span></span><br><span class="line"><span class="keyword">c</span></span><br><span class="line"><span class="keyword">ruby</span></span><br></pre></td></tr></table></figure><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><p>有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典。</p><h5 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h5><p>代码示例:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alien_<span class="number">0</span> = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'points'</span>: <span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">aliens = [alien_<span class="number">0</span>, alien_1, alien_2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    print(alien)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">10</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'points'</span>: <span class="number">15</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="在字典中存储列表"><a href="#在字典中存储列表" class="headerlink" title="在字典中存储列表"></a>在字典中存储列表</h5><p>每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表。</p><p>代码示例:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pizza</span> = &#123;</span><br><span class="line">    <span class="string">'crust'</span>: <span class="string">'thick'</span>,</span><br><span class="line">    <span class="string">'toppings'</span>: [<span class="string">'mushrooms'</span>, <span class="string">'extra cheese'</span>], </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>列表和字典的嵌套层级不应太多。如果嵌套层级比前面的示例多得多，很可能有更简单 的解决问题的方案。</p></blockquote><h5 id="在字典中存储字典"><a href="#在字典中存储字典" class="headerlink" title="在字典中存储字典"></a>在字典中存储字典</h5><p>代码示例:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">users = &#123; <span class="string">'aeinstein'</span>: &#123;</span><br><span class="line">                <span class="string">'first'</span>: <span class="string">'albert'</span>, </span><br><span class="line">                <span class="string">'last'</span>: <span class="string">'einstein'</span>, </span><br><span class="line">                <span class="string">'location'</span>: <span class="string">'princeton'</span>, </span><br><span class="line">                &#125;,</span><br><span class="line">        <span class="string">'mcurie'</span>: &#123;</span><br><span class="line">            <span class="string">'first'</span>: <span class="string">'marie'</span>, </span><br><span class="line">            <span class="string">'last'</span>: <span class="string">'curie'</span>, </span><br><span class="line">            <span class="string">'location'</span>: <span class="string">'paris'</span>, </span><br><span class="line">            &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义了一个名为<code>users</code>的字典，其中包含两个键:用户名<code>&#39;aeinstein&#39;</code>和<code>&#39;mcurie&#39;</code>; 与每个键相关联的值都是一个字典，其中包含用户的名、姓和居住地。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;字典的介绍和基本使用；&lt;/p&gt;
&lt;p&gt;遍历字典和字典嵌套相关知识；&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习04天</title>
    <link href="https://chensenlin.cn/posts/43494/"/>
    <id>https://chensenlin.cn/posts/43494/</id>
    <published>2018-03-17T13:33:13.000Z</published>
    <updated>2018-03-27T05:34:58.618Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：条件判断和<code>if</code>语句的使用；</p><a id="more"></a><h4 id="认识条件判断"><a href="#认识条件判断" class="headerlink" title="认识条件判断"></a>认识条件判断</h4><p>在日常开发中需要用到如果怎么样就怎么样，否则就怎么样的逻辑。主要采用<code>if</code>语句来实现的。</p><p>例如：假设你有一个汽车 列表，并想将其中每辆汽车的名称打印出来。对于大多数汽车，都应以首字母大写的方式打印其 名称，但对于汽车名<code>&#39;bmw&#39;</code>，应以全大写的方式打印。下面的代码遍历一个列表，并以首字母大 写的方式打印其中的汽车名，但对于汽车名<code>&#39;bmw&#39;</code>，以全大写的方式打印:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'subaru'</span>, <span class="string">'toyota'</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car == <span class="string">'bmw'</span>:</span><br><span class="line">        <span class="built_in">print</span>(car.<span class="built_in">upper</span>())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(car.title())</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Audi</span></span><br><span class="line"><span class="keyword">BMW</span></span><br><span class="line"><span class="keyword">Subaru</span></span><br><span class="line"><span class="keyword">Toyota</span></span><br></pre></td></tr></table></figure><h4 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h4><p>每条<code>if</code>语句的核心都是一个值为<code>True</code>或<code>False</code>的表达式，这种表达式被称为条件测试。</p><h5 id="判断是否相等"><a href="#判断是否相等" class="headerlink" title="判断是否相等"></a>判断是否相等</h5><p>相等的语句是:<code>==</code>，赋值的语句是:<code>=</code>，两者需要作区分。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">'like'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(c == <span class="string">'Like'</span>)</span></span></span><br></pre></td></tr></table></figure><p>运行结果:<code>False</code></p><p>如果需要或略大小写可以采用将其转化为小写的方式，函数为:<code>lower()</code>。其余的逻辑同理。</p><h5 id="判断是否不相等"><a href="#判断是否不相等" class="headerlink" title="判断是否不相等"></a>判断是否不相等</h5><p>语句:<code>!=</code>，其余的逻辑类似，不过多阐述。</p><h5 id="比较数字"><a href="#比较数字" class="headerlink" title="比较数字"></a>比较数字</h5><p> 条件语句中可包含各种数学比较，如小于、小于等于、大于、大于等于。</p><p>代码示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; num = <span class="number">29</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; num &lt; <span class="number">21</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; num &gt;= <span class="number">4</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="多个条件判断"><a href="#多个条件判断" class="headerlink" title="多个条件判断"></a>多个条件判断</h5><p>多个条件判断将条件采用关键字<code>and</code>连接，只有全部为<code>true</code>才能满足，否则整体条件就为<code>false</code>。如果是或者的关系采用关键字<code>or</code>，只要满足其中的一个整体条件就为<code>true</code>。如果不确定优先级(或者可读性)的问题，可以采用括号就没个单个条件括起来。</p><p>代码示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> = <span class="number">22</span> </span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_1 = <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> &gt;= <span class="number">21</span> and age_1 &gt;= <span class="number">21</span> </span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_1 = <span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> &gt;= <span class="number">21</span> and age_1 &gt;= <span class="number">21</span> </span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> = <span class="number">22</span> </span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_1 = <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> &gt;= <span class="number">21</span> or age_1 &gt;= <span class="number">21</span> </span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> = <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> &gt;= <span class="number">21</span> or age_1 &gt;= <span class="number">21</span> </span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; False</span><br></pre></td></tr></table></figure><p>采用括号的形式提高可读性和解决优先级的问题。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">age_0</span> &gt;= <span class="number">21</span>) and (<span class="name">age_1</span> &gt;= <span class="number">21</span>)</span><br></pre></td></tr></table></figure><h5 id="检查特定的值是否包含在列表中"><a href="#检查特定的值是否包含在列表中" class="headerlink" title="检查特定的值是否包含在列表中"></a>检查特定的值是否包含在列表中</h5><p>要判断特定的值是否已包含在列表中，可使用关键字<code>in</code>。</p><p>代码示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'onions'</span>, <span class="string">'pineapple'</span>]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">'mushrooms'</span> <span class="keyword">in</span> requested_toppings</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">'pepperoni'</span> <span class="keyword">in</span> requested_toppings</span></span><br><span class="line">False</span><br></pre></td></tr></table></figure><h5 id="检查特定的值是否不包含在列表中"><a href="#检查特定的值是否不包含在列表中" class="headerlink" title="检查特定的值是否不包含在列表中"></a>检查特定的值是否不包含在列表中</h5><p>确定特定的值未包含在列表中，可使用关键字<code>not in</code>。</p><p>使用方法和上面判断是否在列表中一致。</p><h5 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h5><p>布尔表达式的结果要么为<code>True</code>，要么为<code>False</code>,布尔值通常用于记录条件。</p><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><code>if</code>语句</h4><h5 id="简单的if语句"><a href="#简单的if语句" class="headerlink" title="简单的if语句"></a>简单的<code>if</code>语句</h5><p>代码示例:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">num</span> = <span class="number">34</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">num</span> &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"恭喜，您已经成年"</span>)</span><br></pre></td></tr></table></figure><h5 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a><code>if-else</code>语句</h5><p>代码示例:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">num</span> = <span class="number">16</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">num</span> &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"恭喜，您已经成年"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"你好，你未成年呢"</span>)</span><br></pre></td></tr></table></figure><h5 id="if-elif-else-结构"><a href="#if-elif-else-结构" class="headerlink" title="if-elif-else 结构"></a><code>if-elif-else</code> 结构</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">num</span> = <span class="number">16</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">num</span> &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"恭喜，您已经成年"</span>)</span><br><span class="line">elif <span class="built_in">num</span> &gt; <span class="number">15</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"你好，还差3年就成年"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"122"</span>)</span><br></pre></td></tr></table></figure><p><code>elif</code>可以连续多次使用，多加判断即可。同时在某些时候可以省略<code>else</code>的部分。</p><h4 id="使用if语句处理列表"><a href="#使用if语句处理列表" class="headerlink" title="使用if语句处理列表"></a>使用<code>if</code>语句处理列表</h4><h5 id="检查特殊元素"><a href="#检查特殊元素" class="headerlink" title="检查特殊元素"></a>检查特殊元素</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping == <span class="string">'green peppers'</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Sorry, we are out of green peppers right now."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Adding "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\nFinished making your pizza!"</span>)</span><br></pre></td></tr></table></figure><p>循环的时候可以进行判断，然后即可，同时还可以判断是否为空列表。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：条件判断和&lt;code&gt;if&lt;/code&gt;语句的使用；&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习03天</title>
    <link href="https://chensenlin.cn/posts/56807/"/>
    <id>https://chensenlin.cn/posts/56807/</id>
    <published>2018-03-16T07:14:43.000Z</published>
    <updated>2018-03-27T05:35:05.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><ol><li><p>使用列表：切片，遍历切片，复制切片；</p></li><li><p>元组的定义，遍历元组，修改元组变量；</p></li></ol><a id="more"></a><h4 id="使用列表"><a href="#使用列表" class="headerlink" title="使用列表"></a>使用列表</h4><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数<code>range()</code>一样，<code>Python</code> 在到达你指定的第二个索引前面的元素后停止。要输出列表中的前三个元素，需要指定索引<code>0~3</code>， 这将输出分别为<code>0</code>、<code>1</code>和<code>2</code>的元素。</p><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"><span class="built_in">print</span>(players[0:3]) <span class="comment"># 取从索引0开始到第三个结束，最后输出前三个</span></span><br><span class="line"><span class="built_in">print</span>(players[0:3]) <span class="comment"># 输出从索引1到4结束，</span></span><br><span class="line"><span class="built_in">print</span>(players[:4])  <span class="comment"># 没有索引就从列表开头开始，到指定的索引值结束</span></span><br><span class="line"><span class="built_in">print</span>(players[2:]) <span class="comment"># 没有结束索引就知道最后结束</span></span><br><span class="line"><span class="built_in">print</span>(players[-3:]) <span class="comment"># 倒数第三个</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'charles</span>', <span class="symbol">'martina</span>', <span class="symbol">'michael</span>']</span><br><span class="line">[<span class="symbol">'charles</span>', <span class="symbol">'martina</span>', <span class="symbol">'michael</span>']</span><br><span class="line">[<span class="symbol">'charles</span>', <span class="symbol">'martina</span>', <span class="symbol">'michael</span>', <span class="symbol">'florence</span>']</span><br><span class="line">[<span class="symbol">'michael</span>', <span class="symbol">'florence</span>', <span class="symbol">'eli</span>']</span><br><span class="line">[<span class="symbol">'michael</span>', <span class="symbol">'florence</span>', <span class="symbol">'eli</span>']</span><br></pre></td></tr></table></figure><h5 id="遍历切片"><a href="#遍历切片" class="headerlink" title="遍历切片"></a>遍历切片</h5><p>前面我们遍历列表的时候采用<code>for</code>语句来实现的，同理，切片同样可以采用<code>for</code>语句来实现。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"Here are the first three players on my team:"</span>)</span></span></span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:</span><br><span class="line">    print(player.title())</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Here are <span class="keyword">the</span> <span class="keyword">first</span> <span class="literal">three</span> players <span class="keyword">on</span> <span class="title">my</span> <span class="title">team</span>:</span><br><span class="line">Charles</span><br><span class="line">Martina</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure><h5 id="复制切片"><a href="#复制切片" class="headerlink" title="复制切片"></a>复制切片</h5><p>要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引<code>([:])</code>。 这让<code>Python</code>创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表。复制的过程中可以进行赋值或者修改操作。例如新增一个元素。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods[:]</span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"My favorite foods are:"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(my_foods)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"\nMy friend's favorite foods are:"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(friend_foods)</span></span></span><br></pre></td></tr></table></figure><p>代码结果:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">My</span> favorite foods are:</span><br><span class="line">[<span class="symbol">'pizza'</span>, <span class="symbol">'falafel'</span>, <span class="symbol">'carrot</span> cake', <span class="symbol">'cannoli'</span>]</span><br><span class="line"></span><br><span class="line"><span class="type">My</span> friend's favorite foods are:</span><br><span class="line">[<span class="symbol">'pizza'</span>, <span class="symbol">'falafel'</span>, <span class="symbol">'carrot</span> cake', <span class="symbol">'ice</span> cream']</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><h5 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h5><p>列表是可以修改的，主要适合存储程序在运行期间可能会变化的数据。如果需要创建不可修改的值就需要用元组，所以元组可以理解为:不可被修改的列表。但是元组采用的是方括号来标识。和列表同理，均可采用索引来访问元素。</p><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change_list = (<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>) <span class="comment">#定义一个元组 </span></span><br><span class="line"><span class="built_in">print</span>(change_list[0]) <span class="comment">#取元组索引为0 的值</span></span><br><span class="line">change_list[1] = <span class="string">'hello'</span> <span class="comment">#修改元组中索引为1的值 会被报错，因为元组不可以被修改。</span></span><br></pre></td></tr></table></figure><h5 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h5><p>遍历元组和遍历列表一样，采用<code>for</code> 来实现。</p><p>代码如下:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change_list = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">number</span> in change_lis<span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">number</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h5 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h5><p>修改元组的变量不等于修改元组的元素，也就是给存储元组的变量赋值。</p><p>代码示例:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">change_list = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">number</span> in change_lis<span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">number</span>)</span><br><span class="line">    </span><br><span class="line">change_list = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">444</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">number</span> in change_lis<span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">number</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">444</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用列表：切片，遍历切片，复制切片；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元组的定义，遍历元组，修改元组变量；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习02天</title>
    <link href="https://chensenlin.cn/posts/3226/"/>
    <id>https://chensenlin.cn/posts/3226/</id>
    <published>2018-03-15T02:04:23.000Z</published>
    <updated>2018-03-27T05:35:02.080Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><ol><li><p>遍历列表，创建列表，<code>range()</code>函数使用；</p></li><li><p>统计列表数值，列表解析；</p></li></ol><a id="more"></a><h4 id="通过循环的方式遍历列表"><a href="#通过循环的方式遍历列表" class="headerlink" title="通过循环的方式遍历列表"></a>通过循环的方式遍历列表</h4><p>通常情况下，我们需要对列表的所有元素进行操作，这个时候就需要遍历整个列表。循环采用<code>for</code>。</p><p>语法:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> change_name <span class="keyword">in</span> list_name:  </span><br><span class="line">    <span class="builtin-name">print</span>(change_name)</span><br></pre></td></tr></table></figure><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">alice</span></span><br><span class="line"><span class="attribute">david</span></span><br><span class="line"><span class="attribute">carolina</span></span><br></pre></td></tr></table></figure><p>循环的含义其实是将列表的值逐一取出，然后进行其他操作。例如拼接、赋值、运算等。</p><p>代码示例:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician.<span class="built_in">upper</span>() + <span class="string">", that was a great trick!"</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALICE, that was <span class="selector-tag">a</span> great trick!</span><br><span class="line">DAVID, that was <span class="selector-tag">a</span> great trick!</span><br><span class="line">CAROLINA, that was <span class="selector-tag">a</span> great trick!</span><br></pre></td></tr></table></figure><p>注意事项:</p><ol><li><code>python</code>中语法需要注意的主要是忘记<strong>缩进</strong>和不必要的缩进;</li><li>列表后面的<code>:</code>不能遗漏; </li><li>对于位于<code>for</code>语句后面且属于循环组成部分的代码行，一定要缩进。</li></ol><p>例如:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magiciand <span class="keyword">in</span> magicians:</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(magiciand)</span></span></span><br></pre></td></tr></table></figure><p>错误提示:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">File</span> <span class="string">"for.py"</span>, <span class="keyword">line</span> 3</span><br><span class="line">    <span class="keyword">print</span>(magiciand)</span><br><span class="line">        ^</span><br><span class="line">IndentationError: expected <span class="keyword">an</span> indented block</span><br></pre></td></tr></table></figure><h4 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h4><h5 id="range-函数认识"><a href="#range-函数认识" class="headerlink" title="range()函数认识"></a><code>range()</code>函数认识</h5><p><code>range()</code>函数产生指定范围的随机值。</p><p>代码示例:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for <span class="keyword">value</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">value</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  day2 python range.py</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>需要注意的是这是函数的使用，可以理解为<code>[1,7)</code>;</p><h5 id="range-函数创建数字列表"><a href="#range-函数创建数字列表" class="headerlink" title="range()函数创建数字列表"></a><code>range()</code>函数创建数字列表</h5><p>要创建数字列表，可使用函数<code>list()</code>将<code>range()</code>的结果直接转换为列表。如果将<code>range()</code>作为<code>list()</code>的参数，输出将为一个数字列表。同时还可以指定步长。</p><p>代码示例:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">range_num = <span class="type">list</span>(range(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line">print(range_num)</span><br><span class="line">range_num_two = <span class="type">list</span>(range(<span class="number">1</span>,<span class="number">20</span>,<span class="number">2</span>))#指定步长</span><br><span class="line">print(range_num_two)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><h5 id="统计数字列表的值"><a href="#统计数字列表的值" class="headerlink" title="统计数字列表的值"></a>统计数字列表的值</h5><p><code>min()</code> :找出列表的最小值;<br><code>max()</code> :找出列表的最大值;<br><code>sum()</code> :求和;</p><p>代码示例:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">print(min(<span class="type">list</span>))</span><br><span class="line">print(max(<span class="type">list</span>))</span><br><span class="line">print(sum(<span class="type">list</span>))</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure><h5 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h5><p>代码示例:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [<span class="keyword">value</span>**<span class="number">2</span> for <span class="keyword">value</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><p>要使用这种语法，首先指定一个描述性的列表名，如<code>squares</code>;然后，指定一个左方括号， 并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为<code>value**2</code>，它计 算平方值。接下来，编写一个<code>for</code>循环，用于给表达式提供值，再加上右方括号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;遍历列表，创建列表，&lt;code&gt;range()&lt;/code&gt;函数使用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;统计列表数值，列表解析；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习01天</title>
    <link href="https://chensenlin.cn/posts/7874/"/>
    <id>https://chensenlin.cn/posts/7874/</id>
    <published>2018-03-14T06:10:32.000Z</published>
    <updated>2018-03-27T05:35:12.524Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 主要内容：</p><ol><li><p>列表概念，访问列表元素，修改列表元素;</p></li><li><p>删除列表元素，添加列表元素，组织列表;</p></li></ol><a id="more"></a><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>列表由一系列按特定顺序排列的元素组成。可以创建包含字母表中所有字母、数字0~9或 所有家庭成员姓名的列表;也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。鉴于列表通常包含多个元素，给列表指定一个表示复数的名称(如letters、digits或names)是 个不错的主意。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>用方括号<code>([])</code>来表示列表，并用逗号来分隔其中的元素。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bicycles)</span></span></span><br></pre></td></tr></table></figure><h5 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h5><p>访问列表中的元素是通过<strong>索引</strong>获取的，而索引是从0开始的。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bicycles)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"取第0个索引:"</span> + bicycles[<span class="number">0</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"取第1个索引:"</span> + bicycles[<span class="number">1</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"取第最后一个索引的值:"</span> + bicycles[-<span class="number">1</span>])</span></span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜day1 python  dsc.py</span><br><span class="line">[<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line">取第<span class="number">0</span>个索引<span class="symbol">:demo</span></span><br><span class="line">取第<span class="number">1</span>个索引<span class="symbol">:chen</span></span><br><span class="line">取第-<span class="number">1</span>个索引<span class="symbol">:lin</span></span><br></pre></td></tr></table></figure><p>结合<a href="https://www.jianshu.com/p/bf2c88e3974f" target="_blank" rel="noopener">第0天</a>的知识，我们现在对列表元素进行拼接的操作。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line">res = <span class="string">"My name is "</span> + bicycles[<span class="number">0</span>] + <span class="string">"!"</span>;</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My <span class="built_in">name</span> <span class="keyword">is</span> demo!</span><br></pre></td></tr></table></figure><h5 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h5><p>修改元素的值可以理解为通过索引获取需要修改的值，然后重新赋值。</p><p>代码示例:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br><span class="line">bicycles[<span class="number">1</span>] = <span class="string">'Name'</span>;</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br></pre></td></tr></table></figure><p>可以理解为:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line">print(bicycles)</span><br><span class="line">change_res = bicycles[<span class="number">1</span>];</span><br><span class="line">change_res = <span class="string">'Name'</span>;</span><br><span class="line">bicycles[<span class="number">1</span>] = change_res;</span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'demo</span>', <span class="symbol">'chen</span>', <span class="symbol">'sen</span>', <span class="symbol">'lin</span>']</span><br><span class="line">[<span class="symbol">'demo</span>', <span class="symbol">'Name</span>', <span class="symbol">'sen</span>', <span class="symbol">'lin</span>']</span><br></pre></td></tr></table></figure><h5 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h5><p>添加元素主要有两种方式：列表末尾添加元素，列表中插入元素(包含开头)。其中不能影响其他的元素。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'demo'</span>, <span class="string">'chen'</span>, <span class="string">'sen'</span>, <span class="string">'lin'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bicycles)</span></span></span><br><span class="line">bicycles.append(<span class="string">'good'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bicycles)</span></span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'demo</span>', <span class="symbol">'chen</span>', <span class="symbol">'sen</span>', <span class="symbol">'lin</span>']</span><br><span class="line">[<span class="symbol">'demo</span>', <span class="symbol">'chen</span>', <span class="symbol">'sen</span>', <span class="symbol">'lin</span>', <span class="symbol">'good</span>']</span><br></pre></td></tr></table></figure><p>甚至可以创建一个没有任何的元素空的列表，然后不断的追加元素。或者可以从开头或者中间插入元素。</p><p>代码示例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">null_list = []</span><br><span class="line">null_list.<span class="built_in">append</span>(<span class="string">'hello'</span>)</span><br><span class="line">null_list.<span class="built_in">append</span>(<span class="string">'senlin'</span>)</span><br><span class="line">null_list.<span class="built_in">append</span>(<span class="string">'chen'</span>)</span><br><span class="line"><span class="built_in">print</span>(null_list)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'hello</span>', <span class="symbol">'senlin</span>', <span class="symbol">'chen</span>']</span><br></pre></td></tr></table></figure><p><code>insert()</code>可以在任意位置添加元素。</p><p>代码示例:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span><span class="number">_</span>list = [<span class="string">'hello'</span>, <span class="string">'senlin'</span>, <span class="string">'chen'</span>]</span><br><span class="line"><span class="keyword">in</span><span class="number">_</span>list.insert(<span class="number">1</span>, <span class="string">'name'</span>)</span><br><span class="line">print(<span class="keyword">in</span><span class="number">_</span>list)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'hello</span>', <span class="symbol">'name</span>', <span class="symbol">'senlin</span>', <span class="symbol">'chen</span>']</span><br></pre></td></tr></table></figure><h5 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h5><p>删除元素的方法有:<code>del</code>删除、<code>pop()</code>弹出删除、根据<code>值</code>删除。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'on'</span>,<span class="string">'list'</span>,<span class="string">'time'</span>,<span class="string">'man'</span>,<span class="string">'like'</span>,<span class="string">'goods'</span>]</span><br><span class="line"><span class="selector-tag">del</span> list[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"删除第0个元素的值"</span>,list)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"弹出删除第最后一个元素的值"</span>,list.pop()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"弹出删除第一个元素的值"</span>,list.pop(<span class="number">1</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"根据值删除"</span>,list.remove(<span class="string">'man'</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list)</span></span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除第<span class="number">0</span>个元素的值 [<span class="string">'list'</span>, <span class="string">'time'</span>, <span class="string">'man'</span>, <span class="string">'like'</span>, <span class="string">'goods'</span>]</span><br><span class="line">弹出删除第最后一个元素的值 goods</span><br><span class="line">弹出删除第一个元素的值 time</span><br><span class="line">[<span class="string">'list'</span>, <span class="string">'man'</span>, <span class="string">'like'</span>]</span><br><span class="line">根据值删除 <span class="symbol">None</span></span><br><span class="line">[<span class="string">'list'</span>, <span class="string">'man'</span>]</span><br></pre></td></tr></table></figure><h5 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h5><p>组织列表中主要是针对列表进行排序等操作。排序分为临时排序(<code>sorted()</code>)和永久排序(<code>sort()</code>)。<code>reverse()</code>不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排 列顺序:<code>reverse()</code>永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用<code>reverse()</code>即可。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(cars)</span></span> #根据字母永久排序</span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort(reverse=True)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(cars)</span></span> #根据字母相反方向永久排序</span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(cars)</span></span> #倒着打印列表</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'audi</span>', <span class="symbol">'bmw</span>', <span class="symbol">'subaru</span>', <span class="symbol">'toyota</span>']</span><br><span class="line">[<span class="symbol">'audi</span>', <span class="symbol">'bmw</span>', <span class="symbol">'subaru</span>', <span class="symbol">'toyota</span>']</span><br><span class="line">[<span class="symbol">'toyota</span>', <span class="symbol">'subaru</span>', <span class="symbol">'bmwmw</span>', <span class="symbol">'audi</span>']</span><br><span class="line">[<span class="symbol">'subaru</span>', <span class="symbol">'toyota</span>', <span class="symbol">'audi</span>', <span class="symbol">'bmw</span>']</span><br></pre></td></tr></table></figure><h5 id="获取元素长度"><a href="#获取元素长度" class="headerlink" title="获取元素长度"></a>获取元素长度</h5><p>代码示例:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line"><span class="keyword">res</span> = <span class="built_in">len</span>(cars)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br></pre></td></tr></table></figure><p>运行结果为：<code>4</code></p><p>至此，第三章的列表已经学习完毕，本章的函数不是特别多。主要的知识点有概念，获取值，修改和排序等操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 主要内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;列表概念，访问列表元素，修改列表元素;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除列表元素，添加列表元素，组织列表;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习00天</title>
    <link href="https://chensenlin.cn/posts/39399/"/>
    <id>https://chensenlin.cn/posts/39399/</id>
    <published>2018-03-13T03:01:32.000Z</published>
    <updated>2018-03-27T05:35:14.165Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 主要内容：</p><ol><li><p>Python安装运行，变量；</p></li><li><p>数据类型：字符串，数字，空白，注释；</p></li></ol><a id="more"></a><h4 id="安装和准备"><a href="#安装和准备" class="headerlink" title="安装和准备"></a>安装和准备</h4><p>主要查询官网文档即可解决。官网地址：<code>https://www.python.org</code></p><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><h5 id="终端运行"><a href="#终端运行" class="headerlink" title="终端运行"></a>终端运行</h5><p> <img src="https://lh3.googleusercontent.com/-huYumIPhvak/Wqc8LEl8JBI/AAAAAAAAAIE/y4EFH7q2MzkxSlDbbziNxA_7tP3w51xqQCHMYCw/I/15209089555344.jpg" alt=""></p><h5 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h5><p>新建以<code>.py</code>结尾的文件，例如<code>hello.py</code>;打开该文件，输入：<code>print(&quot;Hello World&quot;);</code>,最后运行：<code>python hello.py</code> ;<br><img src="https://lh3.googleusercontent.com/-pskbBl4cTf8/Wqc8L9q0F-I/AAAAAAAAAII/FPdZRl0TEOw5RP5pqN9hqFzseJv1QPYmwCHMYCw/I/15209093371416.jpg" alt=""></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>变量就是保存一个值的信息，将其存储起来，随着程序后面的不断赋值（要求存储一个新的值），该变量的值也会随着改变。如下图所示，<code>change</code>变量就是被重新赋值了。<br> <img src="https://lh3.googleusercontent.com/-OayuSUsslWA/WqdGWWHwsII/AAAAAAAAAIk/-uaMZ5aWXJgt0WxthEGuN106oBWn3ICpwCHMYCw/I/15209097753941.jpg" alt=""></p><p>运行结果如下：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜day0 python hello.py</span><br><span class="line">Hello SenLin Chen!</span><br><span class="line">Hello Python SenLin!</span><br></pre></td></tr></table></figure><h5 id="语法和规则"><a href="#语法和规则" class="headerlink" title="语法和规则"></a>语法和规则</h5><p>语法：<br><code>变量名=赋值的值</code>，例如<code>change</code>是变量名，<code>Hello SenLin Chen!</code>是赋值的值。这样变量<code>change</code>的值就是:<code>Hello SenLin Chen!</code>;</p><p>规则：</p><ol><li>变量名只能包含字母、下划线和数字。数字不能开头。不能包含空格。例如:<code>12_name</code>;合格写法：<code>user_name</code>；</li><li>不能用python的关键字和函数名作为变量名，因为已经被用了，这么想就没事了。</li><li>变量名应该见名知意，尽可能简短。</li></ol><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h5><p>用引号括起来就是字符串。其中有单引号和双引号。<br>例如：<code>&#39;string&#39;</code>,<code>&quot;user_name&quot;</code>等。</p><h5 id="修改字符串大小写"><a href="#修改字符串大小写" class="headerlink" title="修改字符串大小写"></a>修改字符串大小写</h5><p>常用方法:<br> <code>title()</code>:将字符串的首字母设置为大写;<br> <code>upper()</code>:将字符串全部设置为大写;<br> <code>lower()</code>:将字符串全部设置为小写;</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">change = <span class="string">'hello,my name is demo chen!'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(change.title()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(change.upper()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(change.lower()</span></span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  day0 python hello.py</span><br><span class="line">Hello ,My <span class="keyword">Name</span> <span class="keyword">Is</span> Demo Chen!</span><br><span class="line">HELLO ,MY <span class="keyword">NAME</span> <span class="keyword">IS</span> DEMO CHEN!</span><br><span class="line">hello ,my <span class="keyword">name</span> <span class="keyword">is</span> demo chen!</span><br></pre></td></tr></table></figure><h5 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h5><p>使用场景:多个字符串合并为一个字符串形式。</p><p>使用方法:采用<code>+</code>的形式来拼接。</p><p>代码示例:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span> = <span class="string">'hello'</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">'senlin'</span></span><br><span class="line"><span class="attr">user_name</span> = user + <span class="string">'_'</span> + name</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜day0 python user_name.py</span><br><span class="line">hello_senlinenlin</span><br></pre></td></tr></table></figure><h5 id="添加空白"><a href="#添加空白" class="headerlink" title="添加空白"></a>添加空白</h5><p>制表符:<code>\t</code>;换行:<code>\n</code> ;可以组合使用。</p><h5 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h5><p><code>&#39;demo &#39;</code>不等于<code>‘demo’</code>;所以需要去除空白。</p><p>相关函数:</p><p><code>rstrip()</code>:去除末尾的空白;<br><code>lstrip()</code>:去除开头的空白;<br><code>strip()</code>:去除开头和末尾的空白;</p><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>数字主要有整数和浮点数。主要的运算有:加(<code>+</code>)、减(<code>-</code>)、乘(<code>*</code>)、除(<code>/</code>)、乘方(<code>**</code>)等</p><p>代码示例:<br><img src="https://lh3.googleusercontent.com/-vUF45QQauV0/Wqdz5bmhx7I/AAAAAAAAAJA/BRz19oZ_9CgacSPrkjZ18kztD9U2WtgvwCHMYCw/I/15209231027739.jpg" alt=""></p><p><code>str()</code>:将非字符串表示为字符串。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><code>#</code>为Python注释的语法。</p><p>代码示例:</p><p><img src="https://lh3.googleusercontent.com/-QMb6mlL6UPQ/Wqdz6BAc-kI/AAAAAAAAAJE/OhfFweS1H60qIt3n5EcuCZ605FErg8FkQCHMYCw/I/15209234725018.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 主要内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Python安装运行，变量；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据类型：字符串，数字，空白，注释；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>购买付费软件的一点感想</title>
    <link href="https://chensenlin.cn/posts/50238/"/>
    <id>https://chensenlin.cn/posts/50238/</id>
    <published>2018-02-03T03:34:53.000Z</published>
    <updated>2018-03-16T14:00:07.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>使用付费还免费软件？</p></li><li><p>是否应该付费？</p></li><li><p>如何选择付费软件？</p></li></ol><a id="more"></a><h4 id="付费还是免费？"><a href="#付费还是免费？" class="headerlink" title="付费还是免费？"></a>付费还是免费？</h4><p>以前我使用<code>Windows</code>的时候，如果遇到付费的软件我都会选择注册机、注册码、破解工具等方式来解决，同时某盘还存了很多的破解的软件或者工具。现在我会逐步选择付费的软件，同时选择同类产品比较好的软件。因为我觉得付费购买是对人家的一种尊重和支持。同理，我是一个开发者，我希望我的作品别人也能够支持，支持别人其实自己也会得到支持。</p><h4 id="如何付费？"><a href="#如何付费？" class="headerlink" title="如何付费？"></a>如何付费？</h4><p>一般会根据自己的需求来判断自己是否需要这个软件的功能，是否能够解决我自己的问题？是否能够满足的我的需要？然后对比同类产品中付费和免费的相关的产品，如果免费的就足够就不需要考虑付费了。例如卸载软件<code>AppCleaner</code>，还有比它更加优秀的产品，但是我选择这个就可以了。同理，如果付费中我能够接受的价格能够满足就可以了，没有必要去选择最贵的活着最好的，主要是最适合自己的。例如剪切板工具有很多，我选择了<code>iPaste</code>，专注于剪切板功能。</p><p>选择付费是一种需要，也是一种支持，更是一种态度。</p><h4 id="付费软件列表"><a href="#付费软件列表" class="headerlink" title="付费软件列表"></a>付费软件列表</h4><h4 id="iPhone"><a href="#iPhone" class="headerlink" title="iPhone"></a>iPhone</h4><table><thead><tr><th>软件名</th><th>价格(元)</th></tr></thead><tbody><tr><td>Price Tag</td><td>30</td></tr><tr><td>V2er</td><td>8</td></tr><tr><td>白描</td><td>1+6</td></tr><tr><td>熊猫吃短信</td><td>1</td></tr><tr><td>Picsew</td><td>1</td></tr><tr><td>凤凰新闻 Pro</td><td>1</td></tr><tr><td>Holo</td><td>0.00</td></tr><tr><td>小历</td><td>1</td></tr><tr><td>落格输入法</td><td>3</td></tr><tr><td>Piiic</td><td>1</td></tr><tr><td>iPaste</td><td>58.00</td></tr><tr><td>TextGrabber</td><td>30.00</td></tr><tr><td>X.cat Pro</td><td>40</td></tr><tr><td>Cosmos</td><td>0.00</td></tr><tr><td>Shu</td><td>12.00</td></tr><tr><td>鲨鱼记账Pro</td><td>1</td></tr></tbody></table><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><table><thead><tr><th>软件名</th><th>价格(元)</th></tr></thead><tbody><tr><td>Clearview</td><td>78</td></tr><tr><td>MWeb</td><td>98</td></tr><tr><td>Yummy FTP Pro</td><td>198.00</td></tr><tr><td>iPaste</td><td>58</td></tr><tr><td>Xnip</td><td>12/年</td></tr><tr><td>Disk Drill</td><td>189.00</td></tr><tr><td>Total Video Converter</td><td>0.00</td></tr><tr><td>Folx pro 5</td><td>59.00</td></tr><tr><td>iStat Menus 6</td><td>14.00</td></tr></tbody></table><p>暂时就想起来了这么点。。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用付费还免费软件？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是否应该付费？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何选择付费软件？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="生活" scheme="https://chensenlin.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://chensenlin.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="软件" scheme="https://chensenlin.cn/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>《把时间当作朋友》阅读笔记</title>
    <link href="https://chensenlin.cn/posts/60177/"/>
    <id>https://chensenlin.cn/posts/60177/</id>
    <published>2017-12-03T00:32:03.000Z</published>
    <updated>2018-03-28T01:44:00.785Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>该篇笔记是我学习李笑来老师的《把时间当作朋友-升级你的操作系统》的精华笔记。同时本书的内容也是我一直在践行的方法论，每个人都有困境，但不是每个人都会思考。如何思考？如何应用？</p><a id="more"></a><h3 id="第0章-困境"><a href="#第0章-困境" class="headerlink" title="第0章 困境"></a>第0章 困境</h3><h4 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h4><p>一般我们经常说的是就是“没有时间”。真的没有时间吗？</p><h4 id="慌乱"><a href="#慌乱" class="headerlink" title="慌乱"></a>慌乱</h4><p>于是我们开始着急，开始慌乱。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>一个不争的事实：时间是不可被管理的。于是，我们开始反思自己，一切的问题都在自己身上。这一切都需要积累，只有积累到达足够的境界，时间就是我们的朋友，否则就是敌人。人是由概念和方法论组成的。一切靠学识决定，与其花时间管理时间，不如花时间提高自我解决问题的效率。</p><h3 id="第1章-醒悟"><a href="#第1章-醒悟" class="headerlink" title="第1章 醒悟"></a>第1章 醒悟</h3><h4 id="大脑"><a href="#大脑" class="headerlink" title="大脑"></a>大脑</h4><p>我们竟然可以用自己的大脑控制自己的大脑。你的大脑并不是你，你的大脑是（属于）“你的”大脑，运用心智获得解放，不再让自己“跟着感觉走”，成为大脑的奴隶，而是翻身做大脑的主人。</p><h4 id="心智"><a href="#心智" class="headerlink" title="心智"></a>心智</h4><p>一个人的心智就是器过往获得的一切知识以及经验的总和。其中包括基于这些知识和经验造就的思考方式、思考模式。心智，上不封顶下无保底，一旦打开，就可能因为学习而像病毒一样疯狂发展，与此同时，学习能力相应大幅度增长。</p><h3 id="第2章-现实"><a href="#第2章-现实" class="headerlink" title="第2章 现实"></a>第2章 现实</h3><h4 id="速成绝无可能"><a href="#速成绝无可能" class="headerlink" title="速成绝无可能"></a>速成绝无可能</h4><p>期望速成有两个主要原因：第一个是希望自己的欲望马上得到满足；第二个是不懂“有些阶级是无法跨越的”。</p><h4 id="交换才是硬道理"><a href="#交换才是硬道理" class="headerlink" title="交换才是硬道理"></a>交换才是硬道理</h4><p>“我要”的欲望可以用“我有”的东西来满足。如果行李是必须的，那么背动行李的唯一办法不是减负，而是让自己变强。</p><h4 id="完美用不存在"><a href="#完美用不存在" class="headerlink" title="完美用不存在"></a>完美用不存在</h4><p>人人都希翼完美，只可惜，完美并不存在。越是能力差的人，越有那种非常不现实又极其脆弱的完美主义倾向。生活本来就不完美，谁的生活不是磕磕绊绊？谁又在死去的时候没有一丝遗憾？现实如此只能接受。</p><h4 id="未知永远存在"><a href="#未知永远存在" class="headerlink" title="未知永远存在"></a>未知永远存在</h4><p>未知因素给人们带来的心理压力远远超出一般人的想象。首先我们要承认自己不可能全知全晓。其次，对于未知我们要分为两种，一种是永远不能解决的，一种是可预见的未来可以解决。当遇到解决不了的问题时候，我们可以先记下来，然后继续前行。</p><h4 id="现状无法马上摆脱"><a href="#现状无法马上摆脱" class="headerlink" title="现状无法马上摆脱"></a>现状无法马上摆脱</h4><p>人们往往会低估环境的巨大力量。尽管天分很重要，但一个人的能力主要靠积累获得。心怀梦想的时间越长，它沉没的成本就越高。接受现状最优的策略是有什么做什么，有什么用什么，做什么都做好，用什么都用好。</p><h4 id="与时间做朋友"><a href="#与时间做朋友" class="headerlink" title="与时间做朋友"></a>与时间做朋友</h4><p>与时间做朋友方法很简单：用正确的方法做正确的事。几乎一切愚蠢的行为都来自于否定现实、逃避现实。只有接受现实，才能脚踏实地，避免心浮气躁，好高骛远。时间是现实的人的朋友，是不现实的人的敌人。时间不是故意这么做的，只不过事实就是如此。</p><h3 id="第3章-管理"><a href="#第3章-管理" class="headerlink" title="第3章 管理"></a>第3章 管理</h3><h4 id="估算时间"><a href="#估算时间" class="headerlink" title="估算时间"></a>估算时间</h4><p>错误估算任务所需时间是最常见，也是最致命的错误。要想提高估算时间的能力，就要从现在开始养成习惯：做任何事情之前先判断其熟悉程度（陌生程度），再据此判断估算完成任务所需要的时间。</p><h4 id="及时行动"><a href="#及时行动" class="headerlink" title="及时行动"></a>及时行动</h4><p>拖延的主要原因是，首先很多人做事拖延就是“不求有功，但求无过”心态在作祟。只要做事，就一定会出问题。这是现实。其次就是过分在乎外界的评价。如果我们明白了这是现实，就要把这种认识纳入自己的心智，就不会对“最后期限”产生幻觉。所以唯一的策略就是：现在就开始。</p><h4 id="直面困难"><a href="#直面困难" class="headerlink" title="直面困难"></a>直面困难</h4><p>就算没有低估完成任务所需要的时间，就算已经迅速开始执行任务，很多人还是没办法及时完成任务。这类效率低下的原因：回避困难。所有真正踏实做事的人都知道，任何任务的绝大部分都是枯燥而无趣的，所谓有创意的部分，可能连<code>1%</code>都不到。</p><h4 id="关注步骤"><a href="#关注步骤" class="headerlink" title="关注步骤"></a>关注步骤</h4><p>任何事情有三个方面：内容、原因、方法；<br>任何任务有三个属性：何事、何因、何法；<br>在做任何事情之前，通过关注“方法”去反复拆分任务，最终确认每个子任务都是可以完成的，这是一个人不可或缺的功课。这样的习惯会让一个人变得现实、踏实。</p><h4 id="并行串行"><a href="#并行串行" class="headerlink" title="并行串行"></a>并行串行</h4><p>提高效率指的是：原本只能串行的完成的两个任务现在可以并行完成。一些早期的计算机是单任务操作系统，为了提高效率现在有多任务操作系统。很直接的体现就是：DOS是没有办法理解Unix的。让自己拥有“多任务操作系统”方法：可以将大任务分成足够多又不太多的小任务；划分自己的时间。</p><h4 id="感知时间"><a href="#感知时间" class="headerlink" title="感知时间"></a>感知时间</h4><p>可以尝试通过“事件日志”纪录时间。除了自己亲身经历事件一概不记，尽量不记感受，不记感想，只记录事件本身。柳比歇夫的日志是：事件−时间日志。李敖的日志是只记录事件名称，是一种基于结果的纪录。两者差别在于：基于过程的纪录要比基于结果的纪录更为详细。基于过程的纪录有一个更大的好处，结果不好的时候可以更容易找到原由。管理时间基本不可能，那么解决办法是想尽一切办法真正了解自己，真正了解时间，精确感知时间，而后再想尽一切办法使自己以及自己行为和时间合拍，也就是“与时间做朋友”。</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表从来都是最有效的组织工具之一。最方便的列表工具是纸和笔。列表也没有必要工整，只要我们自己能看懂就够了。列表一定要随手可及。最重要的任务只有一个。判断一件事情是否真的重要，标准只有一个：是否对目标（无论是长期还是短期）的实现有益。制作专门的下一阶段任务列表。如果有什么新鲜主意不要放弃，只需要启用另一个列表（下一阶段的任务列表），把他们记录下来，然后马上回到当前的任务列表，专注于现在应该完成的任务上。给每个任务制定一个核对列表。列表一旦开始运作，就一定要执行到底。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>要想加快执行重复性任务的速度，只需在遇到重复性任务时先将其做完一次，然后马上总结、整理，搞清流程，再进一步实践把它变成“闭着眼睛也能做好”的事。这是提高效率、减少失误的根本手段。</p><h4 id="预演"><a href="#预演" class="headerlink" title="预演"></a>预演</h4><p>做任何事情之前，尝试把将要做的事情整个过程在脑子里预演一遍甚至数遍。只有经过大量的预演或者练习，才能够在实际执行任务的过程中有出色的表现。</p><h4 id="验收"><a href="#验收" class="headerlink" title="验收"></a>验收</h4><p>很多人做事半途而废、不了了之的根本原因在于从未想过要给自己执行 任务时的表现设计一个验收机制。最基本的验收机制是针对最终结果的，部 分有经验的人因为在做事之前总是更关注步骤，并会按照需求将任务拆分成 若干子任务，所以，他们甚至会为每一个步骤设计相应的验收机制。</p><p>从更高的层面上说，设计验收机制也是任何一个领导者必须拥有的基本能力。哪怕你领导的只是一个很小的团队，你也必然要向团队成员指派各种各样的任务。在这种情况下，如果你没有设计验收机制，最终的结果肯定会让你非常失望，因为缺少验收机制会使团队成员对自己的工作质量毫不介意， 长此以往，团队的执行力将等于零，作为困队领导者的你也必须承担失败的责任。</p><h3 id="第4章-学习"><a href="#第4章-学习" class="headerlink" title="第4章 学习"></a>第4章 学习</h3><h4 id="学习是投资回报率最高的行为"><a href="#学习是投资回报率最高的行为" class="headerlink" title="学习是投资回报率最高的行为"></a>学习是投资回报率最高的行为</h4><p>每掌握一项新的技能，就感觉自己像重生了一样。学习最关键的一点：任何知识的获取，都是不可逆的。学习的重要起点是：起码学会一种技能。总之，千万不要拒绝学习。</p><h4 id="基本途径"><a href="#基本途径" class="headerlink" title="基本途径"></a>基本途径</h4><p>获取更多知识几乎是我们开拓自身心智的唯一手段。所有人过去知识最基础的手段就是“体验”。比体验更高级的获取知识的手段是“试错”。比较聪明且重要得多的获取知识的手段是“观察”。<br>但是“体验”、“试错”、“观察”都有局限。原因：首先大量的知识无法通过个人亲身“体验”获得。其次有些知识很难通过“试错”获得。所以对此三者进行补充，那就是“阅读”。阅读是人们获取知识更加重要的手段。阅读突破了个人“体验”或“试错”的局限——“体验”和“试错”都只能通过自己，然而通过阅读可以获得别人的体验和试错结果。</p><h4 id="主要手段"><a href="#主要手段" class="headerlink" title="主要手段"></a>主要手段</h4><p>准确的说：正确的思考，才是获得真正意义上的知识的主要手段。思考、求知的过程，某种意义上就是探求因果关系的过程。开启心智、正确思考更值得我们投入时间和精力。</p><h4 id="经验局限"><a href="#经验局限" class="headerlink" title="经验局限"></a>经验局限</h4><p>学习过程最大的障碍就是经验主义。个体经验的局限案例：强光喷嚏反射。群体经验局限在于人类寿命有限。不仅存在无法通过个体或者群体经验获得的知识，还存在与现有经验相悖的知识。</p><h4 id="自学能力"><a href="#自学能力" class="headerlink" title="自学能力"></a>自学能力</h4><p>自学能力的基础就是阅读理解能力。检索能力建立在相当熟练的阅读理解能力基础之上。写作能力在自学能力中占据重要位置。实践能力是自学能力最终转化为真正价值的根本。要永远保持开放的心态。</p><p><image w="859" h="610" describe="name=Notes_1502720025000.jpeg"><br>在频繁失望甚至绝望的情况下居然坚持了那么久，最后我们会发现，原来我们是这么地有毅力啊！</image></p><h3 id="第5章-思考"><a href="#第5章-思考" class="headerlink" title="第5章 思考"></a>第5章 思考</h3><h4 id="相关命题"><a href="#相关命题" class="headerlink" title="相关命题"></a>相关命题</h4><p>有70%以上的人分不清原命题和逆命题之间的区别。每天有无数人因为分不清原命题和逆命题而被他左右。混淆原命题和逆命题，抹杀两者之间的差别，是广告设计者最常用，最舍不得放弃的手段。</p><h4 id="举证责任"><a href="#举证责任" class="headerlink" title="举证责任"></a>举证责任</h4><p>针对某一论点，对立双方的举证难度并非对称的。<br>首先，举证难度受证人能力的影响，因为每个人的学识和专业不同。其次，举证难度受当时所在社会的整体知识水平的影响。最后，举证难度还受需要证明的结论与当时普遍接受的知识相符程度的影响。</p><h4 id="对立论证"><a href="#对立论证" class="headerlink" title="对立论证"></a>对立论证</h4><p>人们可能基于一模一样的原因作出截然相反的决定。也就是用相同的论证证明截然相反的论点。实际上所谓的情商，从根源上朴素地看，还是思考力的问题。</p><h4 id="辨析感悟"><a href="#辨析感悟" class="headerlink" title="辨析感悟"></a>辨析感悟</h4><p>我们都需要清楚道理和感悟的区别。成功者其实没有必要、没有义务，也往往没有足够的时间去阐述所有的细节。与其关注成功者不妨反其道而行之：努力从失败者身上汲取经验。只有经过自己的仔细分辨，真正的成功者的宝贵经验才是无价的。需要额外注意的是，一方面多花心思分辨，另一方面多花时间真正了解自己，以便能够避开“一概而论，生搬硬套”可能带来的灾难。</p><h4 id="克服恐惧"><a href="#克服恐惧" class="headerlink" title="克服恐惧"></a>克服恐惧</h4><p>道理都明白，可是做不到，这是无数人生活中无数人在生命中无数次遭遇的尴尬。人人都有弱点，因为人人都会有恐惧。不要以为我们拥有无比的勇气，不要以为自己没有恐惧，总有那么一刻，我们的勇气无法抵御我们的恐惧。所以，我们有什么理由不能理解别人的恐惧呢？</p><h4 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h4><p>语言是一种便宜（甚至是免费）而又有效的辅助工具。当我们试图批判一个错误的立场的时候，即使是在完全正确地批判的情况下，也总会有这样的抵抗，例如：难道就没有一点可取之处吗？</p><h4 id="勤于思考"><a href="#勤于思考" class="headerlink" title="勤于思考"></a>勤于思考</h4><p>独立思考，只不过是从别人那里知道一个结论的时候，自己动脑重新推演一遍，看看结论的过程有没有漏洞和不合理的地方衡量一下到底有没有道理的过程。权威不是用来迷信的，权威在更多的时候本应该是我们认识世界的辅助工具。</p><h4 id="思维陷阱"><a href="#思维陷阱" class="headerlink" title="思维陷阱"></a>思维陷阱</h4><p>概念不清。学习任何东西最重要就是搞清它们所有的基础概念。永远都是那些能把概念理解透彻、区分清楚的人才能清楚地思考世界，进而改变整个世界。<br>拒绝接受不确定性。拒绝接受不确定性的一个根源在于害怕复杂、奢望简单。</p><h4 id="因果关系"><a href="#因果关系" class="headerlink" title="因果关系"></a>因果关系</h4><p>因果关系往往分析往往不像看上去那么简单，人们往往因为因果关系分析错误而得出错误的结论且不自知，进而莫名其妙做出错误决定，走上错误的道路。</p><p>基础。外因会影响内因，内因同样会影响外因。它们相互影响，互为因果。要做一个用心的人，要用心做事，因为这个世界其实有“心”。分析因果关系是我们在决定是否接受某个观点之前必做的功课。所谓的思维缜密，其实并非常人想象得那么高不可攀，事实上可能恰恰相反—— 做到并不难。很多人做不到的原因无非两个：习惯性拒绝思考和不懂得应该如何思考。而前者往往是由后者长期作用的。</p><h3 id="第6章-交流"><a href="#第6章-交流" class="headerlink" title="第6章 交流"></a>第6章 交流</h3><h4 id="学会倾听"><a href="#学会倾听" class="headerlink" title="学会倾听"></a>学会倾听</h4><p>正如没有人会认为自己不会说一样，几乎没有人会认为自己不会倾听。可事实上，大多数人不懂的应该如何有效的倾听。人类讲话的速度往往低于思考的速度，所以我们在倾听的过程中常常容易走神。如此这般下去终究会真正错过重要的信息。必须想办法获得一种或者一些用于鉴定已知信息有效性的知识。</p><p>那么如何倾听？</p><ol><li>为了做到真正有效的倾听，最需要克制的就是“过早质疑”。 </li><li>在倾听过程中，我们可要利用多余的脑力处理两个方向的信息：“回顾”与“预期”。</li><li>一旦决定倾听，就要主要主动帮助说者进入“倾诉”状态。</li></ol><h4 id="说与不说"><a href="#说与不说" class="headerlink" title="说与不说"></a>说与不说</h4><p>有一种极为常见却又几乎总是被忽略的现象：明明是同样的话，自己说出来就不像那么回事。通过努力和积累成为能说更多话的人。有时候，我们知道自己说的是对的，但是没有人听得进去，绝大多数人面临这样的情况多少有些失落，甚至愤怒，可事实上，这往往说明一个问题 ：还没有赢得足够的重视。</p><h4 id="交流守则"><a href="#交流守则" class="headerlink" title="交流守则"></a>交流守则</h4><ol><li>有意义讨论的前提是双方不仅要“相互竞争”，更要“相互合作”。</li><li>真理是独立存在的，他从来不会依附于任何个人或者集体。</li><li>真理不变，也不会因任何人而变；不停变化的只是人们对真理的理解或者解释。</li></ol><h4 id="正确复述"><a href="#正确复述" class="headerlink" title="正确复述"></a>正确复述</h4><p>沟通在很多时候并不像看起来那么容易。在这个过程中我们常常会因为某个参与者而导致“有效沟通根本不可能达成”。如果甲乙两个人需要沟通，那么他们沟通的过程是：甲将他想法用语言表达出来，已用自己的方式去理解甲的语言，然后反过来再次进行。此过程可能重复多次。但是两者的编码、解码机制常常不相同。所以为了保证沟通顺利，往往需要添加一个验证机制，或者说反馈机制。</p><p>这就需要我们在生活或者工作中给予别人一个反馈或者回复，让对方对此事有一定的知情权这样才能保证事情的沟通顺畅，效率更高。</p><h4 id="勤与反思"><a href="#勤与反思" class="headerlink" title="勤与反思"></a>勤与反思</h4><p>在讨论问题的时候，我们常常会被对方“固执已见”挫败，但对方眼里，我们可能也是“固执已见”的，只不过是程度不同而已。</p><p>所以，我们更需要如何做呢？</p><ol><li><strong>深刻了解经验的局限</strong>。摆脱经验主义的第一个技巧：了解经验的局限性；</li><li><strong>时时刻刻保持警惕</strong>。经验需要归纳，更需要经过演绎来论证；</li><li><strong>使用记录，使自己能够记住更多经验</strong>。做记录是一个很好的习惯；</li><li><strong>通过观察和阅读汲取他人的经验</strong>。观察和阅读是扩充有限的自我经验的最好的手段；</li><li><strong>试用类比来跨越未知与已知的障碍</strong>。类比思考几乎是跨越已知与未知之间鸿沟的唯一手段；</li><li><strong>耐心等待以拥有不能快速获得的经验</strong>。遇到不理解的问题或者不确定的想法先记录下来，保持耐心。</li></ol><h3 id="第7章-应用"><a href="#第7章-应用" class="headerlink" title="第7章 应用"></a>第7章 应用</h3><h4 id="兴趣"><a href="#兴趣" class="headerlink" title="兴趣"></a>兴趣</h4><p>首先，有些人并不是对自己正在做的事情没有兴趣，而是没有能力把目前正在做的事情做好。其次，人们常常说他们真正感兴趣的事情是其他事情。综上，我觉得兴趣不是那么重要，至少没有我们想象的那么重要。因为往往不是有兴趣才能做好，而是做好了才有兴趣。 </p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>方法固然重要，但是比起“用功”来说，方法几乎可以忽略不计。所有学习上的成功只依靠两件事：策略和坚持。而坚持本身就是最重要的策略。坚持就是重复；而重复就是，说到底就是时间投入，准确地说，是大量时间的投入。与其不停地寻找“更好的方法”，还不如马上行动。</p><h4 id="痛苦"><a href="#痛苦" class="headerlink" title="痛苦"></a>痛苦</h4><p>对痛苦的深刻感受，会扭曲或者抹杀人们感知其他事物的能力。痛苦就是这样，一旦我们学会在痛苦的时候运用心智把自己的注意力转移到其他地方去，痛苦就几近自动消失，而且在它被我重新注意之前绝不会回来。</p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>在很多人眼里，所谓的成功，不过是比较的产物，归根结底就四个字：高人一等。但是，比较是相对的，相对是永远没有尽头的。很多时候比较是一个坑，大坑。再干脆点说，比较是陷阱。</p><p>生活无法彻底回避比较，但是无须比较就可以获得快乐和幸福也同样很多，只不过常常被人忽略。其实比成功更重要的是<strong>成长</strong>。如果成功是和别人比较，那么成长就是和自己比较。显然，成长比成功意义更大。</p><h4 id="运气"><a href="#运气" class="headerlink" title="运气"></a>运气</h4><p>首先，运气是存在的；其次，运气是有好坏之分的。但是，相信运气是缺乏自制力的表现。当好运气发生在自己身上时，我们应该开心，当坏运气降临在我们身上时，我们呢应该平静接受。<strong>心态很重要</strong>。尽管对生活不应该盲目乐观，但一定不能失望悲观。</p><h4 id="人脉"><a href="#人脉" class="headerlink" title="人脉"></a>人脉</h4><p>基于某种原因，生活中广受欢迎的人总是少数。所有的人都喜欢并重视甚至偏爱一种交换：<strong>公平交换</strong>。资源更多的人更喜欢也更可能可能与另外一个资源数量或者质量对等的人进行交换。所以，承认知己能力有限，是保持心理健康的前提。</p><h4 id="自卑"><a href="#自卑" class="headerlink" title="自卑"></a>自卑</h4><p>每一个人都有一个愿望中的自己，同时还有一个感觉中的自己。最佳状态是：愿望中的自己=真实中的自己=感觉中的自己。但是很多时候是约等于并非等于，但是也有部分人处于不等于状态。</p><ol><li>作为社会的一员，大多数人并没有意识到，有时候，整个社会向他灌输的关联可能是错的。</li><li>优秀的人更容易自卑。</li><li>停止嘲笑他人。</li><li>忘记自己的优点。</li><li>在自己语言中，把“优点”和“缺点”这两个词换成“特点”。</li><li>适当地放纵一下自己。</li></ol><h4 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h4><p>素材固然重要，但是，如果提前确定一个方向或者目标，就可能会积累很多原本想象不到的素材——惊喜连连。不要无谓的相信什么“突然闪现的灵感”的存在。灵感这东西就算存在，也不会平白无故出现的，而是肯定有来历的。所以，以此类推，所有的成功，在本质上都是一样的。先花上相当的时间和精力去锁定一个方向和目标。确定它现实可行之后，运用心智的力量，在这个方向上投入更多的时间，比更多再多一点的时间，“必然”就会产生。</p><h4 id="鼓励"><a href="#鼓励" class="headerlink" title="鼓励"></a>鼓励</h4><p><strong>永远鼓励身边的人，哪怕多少有些盲目</strong>。当我们不停地鼓励所有人的时候，最大的受益者其实是我们自己，因力最终我们会发现，自己开始进入一种他人无法想象的伏态，成为一个不需要他人鼓励的人。这一点很重要。因为很多人之所以做事裹足不前，浪费时间 甚至生命，原因就在于他们是必须获得别人的鼓励才敢于行动的人。可是，我们却能成为另外一种人——我们可以不需要被别人鼓励——这是一种境界。</p><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><p><strong>任何人都不可能100%地有效率，至少不可能总是100%地有效率</strong>。确定自己是什么样的人，熟悉自己的专注的重点，然后通过一定的练习，进而控制我们的大脑。当一个人经过一段时间的训练后，分割时间的方法对他来说就没有必要了。因为，他应该已经可以比较自如的专注在他应该做的、非常重要的事情上了——无论这件事情是有趣还是无趣。</p><h4 id="节奏"><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h4><p>我们应该把自己的生活节奏调的慢一点。想办法提前预支自己需要掌握哪些技能，在确定它们是自己可以通过练习真正熟练掌握的技能，而后制定长期的计划，一步一点稳步执行。</p><h4 id="物极必反"><a href="#物极必反" class="headerlink" title="物极必反"></a>物极必反</h4><ol><li>不要盲目的试图减少睡眠时间。</li><li>尽量不要减少与家人交流的时间。</li><li>最好不要放弃自己的社交时间。</li></ol><h4 id="自我证明"><a href="#自我证明" class="headerlink" title="自我证明"></a>自我证明</h4><p>长久的观察和思考，有益干锻炼自己心气平和的能力，反正别人 如何认为、如何评价、如何议论根本没办法影响一个人所处的状态。但是，一旦某个人开始为此心烦意乱、坐卧不安，甚至为此有一些无聊的举动，那么他就不仅是倒霉，而且是可怜了， 因为他已经被别人左右了。被别人左右，是一个人相当可悲的状态之一。</p><h3 id="第8章-积累"><a href="#第8章-积累" class="headerlink" title="第8章 积累"></a>第8章 积累</h3><h4 id="坚信积累"><a href="#坚信积累" class="headerlink" title="坚信积累"></a>坚信积累</h4><p>现状会影响一个人的心态。如果有一个人心态受到了现状的影响，那么他的行为和决策都会随之发生变化。进而，行为和决策的结果形成新的现状，再次影响心态，形成恶性循环。</p><p>任何积累都需要时间，而且必然需要漫长的时间。也正是因为如此，大多数人才不肯积累，不愿积累，甚至不谢积累。相信积累的力量本质就是相信复利的力量。</p><p>越早醒悟越好，坚信积累的力量。</p><h4 id="越早越好"><a href="#越早越好" class="headerlink" title="越早越好"></a>越早越好</h4><p><strong>越早开始的事情没有几个，理财排在第一位</strong>。理财困难与矛盾来自这样一个窘境：<strong>很难很早开心，等开始的时候已经太晚</strong>。</p><p>为什么今天的人需要重视理财？第一：人们的平均寿命变得长了；第二：人们可获得收入的工作时间也随之变成了。</p><p>理财最难得两个地方是<strong>对自我的把控</strong>和<strong>对风险的把控</strong>。但是这两个技能可以通过习得而习得，最重要的是必须通过<strong>反复实践</strong>。</p><p><strong>转移注意力</strong>是抵御诱惑的一种常用的有效手段。理财的风险意识必须通过自己的实践、失败、教训、总结才能获得的东西。</p><p>所以，理财这件事越早越好，开始学会理财，可能是改善自制力、自控力的方法。</p><h4 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h4><ol><li>从今天开始存钱。</li><li>该花就花，有时候就要活在当下。（有时候）</li><li>爱面子其实是绝大多数人存不下钱的根本原因。</li><li>给自己培养一个不那么费钱的兴趣爱好。</li><li>开源节流。开源是正途，努力提高未来的营收能力才是当务之急，花时间提高自己的大脑。</li><li>给自己一个机会，在5年之后体会一下突然可以动用一笔闲钱的机会。</li></ol><h4 id="躺着赚钱"><a href="#躺着赚钱" class="headerlink" title="躺着赚钱"></a>躺着赚钱</h4><p>收入分为两种：主动收入和被动收入。主动收入：就是必须做点什才能获取的收入。被动则相反。例如利息。很多人不仅没有“睡后收入”，还有“睡后支出”。<strong>分期消费的负担其实很重</strong>。<strong>创作</strong>和<strong>课程</strong>都是是一个睡后收入的不错选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该篇笔记是我学习李笑来老师的《把时间当作朋友-升级你的操作系统》的精华笔记。同时本书的内容也是我一直在践行的方法论，每个人都有困境，但不是每个人都会思考。如何思考？如何应用？&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="https://chensenlin.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="阅读" scheme="https://chensenlin.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="笔记" scheme="https://chensenlin.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="生活" scheme="https://chensenlin.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
