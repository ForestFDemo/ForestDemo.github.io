<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DemoChen</title>
  
  <subtitle>你好，我是森林</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://forestfdemo.github.io/"/>
  <updated>2018-03-16T06:56:18.696Z</updated>
  <id>https://forestfdemo.github.io/</id>
  
  <author>
    <name>DemoChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习02天</title>
    <link href="https://forestfdemo.github.io/posts/3226/"/>
    <id>https://forestfdemo.github.io/posts/3226/</id>
    <published>2018-03-15T02:04:23.000Z</published>
    <updated>2018-03-16T06:56:18.696Z</updated>
    
    <content type="html"><![CDATA[<h4 id="通过循环的方式遍历列表"><a href="#通过循环的方式遍历列表" class="headerlink" title="通过循环的方式遍历列表"></a>通过循环的方式遍历列表</h4><p>通常情况下，我们需要对列表的所有元素进行操作，这个时候就需要遍历整个列表。循环采用<code>for</code>。</p><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for change_name in list_name:  </span><br><span class="line">    print(change_name)</span><br></pre></td></tr></table></figure><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [&apos;alice&apos;, &apos;david&apos;, &apos;carolina&apos;]</span><br><span class="line">for magician in magicians:</span><br><span class="line">    print(magician)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alice</span><br><span class="line">david</span><br><span class="line">carolina</span><br></pre></td></tr></table></figure><p>循环的含义其实是将列表的值逐一取出，然后进行其他操作。例如拼接、赋值、运算等。</p><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [&apos;alice&apos;, &apos;david&apos;, &apos;carolina&apos;]</span><br><span class="line">for magician in magicians:</span><br><span class="line">    print(magician.upper() + &quot;, that was a great trick!&quot;)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALICE, that was a great trick!</span><br><span class="line">DAVID, that was a great trick!</span><br><span class="line">CAROLINA, that was a great trick!</span><br></pre></td></tr></table></figure><p>注意事项:</p><ol><li><code>python</code>中语法需要注意的主要是忘记<strong>缩进</strong>和不必要的缩进;</li><li>列表后面的<code>:</code>不能遗漏; </li><li>对于位于<code>for</code>语句后面且属于循环组成部分的代码行，一定要缩进。</li></ol><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [&apos;alice&apos;, &apos;david&apos;, &apos;carolina&apos;]</span><br><span class="line">for magiciand in magicians:</span><br><span class="line">print(magiciand)</span><br></pre></td></tr></table></figure><p>错误提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  File &quot;for.py&quot;, line 3</span><br><span class="line">    print(magiciand)</span><br><span class="line">        ^</span><br><span class="line">IndentationError: expected an indented block</span><br></pre></td></tr></table></figure><h4 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h4><h5 id="range-函数认识"><a href="#range-函数认识" class="headerlink" title="range()函数认识"></a><code>range()</code>函数认识</h5><p><code>range()</code>函数产生指定范围的随机值。</p><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for value in range(1,7):</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  day2 python range.py</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>需要注意的是这是函数的使用，可以理解为<code>[1,7)</code>;</p><h5 id="range-函数创建数字列表"><a href="#range-函数创建数字列表" class="headerlink" title="range()函数创建数字列表"></a><code>range()</code>函数创建数字列表</h5><p>要创建数字列表，可使用函数<code>list()</code>将<code>range()</code>的结果直接转换为列表。如果将<code>range()</code>作为<code>list()</code>的参数，输出将为一个数字列表。同时还可以指定步长。</p><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">range_num = list(range(1,4))</span><br><span class="line">print(range_num)</span><br><span class="line">range_num_two = list(range(1,20,2))#指定步长</span><br><span class="line">print(range_num_two)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3]</span><br><span class="line">[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]</span><br></pre></td></tr></table></figure><h5 id="统计数字列表的值"><a href="#统计数字列表的值" class="headerlink" title="统计数字列表的值"></a>统计数字列表的值</h5><figure class="highlight plain"><figcaption><span>:找出列表的最小值;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```max()``` :找出列表的最大值;</span><br><span class="line">```sum()``` :求和;</span><br><span class="line"></span><br><span class="line">代码示例:</span><br></pre></td></tr></table></figure><p>list = [1,2,3,4,5,6,7]<br>print(min(list))<br>print(max(list))<br>print(sum(list))<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">运行结果:</span><br></pre></td></tr></table></figure></p><p>1<br>7<br>28<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 列表解析</span><br><span class="line"></span><br><span class="line">代码示例:</span><br></pre></td></tr></table></figure></p><p>squares = [value**2 for value in range(1,11)]<br>print(squares)<br><code>`</code></p><p>要使用这种语法，首先指定一个描述性的列表名，如<code>squares</code>;然后，指定一个左方括号， 并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为<code>value**2</code>，它计 算平方值。接下来，编写一个<code>for</code>循环，用于给表达式提供值，再加上右方括号。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;通过循环的方式遍历列表&quot;&gt;&lt;a href=&quot;#通过循环的方式遍历列表&quot; class=&quot;headerlink&quot; title=&quot;通过循环的方式遍历列表&quot;&gt;&lt;/a&gt;通过循环的方式遍历列表&lt;/h4&gt;&lt;p&gt;通常情况下，我们需要对列表的所有元素进行操作，这个时候就需要遍历整个
      
    
    </summary>
    
      <category term="Python" scheme="https://forestfdemo.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://forestfdemo.github.io/tags/Python/"/>
    
      <category term="学习" scheme="https://forestfdemo.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python学习01天</title>
    <link href="https://forestfdemo.github.io/posts/7874/"/>
    <id>https://forestfdemo.github.io/posts/7874/</id>
    <published>2018-03-14T06:10:32.000Z</published>
    <updated>2018-03-16T06:56:24.442Z</updated>
    
    <content type="html"><![CDATA[<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>列表由一系列按特定顺序排列的元素组成。可以创建包含字母表中所有字母、数字0~9或 所有家庭成员姓名的列表;也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。鉴于列表通常包含多个元素，给列表指定一个表示复数的名称(如letters、digits或names)是 个不错的主意。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>用方括号<code>([])</code>来表示列表，并用逗号来分隔其中的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]</span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure><h5 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h5><p>访问列表中的元素是通过<strong>索引</strong>获取的，而索引是从0开始的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]</span><br><span class="line">print(bicycles)</span><br><span class="line">print(&quot;取第0个索引:&quot; + bicycles[0])</span><br><span class="line">print(&quot;取第1个索引:&quot; + bicycles[1])</span><br><span class="line">print(&quot;取第最后一个索引的值:&quot; + bicycles[-1])</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜day1 python  dsc.py</span><br><span class="line">[&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]</span><br><span class="line">取第0个索引:demo</span><br><span class="line">取第1个索引:chen</span><br><span class="line">取第-1个索引:lin</span><br></pre></td></tr></table></figure><p>结合<a href="https://www.jianshu.com/p/bf2c88e3974f" target="_blank" rel="noopener">第0天</a>的知识，我们现在对列表元素进行拼接的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]</span><br><span class="line">res = &quot;My name is &quot; + bicycles[0] + &quot;!&quot;;</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My name is demo!</span><br></pre></td></tr></table></figure><h5 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h5><p>修改元素的值可以理解为通过索引获取需要修改的值，然后重新赋值。</p><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]</span><br><span class="line">print(bicycles)</span><br><span class="line">bicycles[1] = &apos;Name&apos;;</span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure><p>可以理解为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]</span><br><span class="line">print(bicycles)</span><br><span class="line">change_res = bicycles[1];</span><br><span class="line">change_res = &apos;Name&apos;;</span><br><span class="line">bicycles[1] = change_res;</span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]</span><br><span class="line">[&apos;demo&apos;, &apos;Name&apos;, &apos;sen&apos;, &apos;lin&apos;]</span><br></pre></td></tr></table></figure><h5 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h5><p>添加元素主要有两种方式：列表末尾添加元素，列表中插入元素(包含开头)。其中不能影响其他的元素。</p><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]</span><br><span class="line">print(bicycles)</span><br><span class="line">bicycles.append(&apos;good&apos;)</span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]</span><br><span class="line">[&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;, &apos;good&apos;]</span><br></pre></td></tr></table></figure><p>甚至可以创建一个没有任何的元素空的列表，然后不断的追加元素。或者可以从开头或者中间插入元素。</p><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">null_list = []</span><br><span class="line">null_list.append(&apos;hello&apos;)</span><br><span class="line">null_list.append(&apos;senlin&apos;)</span><br><span class="line">null_list.append(&apos;chen&apos;)</span><br><span class="line">print(null_list)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;hello&apos;, &apos;senlin&apos;, &apos;chen&apos;]</span><br></pre></td></tr></table></figure><p><code>insert()</code>可以在任意位置添加元素。</p><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in_list = [&apos;hello&apos;, &apos;senlin&apos;, &apos;chen&apos;]</span><br><span class="line">in_list.insert(1, &apos;name&apos;)</span><br><span class="line">print(in_list)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;hello&apos;, &apos;name&apos;, &apos;senlin&apos;, &apos;chen&apos;]</span><br></pre></td></tr></table></figure><h5 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h5><p>删除元素的方法有:<code>del</code>删除、<code>pop()</code>弹出删除、根据<code>值</code>删除。</p><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list = [&apos;on&apos;,&apos;list&apos;,&apos;time&apos;,&apos;man&apos;,&apos;like&apos;,&apos;goods&apos;]</span><br><span class="line">del list[0]</span><br><span class="line">print(&quot;删除第0个元素的值&quot;,list)</span><br><span class="line">print(&quot;弹出删除第最后一个元素的值&quot;,list.pop())</span><br><span class="line">print(&quot;弹出删除第一个元素的值&quot;,list.pop(1))</span><br><span class="line">print(list)</span><br><span class="line">print(&quot;根据值删除&quot;,list.remove(&apos;man&apos;))</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除第0个元素的值 [&apos;list&apos;, &apos;time&apos;, &apos;man&apos;, &apos;like&apos;, &apos;goods&apos;]</span><br><span class="line">弹出删除第最后一个元素的值 goods</span><br><span class="line">弹出删除第一个元素的值 time</span><br><span class="line">[&apos;list&apos;, &apos;man&apos;, &apos;like&apos;]</span><br><span class="line">根据值删除 None</span><br><span class="line">[&apos;list&apos;, &apos;man&apos;]</span><br></pre></td></tr></table></figure><h5 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h5><p>组织列表中主要是针对列表进行排序等操作。排序分为临时排序(<code>sorted()</code>)和永久排序(<code>sort()</code>)。<code>reverse()</code>不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排 列顺序:<code>reverse()</code>永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用<code>reverse()</code>即可。</p><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]</span><br><span class="line">cars.sort()</span><br><span class="line">print(cars) #根据字母永久排序</span><br><span class="line">cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]</span><br><span class="line">cars.sort(reverse=True)</span><br><span class="line">print(cars) #根据字母相反方向永久排序</span><br><span class="line">cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]</span><br><span class="line">cars.reverse()</span><br><span class="line">print(cars) #倒着打印列表</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&apos;audi&apos;, &apos;bmw&apos;, &apos;subaru&apos;, &apos;toyota&apos;]</span><br><span class="line">[&apos;audi&apos;, &apos;bmw&apos;, &apos;subaru&apos;, &apos;toyota&apos;]</span><br><span class="line">[&apos;toyota&apos;, &apos;subaru&apos;, &apos;bmwmw&apos;, &apos;audi&apos;]</span><br><span class="line">[&apos;subaru&apos;, &apos;toyota&apos;, &apos;audi&apos;, &apos;bmw&apos;]</span><br></pre></td></tr></table></figure><h5 id="获取元素长度"><a href="#获取元素长度" class="headerlink" title="获取元素长度"></a>获取元素长度</h5><p>代码示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]</span><br><span class="line">res = len(cars)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>运行结果为：<code>4</code></p><p>至此，第三章的列表已经学习完毕，本章的函数不是特别多。主要的知识点有概念，获取值，修改和排序等操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h4&gt;&lt;h5 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h5&gt;&lt;p&gt;列表由
      
    
    </summary>
    
      <category term="Python" scheme="https://forestfdemo.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://forestfdemo.github.io/tags/Python/"/>
    
      <category term="学习" scheme="https://forestfdemo.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python学习00天</title>
    <link href="https://forestfdemo.github.io/posts/39399/"/>
    <id>https://forestfdemo.github.io/posts/39399/</id>
    <published>2018-03-13T03:01:32.000Z</published>
    <updated>2018-03-16T06:53:54.529Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装和准备"><a href="#安装和准备" class="headerlink" title="安装和准备"></a>安装和准备</h4><p>主要查询官网文档即可解决。官网地址：<code>https://www.python.org</code></p><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><h5 id="终端运行"><a href="#终端运行" class="headerlink" title="终端运行"></a>终端运行</h5><p> <img src="https://lh3.googleusercontent.com/-huYumIPhvak/Wqc8LEl8JBI/AAAAAAAAAIE/y4EFH7q2MzkxSlDbbziNxA_7tP3w51xqQCHMYCw/I/15209089555344.jpg" alt=""></p><h5 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h5><p>新建以<code>.py</code>结尾的文件，例如<code>hello.py</code>;打开该文件，输入：<code>print(&quot;Hello World&quot;);</code>,最后运行：<code>python hello.py</code> ;<br><img src="https://lh3.googleusercontent.com/-pskbBl4cTf8/Wqc8L9q0F-I/AAAAAAAAAII/FPdZRl0TEOw5RP5pqN9hqFzseJv1QPYmwCHMYCw/I/15209093371416.jpg" alt=""></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>变量就是保存一个值的信息，将其存储起来，随着程序后面的不断赋值（要求存储一个新的值），该变量的值也会随着改变。如下图所示，<code>change</code>变量就是被重新赋值了。<br> <img src="https://lh3.googleusercontent.com/-OayuSUsslWA/WqdGWWHwsII/AAAAAAAAAIk/-uaMZ5aWXJgt0WxthEGuN106oBWn3ICpwCHMYCw/I/15209097753941.jpg" alt=""></p><p>运行结果如下：<br><code>➜  day0 python hello.pyHello SenLin Chen!Hello Python SenLin!</code></p><h5 id="语法和规则"><a href="#语法和规则" class="headerlink" title="语法和规则"></a>语法和规则</h5><p>语法：<br><code>变量名=赋值的值</code>，例如<code>change</code>是变量名，<code>Hello SenLin Chen!</code>是赋值的值。这样变量<code>change</code>的值就是:<code>Hello SenLin Chen!</code>;</p><p>规则：</p><ol><li>变量名只能包含字母、下划线和数字。数字不能开头。不能包含空格。例如:<code>12_name</code>;合格写法：<code>user_name</code>；</li><li>不能用python的关键字和函数名作为变量名，因为已经被用了，这么想就没事了。</li><li>变量名应该见名知意，尽可能简短。</li></ol><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h5><p>用引号括起来就是字符串。其中有单引号和双引号。<br>例如：<code>&#39;string&#39;</code>,<code>&quot;user_name&quot;</code>等。</p><h5 id="修改字符串大小写"><a href="#修改字符串大小写" class="headerlink" title="修改字符串大小写"></a>修改字符串大小写</h5><p>常用方法:<br> <code>title()</code>:将字符串的首字母设置为大写;<br> <code>upper()</code>:将字符串全部设置为大写;<br> <code>lower()</code>:将字符串全部设置为小写;</p><p>代码示例:<br><code>change = &#39;hello,my name is demo chen!&#39; print(change.title()) print(change.upper()) print(change.lower())</code></p><p>运行结果:<br><code>➜  day0 python hello.pyHello ,My Name Is Demo Chen!HELLO ,MY NAME IS DEMO CHEN!hello ,my name is demo chen!</code></p><h5 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h5><p>使用场景:多个字符串合并为一个字符串形式。</p><p>使用方法:采用<code>+</code>的形式来拼接。</p><p>代码示例:<br><code>user = &#39;hello&#39; name = &#39;senlin&#39; user_name = user + &#39;_&#39; + name</code></p><p>运行结果:<br><code>➜day0 python user_name.pyhello_senlinenlin</code></p><h5 id="添加空白"><a href="#添加空白" class="headerlink" title="添加空白"></a>添加空白</h5><p>制表符:<code>\t</code>;换行:<code>\n</code> ;可以组合使用。</p><h5 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h5><p><code>&#39;demo &#39;</code>不等于<code>‘demo’</code>;所以需要去除空白。</p><p>相关函数:</p><p><code>rstrip()</code>:去除末尾的空白;<br><code>lstrip()</code>:去除开头的空白;<br><code>strip()</code>:去除开头和末尾的空白;</p><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>数字主要有整数和浮点数。主要的运算有:加(<code>+</code>)、减(<code>-</code>)、乘(<code>*</code>)、除(<code>/</code>)、乘方(<code>**</code>)等</p><p>代码示例:<br><img src="https://lh3.googleusercontent.com/-vUF45QQauV0/Wqdz5bmhx7I/AAAAAAAAAJA/BRz19oZ_9CgacSPrkjZ18kztD9U2WtgvwCHMYCw/I/15209231027739.jpg" alt=""></p><p><code>str()</code>:将非字符串表示为字符串。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><code>#</code>为Python注释的语法。</p><p>代码示例:</p><p><img src="https://lh3.googleusercontent.com/-QMb6mlL6UPQ/Wqdz6BAc-kI/AAAAAAAAAJE/OhfFweS1H60qIt3n5EcuCZ605FErg8FkQCHMYCw/I/15209234725018.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装和准备&quot;&gt;&lt;a href=&quot;#安装和准备&quot; class=&quot;headerlink&quot; title=&quot;安装和准备&quot;&gt;&lt;/a&gt;安装和准备&lt;/h4&gt;&lt;p&gt;主要查询官网文档即可解决。官网地址：&lt;code&gt;https://www.python.org&lt;/code&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Python" scheme="https://forestfdemo.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://forestfdemo.github.io/tags/Python/"/>
    
      <category term="学习" scheme="https://forestfdemo.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
