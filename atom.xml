<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你好我是森林</title>
  
  <subtitle>你好我是森林</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chensenlin.cn/"/>
  <updated>2018-04-15T10:05:50.600Z</updated>
  <id>https://chensenlin.cn/</id>
  
  <author>
    <name>你好我是森林</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python网络数据采集之图像识别与文字处理|第10天</title>
    <link href="https://chensenlin.cn/posts/55181/"/>
    <id>https://chensenlin.cn/posts/55181/</id>
    <published>2018-04-15T10:02:11.000Z</published>
    <updated>2018-04-15T10:05:50.600Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>图像识别与文字处理；</p><p>使用<code>Pillow</code>库和<code>Tesseract</code>。</p><a id="more"></a><h3 id="图像识别与文字处理"><a href="#图像识别与文字处理" class="headerlink" title="图像识别与文字处理"></a>图像识别与文字处理</h3><p>将图像翻译成文字一般被称为光学文字识别(<code>Optical Character Recognition</code>，<code>OCR</code>)。可以实现 <code>OCR</code> 的底层库并不多，目前很多库都是使用共同的几个底层 <code>OCR</code> 库，或者是在上面进行定制。</p><h4 id="OCR库概述"><a href="#OCR库概述" class="headerlink" title="OCR库概述"></a>OCR库概述</h4><p><code>Python</code>常用的<code>OCR</code>库有两个：<code>Pillow</code> 和 <code>Tesseract</code>。每个库都可以从它们的网站上下载并安装(<code>http://pillow.readthedocs.org/installation.html</code> 和<br><code>https://pypi.python.org/pypi/pytesseract</code>)，或者用第三方管理器(像 <code>pip</code>)通过<code>“pillow”</code>和 <code>“pytesseract”</code>进行安装。</p><h5 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h5><p><code>Pillow</code> 是从 <code>Python 2.x</code>版本的 <code>Python</code>图像库(<code>Python Imaging Library</code>，<code>PIL</code>)分出来的，支持<code>Python 3.x</code>版本。和<code>PIL</code>一样，<code>Pillow</code>也可以轻松地导入代码，并通过大量的过滤、修饰甚至像素级的变换操作处理图片:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageFilter</span><br><span class="line"></span><br><span class="line">kitten = Image.open(<span class="string">"demo.jpg"</span>)<span class="comment">#打开图片</span></span><br><span class="line">blurryKitten = kitten.filter(Imagefilter.GaussianBlur)</span><br><span class="line">blurryKitten.save(<span class="string">"demo_two.jpg"</span>)<span class="comment">#另存为</span></span><br><span class="line">blurryKitten.show()</span><br></pre></td></tr></table></figure><h5 id="Tesseract"><a href="#Tesseract" class="headerlink" title="Tesseract"></a>Tesseract</h5><p><code>Tesseract</code> 是目前公认最优秀、最精确的开源 <code>OCR</code> 系统。<code>Tesseract</code> 也具有很高的灵活性。它可以通过训练识别出任何字体，也可以识别出任何<code>Unicode</code>字符。</p><p><code>Tesseract</code> 是一个 <code>Python</code>的命令行工具，不是通过 <code>import</code>语句导入的库。安装之后，要用 <code>tesseract</code> 命令在<code>Python</code>的外面运行。</p><p>安装 Tesseract</p><p>Windows:<a href="https://code.google.com/p/tesseract-ocr/ downloads/list" target="_blank" rel="noopener">点击下载安装</a></p><p>Linux:<code>sudo apt-get tessertact-ocr</code></p><p>Mac: <code>brew install tesseract</code>;也可以下载源码安装</p><h5 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h5><p><code>NumPy</code> 是一个非常强大的库，具有大量线性代数 以及大规模科学计算的方法。因为<code>NumPy</code>可以用数学方法把图片表示成巨大的像素数组，所以它可以流畅地配合 <code>Tesseract</code> 完成任务。</p><p>NumPy 可以通过第三方包管理器(比如 pip)来安装:<code>pip install numpy</code></p><h4 id="处理格式规范的文字"><a href="#处理格式规范的文字" class="headerlink" title="处理格式规范的文字"></a>处理格式规范的文字</h4><p>例如通过运行<code>Tesseract</code>，读取文件并把结果写到一个文本文件中:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesseract text.tif textoutput | cat test.txt</span><br></pre></td></tr></table></figure><p><code>Tesseract</code> 最大的缺点是对渐变背景色的处理。利用<code>Pillow</code> 库，我们可以创建一个阈值过滤器来去掉渐变的背景色，只把文字留下来，从而让图片更加清晰，便于 <code>Tesseract</code> 读取:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanFile</span><span class="params">(filePath, newFilePath)</span>:</span> </span><br><span class="line">    image = Image.open(filePath)</span><br><span class="line">    <span class="comment"># 对图片进行阈值过滤，然后保存</span></span><br><span class="line">    image = image.point(<span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span> x&lt;<span class="number">143</span> <span class="keyword">else</span> <span class="number">255</span>)</span><br><span class="line">    image.save(newFilePath)</span><br><span class="line">    <span class="comment"># 调用系统的tesseract命令对图片进行OCR识别 </span></span><br><span class="line">    subprocess.call([<span class="string">"tesseract"</span>, newFilePath, <span class="string">"output"</span>])</span><br><span class="line">    <span class="comment"># 打开文件读取结果</span></span><br><span class="line">    outputFile = open(<span class="string">"output.txt"</span>, <span class="string">'r'</span>) </span><br><span class="line">    print(outputFile.read())</span><br><span class="line">    outputFile.close()</span><br><span class="line"></span><br><span class="line">cleanFile(<span class="string">"text_2.jpg"</span>, <span class="string">"text_2_clean.png"</span>)</span><br></pre></td></tr></table></figure><p>在提交给 <code>Tesseract</code> 处理之前，那些带标题的、带有大片空白的图片，或者有其他问题的图 片，都应该做预处理。</p><p>今天的内容没有特别难，我写的比较简单，爬取网络的图片和验证码识别还没写，先从简单的消化。</p><p>欢迎你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图像识别与文字处理；&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Pillow&lt;/code&gt;库和&lt;code&gt;Tesseract&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之采集JavaScript|第09天</title>
    <link href="https://chensenlin.cn/posts/12496/"/>
    <id>https://chensenlin.cn/posts/12496/</id>
    <published>2018-04-11T10:53:21.000Z</published>
    <updated>2018-04-11T11:00:38.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>了解JavaScript；</p><p>使用<code>selenium</code>库和<code>phantomjs</code>。</p><a id="more"></a><h3 id="采集JavaScript"><a href="#采集JavaScript" class="headerlink" title="采集JavaScript"></a>采集JavaScript</h3><p>客户端脚本语言是运行在浏览器而非服务器上的语言。客户端语言成功的前提是浏览器拥有正确地解释和执行这类语言的能力。</p><p>到目前为止，<code>JavaScript</code> 是网络上最常用也是支持者最多的客户端脚本语言。它可以收集 用户的跟踪数据，不需要重载页面直接提交表单，在页面嵌入多媒体文件，甚至运行网页游戏。那些看起来非常简单的页面背后通常使用了许多 <code>JavaScript</code> 文件。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> &gt;</span><br><span class="line">    alert(<span class="string">"这是一个JavaScript的文件！"</span>)</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h4><p>几个关键字了解一下：弱类型语言，其他语言有的基本都有。<code>JavaScript</code>里所有的变量都用 <code>var</code>关键词字进行定义，可以把函数作为变量使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> fibonacci = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = b; b = a + b;</span><br><span class="line">        a = temp; <span class="keyword">return</span> b;</span><br><span class="line">    &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fibInstance = fibonacci();</span><br><span class="line"><span class="built_in">console</span>.log(fibInstance()+<span class="string">" is in the Fibonacci sequence"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fibInstance()+<span class="string">" is in the Fibonacci sequence"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fibInstance()+<span class="string">" is in the Fibonacci sequence"</span>); </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>上面的例子看一下就好，熟悉一下就可以，就是这么简单。</p><p>常用的JavaScript库有很多。例如<a href="https://jquery.com" target="_blank" rel="noopener">jQuery</a>,<a href="https://analytics.google.com/" target="_blank" rel="noopener">Google Analytics</a>,<a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React</a>等等，了解一下。</p><h4 id="Ajax和动态HTML"><a href="#Ajax和动态HTML" class="headerlink" title="Ajax和动态HTML"></a>Ajax和动态HTML</h4><p>与网站服务器通信的唯一方式，就是发出<code>HTTP</code>请求获取新页面,如果提交表单之后，或从服务器获取信息之后，网站的页面不需要重新刷新，那么你访问的网站就在用<code>Ajax</code> 技术。</p><p><code>Ajax</code>全称是<code>Asynchronous JavaScript and XML</code>(异步 <code>JavaScript</code>和 <code>XML</code>)，网站不需要使用单独的页面请求就可以和网络服务器进行交互 (收发信息)。</p><p>在<code>Python</code>中用<code>Selenium</code>执行<code>JavaScript</code><a href="http://www.seleniumhq.org/" target="_blank" rel="noopener">Selenium</a>是一个强大的网络数据采集工具，其最初是为网站自动化测试而开发的。近几年，它还被广泛用于获取精确的网站快照，因为它们可以直接运行在浏览器上。<code>Selenium</code>可以让浏览器自动加载页面，获取需要的数据，甚至页面截屏，或者判断网站上某些动作是否发生。<code>Selenium</code> 自己不带浏览器，它需要与第三方浏览器结合在一起使用。</p><p>我们可以用一个叫<a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">PhantomJS</a>的工具代替真实的浏览器。<code>PhantomJS</code> 是一个“无头”(<code>headless</code>)浏览器。它会把网站加载到内存并执行页面上的 <code>JavaScript</code>，但是它不会向用户展示网页的图形界面。把 <code>Selenium</code>和 <code>PhantomJS</code> 结合在一 起，就可以运行一个非常强大的网络爬虫了，可以处理 <code>cookie</code>、<code>JavaScrip</code>、<code>header</code>，以及任何你需要做的事情。</p><p>安装<code>Selenium</code>可以去其官网下载安装，也可以直接<code>pip</code>来安装这个库，非常简单。但是<code>PhantomJS</code>不是库，不能直接用<code>pip</code>安装，可以直接去官网<a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">下载页面</a>下载安装，同时如果你是Mac的用户可以通过<code>homebrew</code>安装：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>phantomjs</span><br></pre></td></tr></table></figure><p><code>Selenium</code> 库是一个在 <code>WebDriver</code> 上调用的 <code>API</code>。<code>WebDriver</code> 有点儿像可以加载网站的浏览器，但是它也可以像 <code>BeautifulSoup</code> 对象一样用来查找页面元素，与页面上的元素进行交互 (发送文本、点击等)，以及执行其他动作来运行网络爬虫。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=<span class="string">'/usr/local/Cellar/phantomjs/2.1.1/bin/phantomjs'</span>) <span class="comment">#创建了一个新的Selenium WebDriver，需要指定自己的phantomjs路径</span></span><br><span class="line">driver.get(<span class="string">"http://pythonscraping.com/pages/javascript/ajaxDemo.html"</span>) <span class="comment">#用WebDriver加载页面</span></span><br><span class="line">time.sleep(<span class="number">3</span>) <span class="comment">#暂停3秒执行</span></span><br><span class="line">print(driver.find_element_by_id(<span class="string">'content'</span>).text) <span class="comment">#查看页面内容</span></span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><h4 id="处理重定向"><a href="#处理重定向" class="headerlink" title="处理重定向"></a>处理重定向</h4><p>客户端重定向是在服务器将页面内容发送到浏览器之前，由浏览器执行 <code>JavaScript</code> 完成的 页面跳转，而不是服务器完成的跳转。当使用浏览器访问页面的时候，有时很难区分这两种重定向。由于客户端重定向执行很快，加载页面时你甚至感觉不到任何延迟，所以会让你觉得这个重定向就是一个服务器端重定向。</p><p>服务端重定向可以通过<code>urllib</code>库来解决，但是客户端的重定向不能这样处理。<code>Selenium</code> 可以执行这种 <code>JavaScript</code> 重定向，和它处理其他 <code>JavaScript</code> 的方式一样;但是这类重定向的主要问题是什么时候停止页面监控，也就是说，怎么识别一个页面已经完成重定向。</p><p>我们可以用一种智能的方法来检测客户端重定向是否完成，首先从页面开始加载 时就“监视”<code>DOM</code> 中的一个元素，然后重复调用这个元素直到 <code>Selenium</code> 抛出一个<code>StaleElementReferenceException</code> 异常;也就是说，元素不在页面的 <code>DOM</code> 里了，说明这时网站已经跳转:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webelement <span class="keyword">import</span> WebElement</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> StaleElementReferenceException</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waitForLoad</span><span class="params">(driver)</span>:</span></span><br><span class="line">    elem = driver.find_element_by_tag_name(<span class="string">"html"</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">20</span>:</span><br><span class="line">            print(<span class="string">"Timing out after 10 seconds and returning"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        time.sleep(<span class="number">.5</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            elem == driver.find_element_by_tag_name(<span class="string">"html"</span>)</span><br><span class="line">        <span class="keyword">except</span> StaleElementReferenceException:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=<span class="string">'drivers/phantomjs/phantomjs-2.1.1-macosx/bin/phantomjs'</span>)</span><br><span class="line">driver.get(<span class="string">"http://pythonscraping.com/pages/javascript/redirectDemo1.html"</span>)</span><br><span class="line">waitForLoad(driver)</span><br><span class="line">print(driver.page_source)</span><br></pre></td></tr></table></figure><p>正式邀请你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解JavaScript；&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;selenium&lt;/code&gt;库和&lt;code&gt;phantomjs&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之登录窗口采集处理|第08天</title>
    <link href="https://chensenlin.cn/posts/64604/"/>
    <id>https://chensenlin.cn/posts/64604/</id>
    <published>2018-04-08T12:56:14.000Z</published>
    <updated>2018-04-11T11:01:03.530Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>利用<code>Requests</code>库处理<code>Cookie</code>、<code>session</code>等方式的登录。</p><a id="more"></a><h3 id="登录窗口采集处理"><a href="#登录窗口采集处理" class="headerlink" title="登录窗口采集处理"></a>登录窗口采集处理</h3><p>如果我们采集的网站需要我们登录后才能获取我们想要的数据，这就需要进一步处理登录这个问题。</p><p>登录的原理很简单，即前台向服务器传输数据进行验证。传输的方式有很多种，例如<code>GET</code>、<code>POST</code>；页面表单基本上可以看成是一种用户提交 <code>POST</code>请求的方式，且这种请求方式是服务器能够理解和使用的。</p><h4 id="Python-Requests库"><a href="#Python-Requests库" class="headerlink" title="Python Requests库"></a>Python Requests库</h4><p>除了<code>Python</code>的标准库<code>urllib</code>库，还有第三方库可以选择，例如：<code>Requests</code>。主要擅长处理那些复杂的 <code>HTTP</code> 请求、<code>cookie</code>、<code>header</code>(响应头和请求头)等内容的 <code>Python</code>第三方库。</p><blockquote><p>项目地址：<a href="https://github.com/kennethreitz/requests/" target="_blank" rel="noopener">https://github.com/kennethreitz/requests/</a></p></blockquote><p>安装的方式也很简单。例如<code>pip</code>安装，或者下载源码安装。</p><blockquote><p>源码地址：<a href="https://github.com/kennethreitz/requests/tarball/master" target="_blank" rel="noopener">https://github.com/kennethreitz/requests/tarball/master</a></p></blockquote><h4 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h4><p>提交表单一般是<code>HTML</code>的方式可以实现，且大多也采用这样的方式进行提交。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"processing.php"</span>&gt;</span></span><br><span class="line">Nickename: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"nickename"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们<code>Python</code>的用<code>Requests</code>库来提交十分简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">params = &#123;<span class="string">'name'</span>: <span class="string">'Ryan'</span>, <span class="string">'username'</span>: <span class="string">'Mitchell'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">"http://pythonscraping.com/files/processing.php"</span>, data=params)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h4 id="单选按钮、复选框等输入"><a href="#单选按钮、复选框等输入" class="headerlink" title="单选按钮、复选框等输入"></a>单选按钮、复选框等输入</h4><p>无论表单的字段看起来多么复杂，仍然只有两件事是需要关注的:字段名称和值。字段名称可以通过查看源代码寻找<code>name</code> 属性轻易获得。而字段的值有时会比较复杂，有可能是在表单提交之前通过 <code>JavaScript</code> 生成的。</p><p>我们可以通过抓包或者浏览器的网络请求信息来判断，例如：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>chensenlin.cn?c=hello<span class="variable">&amp;m</span>=senlin</span><br></pre></td></tr></table></figure><p><code>Python</code>需要理解为：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'c'</span>:<span class="string">'hello'</span>,<span class="string">'m'</span>:<span class="string">'senlin'</span>&#125;</span><br></pre></td></tr></table></figure><p>具体查看方法可以参考下图所示：</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/2018-04-08-15231905765646.jpg" alt=""></p><h4 id="提交文件或者图像"><a href="#提交文件或者图像" class="headerlink" title="提交文件或者图像"></a>提交文件或者图像</h4><p><code>HTML</code>提交文件的时候，需要添加一个参数<code>enctype=&quot;multipart/form-data&quot;</code>,声明这是文件上传的类型。同时<code>input</code>的<code>type</code>为<code>file</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">from</span> <span class="attr">action</span>=<span class="string">"uploadFile.php"</span> <span class="attr">metoh</span>=<span class="string">"post"</span>  <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">uploadFile:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"filename"</span>&gt;</span></span><br><span class="line">提交：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同理，<code>Python Requests</code> 库对这种表单的处理方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">     files = &#123;<span class="string">'uploadFile'</span>: open(<span class="string">'../files/Python-logo.png'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">     r = requests.post(<span class="string">"https:chensenlin.cn?c=filename&amp;m=upload"</span>,files=files)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h4 id="处理登录和Cookie"><a href="#处理登录和Cookie" class="headerlink" title="处理登录和Cookie"></a>处理登录和Cookie</h4><p>网站大多都用 <code>cookie</code> 跟踪用户是否已登录的状态信息。一旦网站验证了你的登录权证，它就会将它们保存在你的浏览器的 <code>cookie</code> 中，里面通常包含一个服务器生成的令牌、登录有效时限和状态跟踪信息。网站会把这个<code>cookie</code>当作信息验证的证据，在你浏览网站的每个页面时出示给服务器。</p><p>根据我们上面的逻辑用<code>Requests</code>库跟踪<code>cookie</code>的代码示例也比较简单： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">params = &#123;<span class="string">'username'</span>: <span class="string">'demochen'</span>, <span class="string">'password'</span>: <span class="string">'password'</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">"http://pythonscraping.com/pages/cookies/welcome.php"</span>, params)</span><br><span class="line">print(<span class="string">"Cookie is set to:"</span>)</span><br><span class="line">print(r.cookies.get_dict())</span><br><span class="line">print(<span class="string">"-----------"</span>)</span><br><span class="line">print(<span class="string">"Going to profile page..."</span>)</span><br><span class="line">r = requests.get(<span class="string">"http://pythonscraping.com/pages/cookies/profile.php"</span>,cookies=r.cookies)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>不过也有<code>session</code>的方式进行登录,但是<code>Requests</code>库的<code>session</code>函数处理也很方便。具体和<code>cookie</code>类似，不过多阐述,或者查看文档了解也可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">session = requests.Session()</span><br><span class="line">params = &#123;<span class="string">'username'</span>: <span class="string">'username'</span>, <span class="string">'password'</span>: <span class="string">'password'</span>&#125;</span><br><span class="line">s = session.post(<span class="string">"http://pythonscraping.com/pages/cookies/welcome.php"</span>, params)</span><br><span class="line">print(<span class="string">"Cookie is set to:"</span>)</span><br><span class="line">print(s.cookies.get_dict())</span><br><span class="line">print(<span class="string">"-----------"</span>)</span><br><span class="line">print(<span class="string">"Going to profile page..."</span>)</span><br><span class="line">s = session.get(<span class="string">"http://pythonscraping.com/pages/cookies/profile.php"</span>) </span><br><span class="line">print(s.text)</span><br></pre></td></tr></table></figure><p>值得注意的是，登录还有一种是用<code>HTTP</code>基本接入认证的方式。<code>Requests</code>库有一个 <code>auth</code>模块专门用来处理 <code>HTTP</code> 认证:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> AuthBase</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line">     auth = HTTPBasicAuth(<span class="string">'ryan'</span>, <span class="string">'password'</span>)</span><br><span class="line">     r = requests.post(url=<span class="string">"http://pythonscraping.com/pages/auth/login.php"</span>, auth=</span><br><span class="line">auth)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>正式邀请你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用&lt;code&gt;Requests&lt;/code&gt;库处理&lt;code&gt;Cookie&lt;/code&gt;、&lt;code&gt;session&lt;/code&gt;等方式的登录。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之处理自然语言|第07天</title>
    <link href="https://chensenlin.cn/posts/54692/"/>
    <id>https://chensenlin.cn/posts/54692/</id>
    <published>2018-04-04T14:13:44.000Z</published>
    <updated>2018-04-11T11:01:02.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>处理自然语言包括自然语言工具包和数据概括。</p><a id="more"></a><h3 id="处理自然语言"><a href="#处理自然语言" class="headerlink" title="处理自然语言"></a>处理自然语言</h3><h4 id="概括数据"><a href="#概括数据" class="headerlink" title="概括数据"></a>概括数据</h4><p>在之前我们了解了如何把文本内容分解成 <code>n-gram</code> 模型，或者说是<code>n</code>个单词长度的词组。从最基本的功能上说，这个集合可以用来确定这段文字中最常用的单词和短语。另外，还可以提取原文中那些最常用的短语周围的句子，对原文进行看似合理的概括。</p><p>例如我们根据威廉 ·亨利 ·哈里森的就职演全文进行分析。<a href="http://pythonscraping.com/files/inaugurationSpeech.txt" target="_blank" rel="noopener">文章地址</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanSentence</span><span class="params">(sentence)</span>:</span></span><br><span class="line">    sentence = sentence.split(<span class="string">' '</span>)</span><br><span class="line">    sentence = [word.strip(string.punctuation+string.whitespace) <span class="keyword">for</span> word <span class="keyword">in</span> sentence]</span><br><span class="line">    sentence = [word <span class="keyword">for</span> word <span class="keyword">in</span> sentence <span class="keyword">if</span> len(word) &gt; <span class="number">1</span> <span class="keyword">or</span> (word.lower() == <span class="string">'a'</span> <span class="keyword">or</span> word.lower() == <span class="string">'i'</span>)]</span><br><span class="line">    <span class="keyword">return</span> sentence</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanInput</span><span class="params">(content)</span>:</span></span><br><span class="line">    content = content.upper()</span><br><span class="line">    content = re.sub(<span class="string">'\n'</span>, <span class="string">' '</span>, content)</span><br><span class="line">    content = bytes(content, <span class="string">'UTF-8'</span>)</span><br><span class="line">    content = content.decode(<span class="string">'ascii'</span>, <span class="string">'ignore'</span>)</span><br><span class="line">    sentences = content.split(<span class="string">'. '</span>)</span><br><span class="line">    <span class="keyword">return</span> [cleanSentence(sentence) <span class="keyword">for</span> sentence <span class="keyword">in</span> sentences]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNgramsFromSentence</span><span class="params">(content, n)</span>:</span></span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(content)-n+<span class="number">1</span>):</span><br><span class="line">        output.append(content[i:i+n])</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNgrams</span><span class="params">(content, n)</span>:</span></span><br><span class="line">    content = cleanInput(content)</span><br><span class="line">    ngrams = Counter()</span><br><span class="line">    ngrams_list = []</span><br><span class="line">    <span class="keyword">for</span> sentence <span class="keyword">in</span> content:</span><br><span class="line">        newNgrams = [<span class="string">' '</span>.join(ngram) <span class="keyword">for</span> ngram <span class="keyword">in</span> getNgramsFromSentence(sentence, n)]</span><br><span class="line">        ngrams_list.extend(newNgrams)</span><br><span class="line">        ngrams.update(newNgrams)</span><br><span class="line">    <span class="keyword">return</span>(ngrams)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content = str(</span><br><span class="line">      urlopen(<span class="string">'http://pythonscraping.com/files/inaugurationSpeech.txt'</span>).read(),</span><br><span class="line">              <span class="string">'utf-8'</span>)</span><br><span class="line">ngrams = getNgrams(content, <span class="number">3</span>)</span><br><span class="line">print(ngrams)</span><br></pre></td></tr></table></figure><h4 id="自然语言工具包"><a href="#自然语言工具包" class="headerlink" title="自然语言工具包"></a>自然语言工具包</h4><p>自然语言工具包(<code>Natural Language Toolkit，NLTK</code>)就是这样一个 <code>Python</code>库，用于识别和标记英语文本中各个词的词性(<code>parts of speech</code>)。</p><h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><p><code>NLTK</code>网站(<code>http://www.nltk.org/install.html</code>)。安装软件比较简单，例如<code>pip</code>安装。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  psysh git:(master) pip <span class="keyword">install</span> nltk</span><br><span class="line">Collecting nltk</span><br><span class="line">  <span class="keyword">Using</span> cached nltk<span class="number">-3.2</span><span class="number">.5</span>.tar.gz</span><br><span class="line">Requirement already satisfied: six <span class="keyword">in</span> /usr/<span class="keyword">local</span>/lib/python3<span class="number">.6</span>/site-packages (<span class="keyword">from</span> nltk)</span><br><span class="line">Building wheels <span class="keyword">for</span> collected packages: nltk</span><br><span class="line">  Running setup.py bdist_wheel <span class="keyword">for</span> nltk ... done</span><br><span class="line">  <span class="keyword">Stored</span> <span class="keyword">in</span> <span class="keyword">directory</span>: /<span class="keyword">Users</span>/demo/<span class="keyword">Library</span>/Caches/pip/wheels/<span class="number">18</span>/<span class="number">9</span>c/<span class="number">1</span>f/<span class="number">276</span>bc3f421614062468cb1c9d695e6086d0c73d67ea363c501</span><br><span class="line">Successfully built nltk</span><br><span class="line">Installing collected packages: nltk</span><br><span class="line">Successfully installed nltk<span class="number">-3.2</span><span class="number">.5</span></span><br><span class="line">You <span class="keyword">are</span> <span class="keyword">using</span> pip <span class="keyword">version</span> <span class="number">9.0</span><span class="number">.1</span>, however <span class="keyword">version</span> <span class="number">9.0</span><span class="number">.3</span> <span class="keyword">is</span> available.</span><br><span class="line">You should <span class="keyword">consider</span> upgrading via the <span class="string">'pip install --upgrade pip'</span> command.</span><br></pre></td></tr></table></figure><p>检测一下就OK </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  psysh git:(master) python</span><br><span class="line">Python 3.6.4 (default, Mar  1 2018, 18:36:50)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import nltk</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>输入<code>nltk.download()</code>就可以看到NLTK下载器。</p><p> <img src="http://p6o0wncuf.bkt.clouddn.com/15228511042439.jpg" alt="NLTK下载器"></p><p>默认下载全部的包，新手减少排除的相关的麻烦。</p><p><img src="http://p6o0wncuf.bkt.clouddn.com/15228513456509.jpg" alt="安装相关包"></p><h4 id="用NLTK做统计分析"><a href="#用NLTK做统计分析" class="headerlink" title="用NLTK做统计分析"></a>用NLTK做统计分析</h4><p>用<code>NLTK</code>做统计分析一般是从<code>Text</code>对象开始的。<code>Text</code>对象可以通过下面的方法用简单的 <code>Python</code>字符串来创建:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> word_tokenize </span><br><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> Text</span><br><span class="line"></span><br><span class="line">tokens = word_tokenize(<span class="string">"哈哈哈哈哈"</span>)</span><br><span class="line">text = Text(tokens)</span><br></pre></td></tr></table></figure><p><code>word_tokenize</code>函数的参数可以是任何<code>Python</code>字符串。如果你手边没有任何长字符串，但是还想尝试一些功能，在<code>NLTK</code>库里已经内置了几本书，可以用<code>import</code>函数导入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.book <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>统计文本中不重复的单词，然后与总单词数据进行比较:<code>&gt;&gt;&gt; len(text6)/len(words)</code>。</p><p>正式邀请你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;处理自然语言包括自然语言工具包和数据概括。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之数据清洗|第06天</title>
    <link href="https://chensenlin.cn/posts/48792/"/>
    <id>https://chensenlin.cn/posts/48792/</id>
    <published>2018-04-03T14:20:34.000Z</published>
    <updated>2018-04-11T11:01:01.137Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：数据清洗。</p><a id="more"></a><p>昨天有朋友在微信问我怎么没有更新，昨天回家整理了一些相关的东西，没来得及写文章。今天一个朋友听说我在简书分享，也和我一同加入了简书，很喜欢这样的感觉。之前军哥跟我说过，慢慢尝试去写，然后会有一部分人会被你影响，我发现是真的，真的能够影响到一部分人。闲话少说，开始今天的内容。</p><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><blockquote><p>从本章开始，内容稍微复杂一点，但也不是那么难。</p></blockquote><p>记得之前我在爬去<code>boss</code>网站的招聘信息的时候，抓取的数据并非我们所理想的样式，后面经过处理后，成为一个自己想要的样子，这个过程可以理解为数据清洗。这里的处理是在代码处理的，不是手工完成。</p><h4 id="编写代码清洗数据"><a href="#编写代码清洗数据" class="headerlink" title="编写代码清洗数据"></a>编写代码清洗数据</h4><p>在此之前需要了解一下<code>n-gram</code>模型，它表示文字或语言中的<code>n</code> 个连续的单词组成的序列。在进行自然语言分析时，使用 <code>n-gram</code>或者寻找常用词组，可以很容易地把一句话分解成若干个文字片段。更多详情可以去<a href="https://en.wikipedia.org/wiki/N-gram" target="_blank" rel="noopener">维基</a>查看一下，或者自行搜索。</p><p>下面通过代码将返回维基百科词条<code>“Python programming language”</code>的<code>2-gram</code>列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNgrams</span><span class="params">(content, n)</span>:</span></span><br><span class="line">  content = content.split(<span class="string">' '</span>)</span><br><span class="line">  output = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(content)-n+<span class="number">1</span>):</span><br><span class="line">    output.append(content[i:i+n])</span><br><span class="line">  <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://en.wikipedia.org/wiki/Python_(programming_language)'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">content = bs.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>:<span class="string">'mw-content-text'</span>&#125;).get_text()</span><br><span class="line">ngrams = getNgrams(content, <span class="number">2</span>)</span><br><span class="line">print(ngrams)</span><br><span class="line">print(<span class="string">'2-grams count is: '</span>+str(len(ngrams)))</span><br></pre></td></tr></table></figure><p><code>ngrams</code> 函数把一个待处理的字符串分成单词序列(假设所有单词按照空格分开)，然后增加到 <code>n-gram</code> 模型(本例中是 <code>2-gram</code>)里形成以每个单词开始的二元数组。</p><p>我们得到的数据部分如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[['\nPython\n\n\n\n\nParadigm\nObject-oriented,', 'imperative,'], ['imperative,', 'functional,'], ['functional,', 'procedural,'], ['procedural,', 'reflective\n\n\nDesigned\xa0by\nGuido'],</span><br></pre></td></tr></table></figure><p>显然，是需要处理的。</p><p>首选处理通过正则移除<code>\n</code>，再把 Unicode 字符过滤掉。先把内容中的换行符(或者多个换行符)替换成空格，然后把连续的多个空格替换成一个空格，确保所有单词之间只有一个空格。最后，把内容转换成 <code>UTF-8</code> 格式以消除转义字符。函数初步如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ngrams</span><span class="params">(input, n)</span>:</span></span><br><span class="line">    content = re.sub(<span class="string">'\n+'</span>, <span class="string">" "</span>, content) </span><br><span class="line">    content = re.sub(<span class="string">' +'</span>, <span class="string">" "</span>, content)</span><br><span class="line">    content = bytes(content, <span class="string">"UTF-8"</span>)</span><br><span class="line">    content = content.decode(<span class="string">"ascii"</span>, <span class="string">"ignore"</span>) </span><br><span class="line">    print(content)</span><br><span class="line">    input = input.split(<span class="string">' '</span>)</span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input)-n+<span class="number">1</span>):</span><br><span class="line">        output.append(input[i:i+n])</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p><code>Python</code>获取所有的标点符号：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="built_in">url</span> python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.4</span> (<span class="keyword">default</span>, Mar  <span class="number">1</span> <span class="number">2018</span>, <span class="number">18</span>:<span class="number">36</span>:<span class="number">50</span>)</span><br><span class="line">[GCC <span class="number">4.2</span><span class="number">.1</span> Compatible Apple LLVM <span class="number">9.0</span><span class="number">.0</span> (clang<span class="number">-900.0</span><span class="number">.39</span><span class="number">.2</span>)] <span class="keyword">on</span> darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">import</span> <span class="built_in">string</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">string</span>.punctuation</span><br><span class="line"><span class="string">'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span></span><br></pre></td></tr></table></figure><p>我们还要去除一些维基引用的标记、标点符号等；进一步进行清洗的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen </span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanInput</span><span class="params">(input)</span>:</span></span><br><span class="line">    input = re.sub(<span class="string">'\n+'</span>, <span class="string">" "</span>, input) </span><br><span class="line">    input = re.sub(<span class="string">'\[[0-9]*\]'</span>, <span class="string">""</span>, input) </span><br><span class="line">    input = re.sub(<span class="string">' +'</span>, <span class="string">" "</span>, input)</span><br><span class="line">    input = bytes(input, <span class="string">"UTF-8"</span>)</span><br><span class="line">    input = input.decode(<span class="string">"ascii"</span>, <span class="string">"ignore"</span>) cleanInput = []</span><br><span class="line">    input = input.split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> input:</span><br><span class="line">        item = item.strip(string.punctuation)</span><br><span class="line">        <span class="keyword">if</span> len(item) &gt; <span class="number">1</span> <span class="keyword">or</span> (item.lower() == <span class="string">'a'</span> <span class="keyword">or</span> item.lower() == <span class="string">'i'</span>):</span><br><span class="line">            cleanInput.append(item) <span class="keyword">return</span> cleanInput</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ngrams</span><span class="params">(input, n)</span>:</span></span><br><span class="line">    input = cleanInput(input) </span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input)-n+<span class="number">1</span>):</span><br><span class="line">        output.append(input[i:i+n]) </span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p>这样处理后，我们的结果就稍微好点。</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'Linux'</span>, <span class="symbol">'Foundation'</span>], [<span class="symbol">'Foundation'</span>, <span class="symbol">'Mozilla'</span>], [<span class="symbol">'Mozilla'</span>, <span class="symbol">'Foundation'</span>], [</span><br><span class="line">     <span class="symbol">'Foundation'</span>, <span class="symbol">'Open'</span>], [<span class="symbol">'Open'</span>, <span class="symbol">'Knowledge'</span>], [<span class="symbol">'Knowledge'</span>, <span class="symbol">'Foundation'</span>], [<span class="symbol">'Fou</span></span><br><span class="line">     ndation', <span class="symbol">'Open'</span>], [<span class="symbol">'Open'</span>, <span class="symbol">'Source'</span>]</span><br></pre></td></tr></table></figure><h4 id="数据存储后再清洗"><a href="#数据存储后再清洗" class="headerlink" title="数据存储后再清洗"></a>数据存储后再清洗</h4><p>对于编写代码清洗数据，你能做或想做的事情只有这些。除此之外，你可能还需要处理一些别人创建的数据库，或者要对一个之前没接触过的数据库进行清洗。</p><p>主要额方法有编写脚本或者第三方工具。例如<code>OpenRefine</code>。本小节主要是介绍一下该软件的安装和使用。也可以理解为一个图形化的应用，对于工具类的东西我一直有一个观点：点点点，就会了；何况还是图形化的。所以我不做介绍，看一下官网的三个视频就会了。</p><p>官网地址：<a href="http://openrefine.org/" target="_blank" rel="noopener">http://openrefine.org/</a></p><p>正式邀请你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：数据清洗。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之读取文档|第05天</title>
    <link href="https://chensenlin.cn/posts/34041/"/>
    <id>https://chensenlin.cn/posts/34041/</id>
    <published>2018-04-01T13:33:54.000Z</published>
    <updated>2018-04-11T11:01:07.435Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>文档编码和类型的介绍；</p><p>读取CSV、PDF等格式的文件。</p><a id="more"></a><h3 id="读取文档"><a href="#读取文档" class="headerlink" title="读取文档"></a>读取文档</h3><h4 id="文档编码"><a href="#文档编码" class="headerlink" title="文档编码"></a>文档编码</h4><p>文档编码的方式通常可以根据文件的扩展名进行判断，虽然文件扩展名并不是由编码确定的，而是由开发者确定的。从最底层的角度看，所有文档都是由 <code>0</code>和 <code>1</code> 编码而成的。例如我我们将一个后缀为<code>png</code>的图片后缀改为<code>.py</code>。用编辑器打打开就完全不对了。</p><p>只要安装了合适的库， <code>Python</code> 就可以帮你处理任意类型的文档。纯文本文件、视频文件和图像文件的唯一区别，就是它们的 <code>0</code>和<code>1</code> 面向用户的转换方式不同。</p><h4 id="纯文本"><a href="#纯文本" class="headerlink" title="纯文本"></a>纯文本</h4><p>对于纯文本的文件获取的方式很简单，用 <code>urlopen</code> 获取了网页之后，我们会把它转变成 <code>BeautifulSoup</code>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen </span><br><span class="line"></span><br><span class="line">textPage = urlopen(</span><br><span class="line"><span class="string">"http://www.pythonscraping.com/pages/warandpeace/chapter1.txt"</span>) </span><br><span class="line"></span><br><span class="line">print(textPage.read())</span><br></pre></td></tr></table></figure><h4 id="CSV-文件"><a href="#CSV-文件" class="headerlink" title="CSV 文件"></a>CSV 文件</h4><p><code>Python</code>有一个标准库对<code>CSV</code>文件的处理特别的友好，可以处理各类的<code>CSV</code>文件。<a href="https://docs.python.org/3/library/csv.html" target="_blank" rel="noopener">文档地址</a></p><h5 id="读取CSV文件"><a href="#读取CSV文件" class="headerlink" title="读取CSV文件"></a>读取CSV文件</h5><p><code>Python</code> 的<code>csv</code> 库主要是面向本地文件，就是说你的 <code>CSV</code> 文件得存储在你的电脑上。而进行网络数据采集的时候，很多文件都是在线的。有几个参考解决办法：</p><ul><li>手动把CSV文件下载到本机，然后用Python定位文件位置;</li><li>写Python程序下载文件，读取之后再把源文件删除;</li><li>从网上直接把文件读成一个字符串，然后转换成一个StringIO对象，使它具有文件的<br>属性。</li></ul><p>例如获取网上的<code>CSV</code>文件，然后输出命令行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">data = urlopen(<span class="string">"http://pythonscraping.com/files/MontyPythonAlbums.csv"</span>).read().decode(<span class="string">'ASCII'</span>,<span class="string">'ignore'</span>)</span><br><span class="line"></span><br><span class="line">dataFile = StringIO(data)</span><br><span class="line">csvReader = csv.reader(dataFile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> csvReader:</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure><p>输出的结果：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'Name</span>', <span class="symbol">'Year</span>']</span><br><span class="line">[<span class="string">"Monty Python's Flying Circus"</span>, <span class="symbol">'1970</span>']</span><br><span class="line">[<span class="symbol">'Another</span> Monty Python Record', <span class="symbol">'1971</span>']</span><br><span class="line">[<span class="string">"Monty Python's Previous Record"</span>, <span class="symbol">'1972</span>']</span><br><span class="line">[<span class="symbol">'The</span> Monty Python Matching Tie and Handkerchief', <span class="symbol">'1973</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Live at Drury Lane', <span class="symbol">'1974</span>']</span><br><span class="line">[<span class="symbol">'An</span> Album of the Soundtrack of the Trailer of the Film of Monty Python and the Holy Grail', <span class="symbol">'1975</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Live at City Center', <span class="symbol">'1977</span>']</span><br><span class="line">[<span class="symbol">'The</span> Monty Python Instant Record Collection', <span class="symbol">'1977</span>']</span><br><span class="line">[<span class="string">"Monty Python's Life of Brian"</span>, <span class="symbol">'1979</span>']</span><br><span class="line">[<span class="string">"Monty Python's Cotractual Obligation Album"</span>, <span class="symbol">'1980</span>']</span><br><span class="line">[<span class="string">"Monty Python's The Meaning of Life"</span>, <span class="symbol">'1983</span>']</span><br><span class="line">[<span class="symbol">'The</span> Final Rip Off', <span class="symbol">'1987</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Sings', <span class="symbol">'1989</span>']</span><br><span class="line">[<span class="symbol">'The</span> Ultimate Monty Python Rip Off', <span class="symbol">'1994</span>']</span><br><span class="line">[<span class="symbol">'Monty</span> Python Sings Again', <span class="symbol">'2014</span>']</span><br></pre></td></tr></table></figure><h4 id="PDF-文件"><a href="#PDF-文件" class="headerlink" title="PDF 文件"></a>PDF 文件</h4><p><code>PDFMiner3K</code>是一个非常好用的库(是<code>PDFMiner</code>的<code>Python 3.x</code>移植版)。它非常灵活，可以通过命令行使用，也可以整合到代码中。它还可以处理不同的语言编码，而且对网络文件的处理也非常方便。</p><p>下载解压后用<code>python setup.py install</code>完成安装。</p><blockquote><p>模块的源文件下载地址： <a href="https://pypi.python.org/pypi/pdfminer3k" target="_blank" rel="noopener">https://pypi.python.org/pypi/pdfminer3k</a></p></blockquote><p>例如可以把任意 <code>PDF</code> 读成字符串，然后用 <code>StringIO</code>转换成文件对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager, process_pdf</span><br><span class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> TextConverter</span><br><span class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> LAParams</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> open</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readPDF</span><span class="params">(pdfFile)</span>:</span></span><br><span class="line">    rsrcmgr = PDFResourceManager()</span><br><span class="line">    retstr = StringIO()</span><br><span class="line">    laparams = LAParams()</span><br><span class="line">    device = TextConverter(rsrcmgr, retstr, laparams=laparams)</span><br><span class="line">             process_pdf(rsrcmgr, device, pdfFile)</span><br><span class="line">             device.close()</span><br><span class="line">    content = retstr.getvalue() retstr.close()</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line">    </span><br><span class="line">pdfFile = urlopen(<span class="string">"http://pythonscraping.com/pages/warandpeace/chapter1.pdf"</span>)</span><br><span class="line">outputString = readPDF(pdfFile)</span><br><span class="line">print(outputString)</span><br><span class="line">pdfFile.close()</span><br></pre></td></tr></table></figure><p><code>readPDF</code> 函数最大的好处是，如果<code>PDF</code>文件在电脑里，就可以直接把 <code>urlopen</code>返回的对象 <code>pdfFile</code> 替换成普通的 <code>open()</code> 文件对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdfFile = open(<span class="string">"./chapter1.pdf"</span>, <span class="string">'rb'</span>)</span><br></pre></td></tr></table></figure><p>正式邀请你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;文档编码和类型的介绍；&lt;/p&gt;
&lt;p&gt;读取CSV、PDF等格式的文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之存储数据|第04天</title>
    <link href="https://chensenlin.cn/posts/60544/"/>
    <id>https://chensenlin.cn/posts/60544/</id>
    <published>2018-03-31T15:49:04.000Z</published>
    <updated>2018-04-11T11:01:17.906Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>下载文件，存储数据；</p><p>MySQL的基本使用，发送邮件。</p><a id="more"></a><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>网络数据的采集，最本质的东西还是数据，我们爬取的数据是需要存储的。</p><h4 id="媒体文件"><a href="#媒体文件" class="headerlink" title="媒体文件"></a>媒体文件</h4><p>存储媒体文件有两种主要的方式:只获取文件 <code>URL</code> 链接，或者直接把源文件下载下来。</p><p>可以通过媒体文件所在的<code>URL</code> 链接直接引用它。这样做的优点如下:</p><ul><li>爬虫运行得更快，耗费的流量更少，因为只要链接，不需要下载文件;</li><li>可以节省很多存储空间，因为只需要存储<code>URL</code>链接就可以;</li><li>存储<code>URL</code>的代码更容易写，也不需要实现文件下载代码;</li><li>不下载文件能够降低目标主机服务器的负载。</li></ul><p>于此同时还会有一些缺点：</p><ul><li>网站防盗链的问题，会带来很多的麻烦；</li><li>自主性较差，因为文件在别人的服务器上，可支配性差；</li><li>链接可能是会变化的，失效的链接数增加。</li><li>….</li></ul><p>下载文件的方法也很简单，在<code>Python 3.x</code> 版本中,<code>urllib.request.urlretrieve</code>可以根据文件的 <code>URL</code> 下载文件;</p><p>例如我们从<code>http://pythonscraping.com</code> 下载 <code>logo</code>图片，然后在程序运行的文件夹里保存为 <code>logo.jpg</code> 文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">imageLocation = bs.find(<span class="string">'a'</span>, &#123;<span class="string">'id'</span>: <span class="string">'logo'</span>&#125;).find(<span class="string">'img'</span>)[<span class="string">'src'</span>]</span><br><span class="line">urlretrieve (imageLocation, <span class="string">'logo.jpg'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>下载文件需要注意exe的文件，木马文件等。不要在硬盘存储敏感信息，不要用管理员权限运行他。</p></blockquote><h4 id="把数据存储到CSV"><a href="#把数据存储到CSV" class="headerlink" title="把数据存储到CSV"></a>把数据存储到CSV</h4><p><code>CSV</code>(<code>Comma-Separated Values</code>，逗号分隔值)是存储表格数据的常用文件格式。关于<code>CSV</code>格式的文件不做过多的介绍，自行去了解一下。</p><p><code>Python</code>的<code>csv</code>库可以创建或者修改<code>CSV</code>文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv </span><br><span class="line"></span><br><span class="line">csvFile = open(<span class="string">"./demo.csv"</span>,<span class="string">"我+"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    writer = csv.writer(csvFile)</span><br><span class="line">    writer.writerow((<span class="string">'number'</span>, <span class="string">'number plus 2'</span>, <span class="string">'number times 2'</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> rang(<span class="number">10</span>):</span><br><span class="line">        writer.writerow((i,i+<span class="number">2</span>,I*<span class="number">2</span>))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    csvFile.close()</span><br></pre></td></tr></table></figure><blockquote><p>如果文件不存在就会创建demo.csv。</p></blockquote><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p><code>MySQL</code>是目前最受欢迎的开源关系型数据库管理系统。因为它受众广泛，免费，开箱即用，所以它也是网络数据采集项目中常用的数据库。</p><p>我采用的是<code>Mac</code>的平台，可以直接下载安装安装也可以通过包管理器(例如<code>homebrew</code>)安装。</p><blockquote><p>官网下载地址：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/</a></p></blockquote><p>其他的平台可以去官网查看安装详情，作为一个改变世界的程序猿，安装软件应该不是问题。</p><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><p>创建数据库:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> demo;</span><br></pre></td></tr></table></figure><p>使用数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> demo;</span><br></pre></td></tr></table></figure><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span>(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    sex tinyint(<span class="number">1</span>),</span><br><span class="line">    creatime <span class="keyword">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>和数据库不同，<code>MySQL</code> 数据表必须至少有一列，否则不能创建。为了在 <code>MySQL</code> 里定义字段(数据列)，你必须在 <code>CREATE TABLE &lt;tablename&gt;</code> 语句后面，把字段的定义放进一个带括号的、内部由逗号分隔的列表。</p><p>插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">name</span>, sex) <span class="keyword">VALUES</span> (<span class="string">"name"</span>, <span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p>查询数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">LIKE</span> <span class="string">"%chensenlin.cn%"</span></span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELELT FROM user WHERE id = 1</span><br></pre></td></tr></table></figure><p>更新数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'chensenlin'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">66</span></span><br></pre></td></tr></table></figure><blockquote><p>特别强调：更新或者删除一定要加条件！否则就说灾难，哈哈哈</p></blockquote><h5 id="与Python整合"><a href="#与Python整合" class="headerlink" title="与Python整合"></a>与Python整合</h5><p><code>Python</code>没有内置的<code>MySQL</code> 支持工具。不过，有很多开源的库可以用来与 <code>MySQL</code>做交互，<code>Python 2.x</code>和<code>Python 3.x</code>版本都支持。最有名的一个库就是<code>PyMySQL(https://github.com/PyMySQL/PyMySQL)</code>。</p><p>安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> PyMySQL</span><br></pre></td></tr></table></figure><p>基本使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, unix_socket=<span class="string">'/tmp/mysql.sock'</span>,user=<span class="string">'root'</span>, passwd=root, db=<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">"USE demo"</span>)</span><br><span class="line">cur.execute(<span class="string">"SELECT * FROM user WHERE id = 1"</span>) print(cur.fetchone())</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h4><p><code>Python</code>发送一封邮件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line">msg = MIMEText(<span class="string">"邮件正文内容"</span>)</span><br><span class="line">msg[<span class="string">'Subject'</span>] = <span class="string">"这是一个测试有奖主题"</span></span><br><span class="line">msg[<span class="string">'From'</span>] = <span class="string">"fore@gmail.com"</span></span><br><span class="line">msg[<span class="string">'To'</span>] = <span class="string">"hellosenlin@sina.cn"</span></span><br><span class="line">s = smtplib.SMTP(<span class="string">'localhost'</span>)</span><br><span class="line">s.send_message(msg)</span><br><span class="line">s.quit()</span><br></pre></td></tr></table></figure><p>与网页通过<code>HTTP</code>协议传输一样，邮件是通过<code>SMTP</code>(<code>Simple Mail Transfer Protocol</code>，简单邮件传输协议)传输的。而且,和网络服务器的客户端(浏览器)处理那些通过 <code>HTTP</code> 协议传输的网页一样。</p><p>可以将其封装成函数作为发送邮件定时使用等。</p><p>正式邀请你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;下载文件，存储数据；&lt;/p&gt;
&lt;p&gt;MySQL的基本使用，发送邮件。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之使用API|第03天</title>
    <link href="https://chensenlin.cn/posts/37773/"/>
    <id>https://chensenlin.cn/posts/37773/</id>
    <published>2018-03-30T14:12:44.000Z</published>
    <updated>2018-04-11T11:01:12.934Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本节比较简单，有开发经验可以跳过。</p><a id="more"></a><h3 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h3><h4 id="API概述"><a href="#API概述" class="headerlink" title="API概述"></a>API概述</h4><p>百度百科关于<code>API</code>的解释：<code>API</code>（<code>Application Programming Interface</code>,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><p>说明这就是接口，不受其语言的限制都可以调用。</p><h4 id="API通用规则"><a href="#API通用规则" class="headerlink" title="API通用规则"></a>API通用规则</h4><p><code>API</code>用一套非常标准的规则生成数据，而且生成的数据也是按照非常标准的方式组织的。</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>利用<code>HTTP</code>请求网络服务器信息的方法有很多种，这里举例常用的四种：<br><code>GET</code>：从服务器获取数据的方法；<br><code>POST</code>：向服务器发送数据。例如提交表单到服务器处理的逻辑；<br><code>PUT</code>：主要用来更新一个对象或信息，一般很少用到；<br><code>DELETE</code>：从服务器删除一个对象。</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p><code>API</code>并不是随时或者谁都可以调用的。为了保证服务器上的安全或者减少资源等目的，我们会对请求的方法或者次数有限制。通常情况会对接口进行验证，一般的验证方法是令牌（<code>token</code>），这个令牌一般是用户登录或者注册的时候从服务器生成然后给用户。令牌可以是可变的，也可以是不可变的。令牌除了在 <code>URL</code>链接中传递，还会通过请求头里的 <code>cookie</code> 把用户信息传递给服务器。<br>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">token = <span class="string">"&lt;your api key&gt;"</span></span><br><span class="line">webRequest = urllib.request.Request(<span class="string">"http://myapi.com"</span>, headers=&#123;<span class="string">"token"</span>:token&#125;)</span><br><span class="line">html = urlopen(webRequest)</span><br></pre></td></tr></table></figure><h4 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h4><p>服务器响应的数据格式一般是<code>JSON</code>或者<code>XML</code>。目前<code>JSON</code>比较多，原因有很多，其中一点就是<code>JSON</code> 文件比完整的 <code>XML</code> 格式小；加上网络技术的改变，后端的语言越来越多，基本上都可以实现接口。</p><p><code>API</code>调用的语法也有不同，但也有约定俗成的准则。例如，当使用 <code>GET</code>请求获取数据时，用<code>URL</code> 路径描述你要获取的数据范围，查询参数可以作为过滤器或附加请求使用;也有许多 <code>API</code> 会通过文件路径(path)的形式指定 <code>API</code> 版本、数据格式和其他属性；还有一些 <code>API</code>会通过请求参数<code>(request parameter)</code>的形式指定数据格式和 <code>API</code> 版本:</p><p>市面上比较多的公司或者网站都有自己的公开的接口，例如推特，<code>Google</code>等。</p><h4 id="解析JSON数据"><a href="#解析JSON数据" class="headerlink" title="解析JSON数据"></a>解析JSON数据</h4><p>例如我们采用<code>GET</code>的方式请求<code>http://freegeoip.net/json/50.78.253.58</code>,查看返回的数据。返回为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"ip"</span>:<span class="string">"50.78.253.58"</span>,<span class="attr">"country_code"</span>:<span class="string">"US"</span>,<span class="attr">"country_name"</span>:<span class="string">"United States"</span>,<span class="attr">"region_code"</span>:<span class="string">"MA"</span>,<span class="attr">"region_name"</span>:<span class="string">"Massachusetts"</span>,<span class="attr">"city"</span>:<span class="string">"Boston"</span>,<span class="attr">"zip_code"</span>:<span class="string">"02116"</span>,<span class="attr">"time_zone"</span>:<span class="string">"America/New_York"</span>,<span class="attr">"latitude"</span>:<span class="number">42.3496</span>,<span class="attr">"longitude"</span>:<span class="number">-71.0746</span>,<span class="attr">"metro_code"</span>:<span class="number">506</span>&#125;</span><br></pre></td></tr></table></figure><p>现在我们采用<code>Python</code>来解析。<code>JSON</code>是<code>Python</code>的标准库，不需要额外安装。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(ipAddress)</span>:</span></span><br><span class="line">    res = urlopen(<span class="string">"http://freegeoip.net/json/"</span>+ipAddress).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    resJson = json.loads(res)</span><br><span class="line">    <span class="keyword">return</span> resJson.get(<span class="string">'country_code'</span>)</span><br><span class="line"></span><br><span class="line">print(getCountry(<span class="string">"22.18.53.22"</span>))</span><br></pre></td></tr></table></figure><blockquote><p>Python 使用了一种更加灵活的方式，把 JSON 转换成字典，JSON 数组转换成列表,JSON 字符串转换成 Python 字符串。</p></blockquote><p>正式邀请你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节比较简单，有开发经验可以跳过。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之创建爬虫|第02天</title>
    <link href="https://chensenlin.cn/posts/38026/"/>
    <id>https://chensenlin.cn/posts/38026/</id>
    <published>2018-03-29T11:43:03.000Z</published>
    <updated>2018-04-11T11:01:21.987Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>单个域名和网站的采集；</p><p>互联网采集和用Scrapy采集初步介绍。 </p><a id="more"></a><h3 id="开始采集"><a href="#开始采集" class="headerlink" title="开始采集"></a>开始采集</h3><p>网络爬虫是可以根据递归方式。为了找到<code>URL</code> 链接，它们必须首先获取网页内容，检查这个页面的内容，再寻找另一个 <code>URL</code>，然后获取 <code>URL</code>对应的网页内容，不断循环这一过程。</p><h4 id="遍历单个域名"><a href="#遍历单个域名" class="headerlink" title="遍历单个域名"></a>遍历单个域名</h4><p>以抓取维基百科的<code>Kevin Baco</code>为例，实现简单的数据爬取。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://en.wikipedia.org/wiki/Kevin_Bacon'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">'a'</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> link.attrs:</span><br><span class="line">        print(link.attrs[<span class="string">'href'</span>])</span><br></pre></td></tr></table></figure><p>上述代码就获取维基百科网站的任何页面并提取页面链接。去掉我们不需要的词条，进行改进获取词条链接。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen </span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://en.wikipedia.org/wiki/Kevin_Bacon'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> bs.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>:<span class="string">'bodyContent'</span>&#125;).find_all(</span><br><span class="line">    <span class="string">'a'</span>, href=re.compile(<span class="string">'^(/wiki/)((?!:).)*$'</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> link.attrs:</span><br><span class="line">        print(link.attrs[<span class="string">'href'</span>])</span><br></pre></td></tr></table></figure><p>如果我们要做到一个函数<code>getLinks</code>，可以用维基百科词条<code>/wiki/&lt;词条名称&gt;</code>形式的<code>URL</code>链接作为参数，然后以同样的形式返回一个列表，里面包含所有的词条 <code>URL</code> 链接。一个主函数，以某个起始词条为参数调用<code>getLinks</code>，再从返回的<code>URL</code>列表里随机选择一个词条链接，再调用 <code>getLinks</code>，直到我们主动停止，或者在新的页面上没有词条链接了，程序才停止运行。<br>完善后代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLinks</span><span class="params">(articleUrl)</span>:</span></span><br><span class="line">    html = urlopen(<span class="string">'http://en.wikipedia.org&#123;&#125;'</span>.format(articleUrl))</span><br><span class="line">    bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="keyword">return</span> bs.find(<span class="string">'div'</span>, &#123;<span class="string">'id'</span>:<span class="string">'bodyContent'</span>&#125;).find_all(<span class="string">'a'</span>, href=re.compile(<span class="string">'^(/wiki/)((?!:).)*$'</span>))</span><br><span class="line"></span><br><span class="line">links = getLinks(<span class="string">'/wiki/Kevin_Bacon'</span>)</span><br><span class="line"><span class="keyword">while</span> len(links) &gt; <span class="number">0</span>:</span><br><span class="line">    newArticle = links[random.randint(<span class="number">0</span>, len(links)<span class="number">-1</span>)].attrs[<span class="string">'href'</span>]</span><br><span class="line">    print(newArticle)</span><br><span class="line">    links = getLinks(newArticle)</span><br></pre></td></tr></table></figure><h4 id="遍历整个网络"><a href="#遍历整个网络" class="headerlink" title="遍历整个网络"></a>遍历整个网络</h4><p>采集整个网站，那是非常耗费内存资源的过程，尤其是处理大型网站时，最合适的工具就是用一个数据库来储存采集的资源。</p><p>遍历整个网络的数据好处：可以生产网站地图，收集网站数据等。但是一般不会消耗大量的内存资源去做采集，本节的意义不大。</p><h4 id="通过互联网采集"><a href="#通过互联网采集" class="headerlink" title="通过互联网采集"></a>通过互联网采集</h4><p>建立网络地图，需要从一个链接跳转到另一个链接，逐步建立网站的地图信息，从而达到一个合适的网站地图，于此同时我们也不能忽略外链，从一个链接跳转到另一个链接的场景也会时有发生。相比之前的单域名采集，互联网采集的难度要高很多，所以，要求我们的寻找信息的方式和采集信息的方式都应该极具灵活性，以此达到理想的采集效果。</p><p>在做数据采集之前最好能够确定自己采集的内容，明确目标，然后根据目标的展示形式去分析，该网站是否会跳转其他的链接，是否需要继续采集等各个因素。</p><p>如果采集一个网站，有时候也会考虑到网络重定向的问题，例如我的个人博客原来链接是：<code>https://forestfdemo.github.io</code>,但是我做了一个网络的重定向，我将<code>https://chensenlin.cn</code>，重定向到原来的链接，这样无论是访问哪一个链接其本质都跳转到原来的链接，此时需要了解的是网络重定向的时候，我们采集的<code>URL</code>地址会发生变化，在<code>Python3.X</code>的版本中，我们的<code>urllib</code>会帮我完成重定向的功能。</p><h4 id="用Scrapy采集"><a href="#用Scrapy采集" class="headerlink" title="用Scrapy采集"></a>用Scrapy采集</h4><p><code>Scrapy</code>就是一个可以大幅度降低我们对网页链接查找和识别工作复杂度的<code>Python</code> 库，它可以让你轻松地采集一个或多个域名的信息。</p><blockquote><p>目前<code>Scrapy</code>仅支持<code>Python 2.7</code>，还不支持 <code>Python 3.x</code>。</p></blockquote><p>利用<code>Scrapy</code>进行爬虫项目还是有一些设置，我们可以采用<a href="http://scrapy.org/download/" target="_blank" rel="noopener">官网</a>下载，也可以采用<code>pip</code>进行安装，检验安装的方法在之前的<code>Python</code>基础系列的文章有提到过。这里不做过多的阐述。</p><p>创建一个项目：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  python scrapy startproject demourl</span><br><span class="line">New Scrapy project <span class="string">'demourl'</span>, <span class="keyword">using</span> template <span class="built_in">directory</span> <span class="string">'/usr/local/lib/python3.6/site-packages/scrapy/templates/project'</span>, created <span class="keyword">in</span>:</span><br><span class="line">    /Users/demo/Project/python/demourl</span><br><span class="line"></span><br><span class="line">You can <span class="built_in">start</span> your <span class="keyword">first</span> spider <span class="keyword">with</span>:</span><br><span class="line">    cd demourl</span><br><span class="line">    scrapy genspider example example.com</span><br></pre></td></tr></table></figure><p>我们查看一下目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  demourl tree ./</span><br><span class="line">./</span><br><span class="line">├── [drwxr-xr-x]  demourl</span><br><span class="line">│   ├── [-rw-r--r--]  __init__.py</span><br><span class="line">│   ├── [drwxr-xr-x]  __pycache__</span><br><span class="line">│   ├── [-rw-r--r--]  items.py</span><br><span class="line">│   ├── [-rw-r--r--]  middlewares.py</span><br><span class="line">│   ├── [-rw-r--r--]  pipelines.py</span><br><span class="line">│   ├── [-rw-r--r--]  settings.py</span><br><span class="line">│   └── [drwxr-xr-x]  spiders</span><br><span class="line">│       ├── [-rw-r--r--]  __init__.py</span><br><span class="line">│       └── [drwxr-xr-x]  __pycache__</span><br><span class="line">└── [-rw-r--r--]  scrapy.cfg</span><br><span class="line"></span><br><span class="line">4 directories, 7 files</span><br></pre></td></tr></table></figure><p>关于<code>Scrapy</code>的内容我们后续逐一介绍，大家可以点击关注，及时收到后续更新。</p><p>正式邀请你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;单个域名和网站的采集；&lt;/p&gt;
&lt;p&gt;互联网采集和用Scrapy采集初步介绍。 &lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之HTML解析|第01天</title>
    <link href="https://chensenlin.cn/posts/40836/"/>
    <id>https://chensenlin.cn/posts/40836/</id>
    <published>2018-03-28T11:12:35.000Z</published>
    <updated>2018-04-11T11:01:28.154Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>BeautifulSoup使用和<code>find()</code>和<code>find_all()</code>；</p><p>正则表达式和<code>BeautifulSoup</code>结合使用；</p><p>Lambda表达式介绍。</p><a id="more"></a><h3 id="复杂的HTML解析"><a href="#复杂的HTML解析" class="headerlink" title="复杂的HTML解析"></a>复杂的HTML解析</h3><h4 id="思考后确定获取目标"><a href="#思考后确定获取目标" class="headerlink" title="思考后确定获取目标"></a>思考后确定获取目标</h4><p>假如我们确定一个我们需要采集的目标信息，可能是一组统计数据、或者一个  <code>title</code>等，但是此时这个目标可能藏的比较深，可能在第20层的标签里面，你可能会用下面的方式去抓取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bsObj.findAll(<span class="string">"table"</span>)[<span class="number">4</span>].findAll(<span class="string">"tr"</span>)[<span class="number">2</span>].find(<span class="string">"td"</span>).findAll(<span class="string">"div"</span>)[<span class="number">1</span>].find(<span class="string">"a"</span>)</span><br></pre></td></tr></table></figure><p>同时还有一个问题，加入网站发生细微的变化。我们的代码不仅影响美观还回影响整个爬虫网络。这样的情况我们应该怎么做呢？</p><p>尝试“打印此页”的链接，或者看看该网页的移动版是够更加友好，请求的时候将请求头设置为移动端的状态。</p><p>寻找隐藏在<code>JavaScript</code>文件里的信息。网站的某些数据可能隐藏在<code>JavaScript</code>文件中。</p><p>可以试试其他的网站资源。</p><h4 id="BeautifulSoup使用"><a href="#BeautifulSoup使用" class="headerlink" title="BeautifulSoup使用"></a>BeautifulSoup使用</h4><p><a href="https://www.jianshu.com/p/9c64aff5d144" target="_blank" rel="noopener">上一篇</a>我们学会了如何安装和运行<code>BeautifulSoup</code>,现在我们逐步深入，学习通过属性查找标签的方法、标签组、标签解析树的导航过程。</p><p>每个网站都有层叠样式表(也就是我们说的<code>CSS</code>)，它对于爬虫而言有一个最大的好处就是能够让<code>HTML</code>元素表现出差异化。</p><p>例如某些标签是下面这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>爬虫可以根据<code>class</code>的属性值去区分不同的标签。例如：我们可以只抓取红色的字。</p><p>下面我们以这个<a href="http://www.pythonscraping.com/pages/warandpeace.html" target="_blank" rel="noopener">网站</a>为例来创建一个网络爬虫。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-b9f09715d532fe82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网站解释说明"></p><p>通过上图可以知道红色的为对话正文部分，绿色为姓名的信息。现在可以创建一个简单的<code>BeautifulSoup</code>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html  = urlopen(<span class="string">" http://www.pythonscraping.com/pages/warandpeace.html"</span>)</span><br><span class="line">bsObj = BeautifulSoup(html,<span class="string">'lxml'</span>) <span class="comment"># 获取了html的所有信息</span></span><br></pre></td></tr></table></figure><p>通过<code>BeautifulSoup</code>对象，我们可以用<code>findAll</code>函数抽取只包含在<code>&lt;span class=&quot;green&quot;&gt;&lt;/ span&gt;</code>标签里的文字，这样就会得到一个人物名称的 <code>Python</code>列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nameList = bsObj.find_all(<span class="string">'span'</span>,&#123;<span class="string">"class"</span>:<span class="string">"green"</span>&#125;) <span class="comment">#获取span标签的class为green的所有姓名</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line"><span class="comment"># 遍历取值</span></span><br><span class="line">    print(name.get_text())</span><br></pre></td></tr></table></figure><p>然后运行得到的就是所有的姓名列表。</p><p><code>get_text()</code>使用场景主要是处理一个包含许多超链接、段落和标 签的大段源代码，它就会吧这些超链接和段落以及标签都清理掉。也就是说它会把你正在处理的 <code>HTML</code>文档中所有的标签都清除，然后返回一个只包含文字的字符串。</p><h5 id="BeautifulSoup的find-和find-all"><a href="#BeautifulSoup的find-和find-all" class="headerlink" title="BeautifulSoup的find()和find_all()"></a>BeautifulSoup的<code>find()</code>和<code>find_all()</code></h5><p><code>BeautifulSoup</code>里的<code>find()</code>和<code>find_all()</code>可能是你最常用的两个函数。借助它们，你可以通过标签的不同属性轻松地过滤<code>HTML</code>页面,查找需要的标签组或单个标签。</p><blockquote><p>BeautifulSoup文档地址：<a href="http://beautifulsoup.readthedocs.io" target="_blank" rel="noopener">http://beautifulsoup.readthedocs.io</a></p></blockquote><p><code>find()</code>函数语法：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find( <span class="name">name</span> , attrs , recursive , string , **kwargs )</span><br></pre></td></tr></table></figure><p><code>find_all()</code>函数语法：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_all( <span class="name">name</span> , attrs , recursive , string , **kwargs )</span><br></pre></td></tr></table></figure><p>搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件。</p><p><code>name</code>参数可以查找所有名字为<code>name</code>的tag,字符串对象会被自动忽略掉。搜索 <code>name</code>参数的值可以使任一类型的过滤器,字符串,正则表达式,列表,方法等。</p><p><code>attrs</code>参数定义一个字典参数来搜索包含特殊属性的<code>tag</code>。</p><p>通过<code>string</code>参数可以搜搜文档中的字符串内容,与<code>name</code>参数的可选值一样。</p><p><code>keywork</code>参数：如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字<code>tag</code>的属性来搜索。</p><p><code>find_all()</code>方法返回全部的搜索结构,如果文档树很大那么搜索会很慢。如果我们不需要全部结果,可以使用 <code>limit</code>参数限制返回结果的数量.效果与<code>SQL</code>中的<code>limit</code>关键字类似,当搜索到的结果数量达到<code>limit</code>的限制时,就停止搜索返回结果。</p><blockquote><p>find 等价于 find_all 的 limit 等于 1 ;</p></blockquote><p>调用<code>tag</code>的 <code>find_all()</code>方法时,<code>Beautiful Soup</code>会检索当前<code>tag</code>的所有子孙节点,如果只想搜索<code>tag</code>的直接子节点,可以使用参数 <code>recursive=False</code>。</p><h5 id="其他BeautifulSoup对象"><a href="#其他BeautifulSoup对象" class="headerlink" title="其他BeautifulSoup对象"></a>其他BeautifulSoup对象</h5><p><code>NavigableString</code>对象：表示标签里面的文字；<br><code>Comment</code>对象：用来查找<code>HTML</code>文档的注释标签。例如：<code>&lt;!-- 注释 --&gt;</code></p><h5 id="导航树"><a href="#导航树" class="headerlink" title="导航树"></a>导航树</h5><p>导航树解决的问题是通过标签在文档中的位置来查找标签。以该<a href="http://www.pythonscraping.com/pages/page3.html" target="_blank" rel="noopener">网站</a>为例。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-b29a53fb1eea642f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="示例网站和源码展示"></p><p>第一类，处理子标签和其他后代标签。</p><p>子标签就是一个父标签的下一级，而后代标签是指一个父标签下面所有级别的标签。所有的子标签都是后代标签，但不是所有的后代标签都是子标签。例如：<br><code>tr</code>标签是<code>tabel</code>标签的子标签，而 <code>tr、th、td、img</code>和 <code>span</code>标签都是 <code>tabel</code> 标签的后代标签。</p><p>一般情况下，<code>BeautifulSoup</code>函数总是处理当前标签的后代标签。</p><p>例如根据示例网站我们需要找到文档中第一个<code>div</code>标签，然后获取这个<code>div</code>后代里面所有的<code>img</code>标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> bs.find(<span class="string">'table'</span>,&#123;<span class="string">'id'</span>:<span class="string">'giftList'</span>&#125;).children:</span><br><span class="line">    print(child)</span><br></pre></td></tr></table></figure><p>输出的结果就是打印 <code>giftList</code> 表格中所有产品的数据行。</p><p>第二类，处理兄弟标签。</p><p><code>BeautifulSoup</code>的<code>next_siblings()</code>函数可以让收集表格数据成为简单的事情，尤其是处理带标题行的表格:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> bs.find(<span class="string">'table'</span>, &#123;<span class="string">'id'</span>:<span class="string">'giftList'</span>&#125;).tr.next_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><p>输出的结果是打印产品列表里的所有行的产品，第一行表格标题除外。</p><p>第三类，父标签处理。</p><p>抓取网页的时候我们抓取父标签的情况比较少，但是不排除有这样的情况存在。例如，我们要观察网页的内容。这里就需要连个两个函数<code>parent</code> 和 <code>parents</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span>  urllib.requesturllib.  <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">print(bs.find(<span class="string">'img'</span>,&#123;<span class="string">'src'</span>:<span class="string">'../img/gifts/img1.jpg'</span>&#125;).parent.previous_sibling.get_text())</span><br></pre></td></tr></table></figure><p>上述代码的结果是<code>img1</code>图片的价格。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-c7d9e1d05807408e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片价格信息"></p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>正则表达式个人认为比较简单，就跟学习英语一样，只要不断的去用就了解了。贴上原图可查阅即可。关于正则的相关基础知识可以看看我推荐的网站了解一下，或者可以关注我，后续专门写一个正则表达式入门的文章。</p><blockquote><p>正则表达式30分钟入门教程：<a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">https://deerchao.net/tutorials/regex/regex.htm</a><br>正则表达式书籍：<a href="https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/" target="_blank" rel="noopener">https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/</a></p></blockquote><p>或者用下面的这张图，然后跟着去套一些例子。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-b304361decaa8763.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="正则表达式常用符号"></p><h4 id="正则表达式和BeautifulSoup"><a href="#正则表达式和BeautifulSoup" class="headerlink" title="正则表达式和BeautifulSoup"></a>正则表达式和BeautifulSoup</h4><p>结合正则表达式，来实现一下具体的例子，可能更容易理解一些。我们获取刚刚<a href="">网站</a>的所有图片，首先打开源码分析一下页面。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-398aedc12f2fbc3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="所有图片路径"></p><p>我们发现所有的图片都是以<code>../img/gifts/img</code>开头，以<code>.jpg</code> 结尾。那么就用正则去匹配一下。匹配规则如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">\.</span><span class="symbol">\.</span><span class="symbol">\/</span>img<span class="symbol">\/</span>gifts/img.*<span class="symbol">\.</span>jpg</span><br></pre></td></tr></table></figure><p>结合<code>BeautifulSoup</code>对象我们可以尝试用代码试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">'http://www.pythonscraping.com/pages/page3.html'</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">images = bs.find_all(<span class="string">'img'</span>, &#123;<span class="string">'src'</span>:re.compile(<span class="string">'\.\.\/img\/gifts/img.*\.jpg'</span>)&#125;)</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images: </span><br><span class="line">    print(image[<span class="string">'src'</span>])</span><br></pre></td></tr></table></figure><p>运行的结果：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  url python pareten2.py</span><br><span class="line">../img/gifts/img1.jpg</span><br><span class="line">../img/gifts/img2.jpg</span><br><span class="line">../img/gifts/img3.jpg</span><br><span class="line">../img/gifts/img4.jpg</span><br><span class="line">../img/gifts/img6.jpg</span><br></pre></td></tr></table></figure><p>这就是网站的所有图片的相对路径，以后可以用这样的方法去匹配视频网站的路径，然后下载啦。</p><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><p>在网络数据采集时你经常不需要查找标签的内容，而是需要查找标签属性。比如标签 <code>&lt;a&gt;</code>指向 的 <code>URL</code> 链接包含在 <code>href</code>属性中，或者 <code>&lt;img&gt;</code>标签的图片文件包含在 <code>src</code> 属性中。</p><p>对于一个标签对象，可以用<code>myTag.attrs</code>获取它的全部属性,要注意这行代码返回的是一个 <code>Python</code> 字典对象，可以获取和操作这些属性。例如要获取图片的资源位置 <code>src</code>，可以用<code>myImgTag.attrs[&quot;src&quot;]</code>获取。</p><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><p><code>Lambda</code>表达式本质上是一个函数，可以作为其他函数的变量使用;也就是说，一个函数不是定义成 <code>f(x, y)</code>，而是定义成 <code>f(g(x), y)</code>，或 <code>f(g(x), h(x))</code> 的形式。</p><p><code>BeautifulSoup</code> 允许我们把特定函数类型当作 <code>findAll</code> 函数的参数。唯一的限制条件是这些函数必须把一个标签作为参数且返回结果是布尔类型。<code>BeautifulSoup</code>用这个函数来评估它遇到的每个标签对象，最后把评估结果为“真”的标签保留，把其他标签剔除。</p><p>正式邀请你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;BeautifulSoup使用和&lt;code&gt;find()&lt;/code&gt;和&lt;code&gt;find_all()&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;正则表达式和&lt;code&gt;BeautifulSoup&lt;/code&gt;结合使用；&lt;/p&gt;
&lt;p&gt;Lambda表达式介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络数据采集之创建爬虫|第00天</title>
    <link href="https://chensenlin.cn/posts/26519/"/>
    <id>https://chensenlin.cn/posts/26519/</id>
    <published>2018-03-27T09:05:32.000Z</published>
    <updated>2018-04-11T11:01:34.722Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>网络相关知识；</p><p><code>BeautifulSoup</code>介绍和使用。</p><a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>开始本系列的文章时，可能你需要了解一下<code>Python</code>的基础知识，熟悉<code>Python</code>的基本编程，了解一些网络知识等。如果不是特别了解，可以看看我的<code>Python</code>基础系列文章。</p><h3 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h3><h4 id="网络链接"><a href="#网络链接" class="headerlink" title="网络链接"></a>网络链接</h4><p>网络浏览器是一个非常有用的应用，它创建信息的数据包，发送它们，然后把你获取的数据解释成漂亮的图像、声音、视频和文字。但是，网络浏览器就是代码，而代码是可以分解的，可以分解成许多基本组件，可重写、重用，以及做成我们想要的任何东西。网络浏览器可以让服务器发送一些数据，到那些对接无线(或有线)网络接口的应用上， 但是许多语言也都有实现这些功能的库文件。关于浏览器的相关介绍，可以参考维基关于<a href="https://zh.wikipedia.org/wiki/网页浏览器" target="_blank" rel="noopener">浏览器</a>的官方介绍。</p><p><code>Python</code>实现抓取网页。新建文件为<code>urllib_request.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找 Python 的 request 模块(在 urllib 库里面)，并导入 urlopen 函数</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">html = urlopen(<span class="string">"http://www.baidu.cn"</span>)</span><br><span class="line">print(html.read())</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python urllib_request.py</span><br></pre></td></tr></table></figure><p>在进行数据抓取时需要保证能够与该网页的连通性，可以尝试用<code>ping</code>的方式进行测试。这里我采用的是抓取百度的首页数据。返回的是百度首页的全部<code>HTML</code>代码。</p><p><code>urllib</code> 是<code>Python</code>的标准库，包含了从网络请求数据，处理<code>cookie</code>，甚至改变像请求头和用户代理这些元数据的函数。<code>urlopen</code>用来打开并读取一个从网络获取的远程对象。<code>urlib</code>的<a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener">文档地址</a>。</p><blockquote><p>标准库：不用额外安装的库就可以直接运行。</p></blockquote><h4 id="BeautifulSoup简介"><a href="#BeautifulSoup简介" class="headerlink" title="BeautifulSoup简介"></a>BeautifulSoup简介</h4><p><code>BeautifulSoup</code>通过定位<code>HTML</code>标签来格式化和组织复杂的网络信息，用简单易用的<code>Python</code>对象为我们展现<code>XML</code>结构信息。</p><h5 id="安装BeautifulSoup"><a href="#安装BeautifulSoup" class="headerlink" title="安装BeautifulSoup"></a>安装BeautifulSoup</h5><p><code>BeautifulSoup</code>并不是标准库，所以需要通过安装后来使用。本人采用<code>Mac</code>的系统，同时已经安装了<code>pip</code>，所以直接可以采用<code>pip</code>来安装即可，不过需要注意版本问题。</p><p><code>Mac</code>安装<code>BeautifulSoup</code>方法：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> beautifulsoup4</span><br></pre></td></tr></table></figure><p>如果没有报错可以验证一下是否安装成功。验证的方式有很多。这里我举例两种最常用的验证方式。</p><p>第一种验证方式：终端直接查看包是否存在。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze | grep beautifulsoup4</span><br></pre></td></tr></table></figure><p>如果输出：<code>beautifulsoup4==4.6.0</code>,表示已经有了，只不过版本可能会不一致，但是模块名是一致的。</p><p>第二种验证方式：进入<code>python</code>界面，然后倒入某一个函数看看是否报错，或者直接写代码执行一下。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  day0 python</span><br><span class="line">Python 3.6.4 (default, Mar  1 2018, 18:36:50)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">from</span> bs4 import BeautifulSoup</span><br><span class="line">&gt;&gt;&gt; exit();</span><br></pre></td></tr></table></figure><p>综上所述，两种验证方式都通过了，说明现在已经安装完成且可以使用了。</p><blockquote><p>这里的安装是全局安装，如果在实际开发中不同的项目可能会有不同的环境或者版本要求，甚至会产生冲突，现在就就需要的能够支持多种的环境的需求，可以用虚拟环境保存库文件。安装一个<code>Python</code>虚拟环境来分而治之。具体的使用方法这里不做过多阐述，后续会有对应的更新，你可以关注我就可以收到更新提示。</p></blockquote><h5 id="运行BeautifulSoup"><a href="#运行BeautifulSoup" class="headerlink" title="运行BeautifulSoup"></a>运行BeautifulSoup</h5><p>结合之前抓取百度首页的代码，现在针对某网站的某文件进行抓取。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>) </span><br><span class="line">bsObj = BeautifulSoup(html.read(),<span class="string">'lxml'</span>)</span><br><span class="line">print(bsObj.h1)</span><br></pre></td></tr></table></figure><p>运行后就得到了该网页的标题。如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  day0 <span class="keyword">python</span> request.<span class="keyword">py</span></span><br><span class="line"><span class="symbol">&lt;h1&gt;</span>An Interesting Title&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>这就是根据网页的源码得到了该网页的标题。未来可以通过正则等方式获取。</p><h5 id="可靠的网络连接"><a href="#可靠的网络连接" class="headerlink" title="可靠的网络连接"></a>可靠的网络连接</h5><p>数据采集的问题在于保证程序与目标网站的服务器一直保持通信，否则的话爬虫就不会继续工作了。这个时候就需要进行网络异常处理。</p><p>例如我们上一节的代码中有下面一行代码：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">html</span> = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>)</span><br></pre></td></tr></table></figure><p>这里面会出现两个问题，服务器不存在或者这个页面不存在。也就是要么<code>404</code>,要么<code>500</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    html = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>)</span><br><span class="line"><span class="keyword">except</span> HTTPError <span class="keyword">as</span> e: </span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 返回空值，中断程序，或者执行另一个方案 </span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 程序继续。注意:如果你已经在上面异常捕捉那一段代码里返回或中断(break)， </span></span><br><span class="line">    <span class="comment"># 那么就不需要使用else语句了，这段代码也不会执行</span></span><br></pre></td></tr></table></figure><p>也有可能获取的时候，该html页面就是一个空的，是不是又需要增加判断呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> html <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">"URL is not found"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 程序继续</span></span><br></pre></td></tr></table></figure><p>获取到了内容，是不是需要继续判断一下该内容是否为我们所需要的内容呢？所以需要增加一个检查标签是否存在判断。</p><p>最后我们的判断是不是看起来代码特别的累赘，我们简单整理一下后，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getTitle</span><span class="params">(url)</span>:</span> </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            html = urlopen(url) </span><br><span class="line">        <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span> </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bsObj = BeautifulSoup(html.read())</span><br><span class="line">            title = bsObj.body.h1 </span><br><span class="line">        <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> title</span><br><span class="line">    </span><br><span class="line">title = getTitle(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>) </span><br><span class="line"><span class="keyword">if</span> title == <span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">"Title could not be found"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(title)</span><br></pre></td></tr></table></figure><p>正式邀请你免费加入我的星球，一起分享，共同成长。</p><p><img src="https://upload-images.jianshu.io/upload_images/1262381-313de7cb370f2060.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识星球"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;网络相关知识；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BeautifulSoup&lt;/code&gt;介绍和使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据采集" scheme="https://chensenlin.cn/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="爬虫" scheme="https://chensenlin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python常用函数整理</title>
    <link href="https://chensenlin.cn/posts/26518/"/>
    <id>https://chensenlin.cn/posts/26518/</id>
    <published>2018-03-27T03:32:52.000Z</published>
    <updated>2018-03-27T03:40:34.309Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>字符串函数、集合函数、列表函数和字典函数。</p><a id="more"></a><h3 id="Python常用函数"><a href="#Python常用函数" class="headerlink" title="Python常用函数"></a>Python常用函数</h3><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>capitalize()</td><td>返回首字母的大写副本</td></tr><tr><td>find(string)</td><td>返回字符串中首次出现参数string的索引，如果字符串中没有参数string则返回-1</td></tr><tr><td>find(s,beg)</td><td>返回字符串中索引beg之后首次出现参数s的索引，如果字符串中索引beg之后没有参数s则返回-1</td></tr><tr><td>find(s,beg,end)</td><td>返回字符串中索引beg与end之间首次出现参数s的索引，如果字符串中索引beg和end之间没有参数s则返回-1</td></tr><tr><td>islower()</td><td>测试所有字符是否均为小写形式</td></tr><tr><td>isupper()</td><td>测试所有字符是否均为大写形式</td></tr><tr><td>lower()</td><td>将所有字符穿华为小写形式并返回</td></tr><tr><td>replace(old,new)</td><td>将字符串中所有子串old替换为new并返回</td></tr><tr><td>split()</td><td>将空格分隔的单词以列表的形式返回</td></tr><tr><td>split(del)</td><td>将del分隔的子串以列表的形式返回</td></tr><tr><td>strip()</td><td>删除字符串两端的空白符并返回</td></tr><tr><td>strip(string)</td><td>删除字符串中的string并返回</td></tr><tr><td>upper()</td><td>将所有字符串转化为大写形式并返回</td></tr></tbody></table><h4 id="列表函数"><a href="#列表函数" class="headerlink" title="列表函数"></a>列表函数</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>len(L)</td><td>返回列表L中的元素数量</td></tr><tr><td>max(L)</td><td>返回列表L中的最大值</td></tr><tr><td>min(L)</td><td>返回列表L中的最小值</td></tr><tr><td>sum(L)</td><td>返回列表L中所有元素的和</td></tr></tbody></table><h4 id="集合函数"><a href="#集合函数" class="headerlink" title="集合函数"></a>集合函数</h4><table><thead><tr><th>方法</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>add</td><td></td><td>往集合中添加一个元素</td></tr><tr><td>clear</td><td></td><td>移除集合中的所有元素</td></tr><tr><td>difference</td><td>-</td><td>根据一个集合中不存在于另一个集合中的元素，创建中一个新的集合</td></tr><tr><td>intersection</td><td>&amp;</td><td>根据两个集合中共有的元素，创建出一个新的集合</td></tr><tr><td>issubset</td><td>&lt;=</td><td>判断一个集合的所有元素是否都包含于另一个集合</td></tr><tr><td>issuperset</td><td>&gt;=</td><td>判断一个集合是否包含了另一个集合中的所有元素</td></tr><tr><td>remove</td><td></td><td>移除集合中的一个元素</td></tr><tr><td>symmetric_difference</td><td>^</td><td>根据两个集合中所有不存在于对方的元素，创建出一个新的集合</td></tr><tr><td>union</td><td></td><td>根据两个集合中所有的元素，创建出一个新的集合</td></tr></tbody></table><h4 id="字典函数"><a href="#字典函数" class="headerlink" title="字典函数"></a>字典函数</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>clear</td><td>清空字典内容</td></tr><tr><td>get</td><td>返回关键字所关联的值，如果指定键不存在，则返回默认值</td></tr><tr><td>keys</td><td>以列表的形式返回字典中的所有键。所得列表中的每个条目肯定是唯一的</td></tr><tr><td>items</td><td>返回（key,value）列表</td></tr><tr><td>values</td><td>以列表的形式返回字典中的所有值。所得列表中的每个条目不一定是唯一的</td></tr><tr><td>update</td><td>用另一个字典的内容对当前字典进行更新</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;字符串函数、集合函数、列表函数和字典函数。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习09天</title>
    <link href="https://chensenlin.cn/posts/1508/"/>
    <id>https://chensenlin.cn/posts/1508/</id>
    <published>2018-03-24T13:45:21.000Z</published>
    <updated>2018-03-27T05:34:49.159Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>文件处理相关，读取文件和写入文件等。</p><p>异常处理和捕获异常。</p><a id="more"></a><h3 id="文件和异常处理"><a href="#文件和异常处理" class="headerlink" title="文件和异常处理"></a>文件和异常处理</h3><h4 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h4><p>要使用文本文件中的信息，首先需要将信息读取到内存中。为此，我们可以一次性读取文件的 全部内容，也可以以每次一行的方式逐步读取。</p><h5 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h5><p>要读取文件，需要一个包含几行文本的文件。新建一个圆周率后30位的文件为例，保存为<code>pi_digits.txt</code>，同时小数点后是为换行。如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.<span class="number">1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure><p>读取该文件的<code>Python</code>文件，<code>file_reader.py</code>。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_digits.txt'</span>) <span class="keyword">as</span> file_object: </span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(rstrip(contents))</span><br></pre></td></tr></table></figure><p><code>open()</code>函数是任何方式使用文件，哪怕仅仅是打印其内容，都得先打开文件。它接受一个参数: 要打开的文件的名称。<code>Python</code>在当前执行的文件所在的目录中查找指定的文件。</p><blockquote><p>close()函数是关闭文件。</p></blockquote><p>关键字<code>with</code>在不再需要访问文件后将其关闭。<code>Python</code>方法<code>rstrip()</code>删除字符串末尾的空白。</p><p>运行结果：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.<span class="number">1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure><h5 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h5><p>当你将类似<code>pi_digits.txt</code>这样的简单文件名传递给函数<code>open()</code>时，<code>Python</code>将在当前执行的文件 (即<code>.py</code>程序文件)所在的目录中查找文件。</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure><p>通过使用绝对路径，可读取系统任何地方的文件。注意区分相对路径和绝对路径。</p><h5 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h5><p>读取文件时，常常需要检查其中的每一行:你可能要在文件中查找特定的信息，或者要以 某种方式修改文件中的文本。逐行读取可以理解为遍历、循环等逻辑。所以在读取文件时，可以采用<code>for</code>语句来实现。代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object: </span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure><h5 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h5><p>使用关键字<code>with</code>时，<code>open()</code>返回的文件对象只在<code>with</code>代码块内可用。如果要在<code>with</code>代码块外 访问文件的内容，可在<code>with</code>代码块内将文件的各行存储在一个列表中，并在<code>with</code>代码块外使用该列表:你可以立即处理文件的各个部分，也可推迟到程序后面再处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object: </span><br><span class="line">    lines = file_object.readlines()<span class="comment">#从文件中读取每一行，并将其存储在一个列表中</span></span><br><span class="line"><span class="comment">#使用一个简单 的for循环来打印lines中的各行</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure><h5 id="使用文件的内容"><a href="#使用文件的内容" class="headerlink" title="使用文件的内容"></a>使用文件的内容</h5><p>将文件读取到内存中后，就可以以任何方式使用这些数据了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object: </span><br><span class="line">    lines = file_object.readlines()<span class="comment">#从文件中读取每一行，并将其存储在一个列表中</span></span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span>       <span class="comment">#创建一个变量存贮圆周率的值</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:   <span class="comment">#使用一个循环将各行都加入pi_string，并删除每行末尾的换行符</span></span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">print(pi_string)     <span class="comment">#打印这个字符串</span></span><br><span class="line">print(len(pi_string)) <span class="comment"># 长度</span></span><br></pre></td></tr></table></figure><blockquote><p>读取文本文件时，Python将其中的所有文本都解读为字符串。如果你读取的是数字，并 要将其作为数值使用，就必须使用函数int()将其转换为整数，或使用函数float()将其转 换为浮点数。</p></blockquote><h5 id="包含一百万位的大型文件"><a href="#包含一百万位的大型文件" class="headerlink" title="包含一百万位的大型文件"></a>包含一百万位的大型文件</h5><p>对于你可处理的数据量，<code>Python</code>没有任何限制;只要系统的内存足够多，想处理多少数据都可以。</p><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><p>保存数据的最简单的方式之一是将其写入到文件中。通过将输出写入文件，即便关闭包含程序输出的终端窗口，这些输出也依然存在:可以在程序结束运行后查看这些输出，可与别人分享输出文件，还可编写程序来将这些输出读取到内存中并进行处理。</p><h5 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h5><p>要将文本写入文件，你在调用<code>open()</code>时需要提供另一个实参，告诉<code>Python</code>你要写入打开的文件。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming."</span>)</span><br></pre></td></tr></table></figure><p>打开文件时，可指定读取模 式<code>(&#39;r&#39;)</code>、写入模式<code>(&#39;w&#39;)</code>、附加模式<code>(&#39;a&#39;)</code>或让你能够读取和写入文件的模式<code>(&#39;r+&#39;)</code>。如果 你省略了模式实参，<code>Python</code>将以默认的只读模式打开文件。</p><blockquote><p>以写入(‘w’)模式打开文件时,如果指定的文件已经存在，Python将在返回文件对象前清空该文件。</p></blockquote><p><code>Python</code>只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数<code>str()</code>将其转换为字符串格式。</p><h5 id="写入多行"><a href="#写入多行" class="headerlink" title="写入多行"></a>写入多行</h5><p>函数<code>write()</code>不会在你写入的文本末尾添加换行符,如果需要写入多行就需要在每行的后面添加换行符：<code>\n</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming."</span>)</span><br><span class="line">    file_object.write(<span class="string">"I love Python."</span>)</span><br></pre></td></tr></table></figure><p>输入结果：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">I</span> love programming.<span class="literal">I</span> love Python.</span><br></pre></td></tr></table></figure><h5 id="附加到文件"><a href="#附加到文件" class="headerlink" title="附加到文件"></a>附加到文件</h5><p>附加到文件可以理解为不清空当前的文件内容，在文件内容后面追加即可。如果以附加的形式打开，如果文件不存在就会被创建。具体实现只需要在使用<code>open()</code>函数的时候指定打开方式为<code>a</code>即可，其余类似。</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p><code>Python</code>使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生让<code>Python</code>不知 所措的错误时，它都会创建一个异常对象。</p><p>异常是使用<code>try-except</code>代码块处理的。<code>try-except</code>代码块让<code>Python</code>执行指定的操作，同时告诉<code>Python</code>发生异常时怎么办。使用了<code>try-except</code>代码块时，即便出现异常，程序也将继续运行: 显示你编写的友好的错误消息，而不是令用户迷惑的<code>traceback</code>。</p><h5 id="处理ZeroDivisionError异常"><a href="#处理ZeroDivisionError异常" class="headerlink" title="处理ZeroDivisionError异常"></a>处理<code>ZeroDivisionError</code>异常</h5><p>例如我们让<code>Python</code>运行<code>8/0</code>的代码报错信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span>/<span class="number">0</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>此时程序停止运行。</p><h5 id="使用try-except代码块"><a href="#使用try-except代码块" class="headerlink" title="使用try-except代码块"></a>使用<code>try-except</code>代码块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     print(<span class="number">7</span>/<span class="number">0</span>) </span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br><span class="line">    <span class="comment"># 其他的代码块将继续运行</span></span><br></pre></td></tr></table></figure><h5 id="使用异常避免崩溃"><a href="#使用异常避免崩溃" class="headerlink" title="使用异常避免崩溃"></a>使用异常避免崩溃</h5><p>发生错误时，如果程序还有工作没有完成，妥善地处理错误就尤其重要。这种情况经常会出 现在要求用户提供输入的程序中;如果程序能够妥善地处理无效输入，就能再提示用户提供有效输入，而不至于崩溃。</p><h5 id="else代码块"><a href="#else代码块" class="headerlink" title="else代码块"></a><code>else</code>代码块</h5><p><code>try-except-else</code>代码块的工作原理:<code>Python</code>尝试执行<code>try</code>代码块中的代码;只有可 能引发异常的代码才需要放在<code>try</code>语句中。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    answer = int(first_number) / int(second_number)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError: </span><br><span class="line">    print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    print(answer)</span><br></pre></td></tr></table></figure><h5 id="处理FileNotFoundError异常"><a href="#处理FileNotFoundError异常" class="headerlink" title="处理FileNotFoundError异常"></a>处理<code>FileNotFoundError</code>异常</h5><p>产生的背景：要查找的文件可能在其他地方、文件名可能 不正确或者这个文件根本就不存在。机会产生<code>FileNotFoundError</code>异常。同理可以给用户一个友好的消息提示。</p><h5 id="拆分字符串"><a href="#拆分字符串" class="headerlink" title="拆分字符串"></a>拆分字符串</h5><p>方法<code>split()</code>以空格为分隔符将字符串分拆成多个部分，并将这些部分都存储到一个列表中。</p><p>代码示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; title = <span class="string">"Alice in Wonderland"</span> </span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; title.split()</span><br><span class="line">[<span class="string">'Alice'</span>, <span class="string">'in'</span>, <span class="string">'Wonderland'</span>]</span><br></pre></td></tr></table></figure><h5 id="使用多个文件"><a href="#使用多个文件" class="headerlink" title="使用多个文件"></a>使用多个文件</h5><p>使用多个文件和单个文件逻辑一致，只不过把逻辑处理部分封装为方法，多个文件就循环处理即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment">#计算一个文件大致包含多少个单词</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            contents = f_obj.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        msg = <span class="string">"Sorry, the file "</span> + filename + <span class="string">" does not exist."</span></span><br><span class="line">        print(msg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 计算文件大致包含多少个单词</span></span><br><span class="line">        words = contents.split()</span><br><span class="line">        num_words = len(words)</span><br><span class="line">        print(<span class="string">"The file "</span> + filename + <span class="string">" has about "</span> + str(num_words) +</span><br><span class="line"><span class="string">" words."</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'alice.txt'</span> </span><br><span class="line">count_words(filename)</span><br></pre></td></tr></table></figure><h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><p>模块<code>json</code>让你能够将简单的<code>Python</code>数据结构转储到文件中，并在程序再次运行时加载该文件 中的数据。你还可以使用<code>json</code>在<code>Python</code>程序之间分享数据。更重要的是，<code>JSON</code>数据格式并非<code>Python</code>专用的，这让你能够将以<code>JSON</code>格式存储的数据与使用其他编程语言的人分享。</p><h5 id="使用json-dump-和json-load"><a href="#使用json-dump-和json-load" class="headerlink" title="使用json.dump()和json.load()"></a>使用<code>json.dump()</code>和<code>json.load()</code></h5><p>函数<code>json.dump()</code>接受两个实参:要存储的数据以及可用于存储数据的文件对象。</p><p>编写一个存储一组数字的简短程序，再编写一个将这些数字读取到内存中的程序 (<code>json.load()</code>)。</p><p>代码示例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line"><span class="built_in">num</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'num.json'</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(<span class="built_in">num</span>,f_obj)<span class="comment">#写入文件</span></span><br><span class="line">    <span class="built_in">num</span> = json.<span class="built_in">load</span>(f_obj) <span class="comment">#读到内存，可以打印</span></span><br><span class="line">    </span><br><span class="line">print(<span class="built_in">num</span>)</span><br></pre></td></tr></table></figure><p>运行后文件的内容和打印的内容一致。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h5 id="保存和读取用户生成的数据"><a href="#保存和读取用户生成的数据" class="headerlink" title="保存和读取用户生成的数据"></a>保存和读取用户生成的数据</h5><p>用户输入的信息我们可以通过写入文件的方式写在文件内，再次输入的时候可以打开文件查询判断是否存在。其实就是把写入和读取文件两个逻辑合成一个。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'username.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What is your name? "</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;文件处理相关，读取文件和写入文件等。&lt;/p&gt;
&lt;p&gt;异常处理和捕获异常。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习08天</title>
    <link href="https://chensenlin.cn/posts/63973/"/>
    <id>https://chensenlin.cn/posts/63973/</id>
    <published>2018-03-23T10:48:11.000Z</published>
    <updated>2018-03-27T05:34:42.863Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>类的基本介绍、创建和使用；</p><p>实例化类，设置属性和和修改等。</p><a id="more"></a><h4 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h4><h5 id="创建Dog类"><a href="#创建Dog类" class="headerlink" title="创建Dog类"></a>创建<code>Dog</code>类</h5><p>根据约定，在<code>Python</code>中，首字母大写的名称指的是类。 这个类定义中的括号是空的，因为我们要从空白创建这个类。类中的函数称为方法。</p><p>代码如下:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span>():</span></span><br><span class="line">    <span class="comment"># 创建一个小狗的类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(<span class="keyword">self</span>,name,age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 初始化属性name和age</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 模拟小狗被命令时蹲下</span></span><br><span class="line">        print(<span class="keyword">self</span>.name.title() + <span class="string">" is now sitting !"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 打滚</span></span><br><span class="line">        print(<span class="keyword">self</span>.name.title() + <span class="string">" rolled over!"</span>)</span><br></pre></td></tr></table></figure><p><code>__init__</code>方法</p><p><code>__init__()</code>是一个特殊的方法，每当你根据<code>Dog</code>类创建新实例时，<code>Python</code>都会自动运行它。在这个方法的名称中，开头和末尾各有两个下划线，这是一种约定，旨在避免<code>Python</code>默认方法与普通方法发生名称冲突。它包含了三个形参：<code>self</code>、<code>name</code>和<code>age</code>，在这个方法的定义中，形 参self必不可少，还必须位于其他形参的前面。</p><h5 id="根据类创建实例"><a href="#根据类创建实例" class="headerlink" title="根据类创建实例"></a>根据类创建实例</h5><p>可将类视为有关如何创建实例的说明。</p><p>代码示例:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog('demo',<span class="number">18</span>)</span><br><span class="line">print(<span class="name">my_dog</span>.name.title())</span><br><span class="line">print(<span class="name">my_dog</span>.age)</span><br></pre></td></tr></table></figure><p><strong>访问属性</strong></p><p>要访问实例的属性，可使用句点表示法。例如<code>my_dog.name</code></p><p><strong>调用方法</strong></p><p>要调用方法，可指定实例的名称和要调用的方法，并用句点分隔它们。</p><p>代码示例：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog<span class="comment">('demo', 6)</span></span><br><span class="line">my_dog.sit<span class="comment">()</span></span><br><span class="line">my_dog.roll_over<span class="comment">()</span></span><br></pre></td></tr></table></figure><p><strong>创建多个实例</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my_dog</span> = Dog(<span class="string">'demo'</span>, <span class="number">6</span>)</span><br><span class="line"><span class="attr">you_dog</span> = Dog(<span class="string">'demo_go'</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h4 id="使用类和实例"><a href="#使用类和实例" class="headerlink" title="使用类和实例"></a>使用类和实例</h4><p>类编写好后，你的大部分时间都将花在使用根据类创建的实例上。你需要执行的一个重要任务是修改实例的属性。你可以直接修改实例的属性，也可以编写方法以特定的方式进行修改。</p><h5 id="Car类"><a href="#Car类" class="headerlink" title="Car类"></a><code>Car</code>类</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="comment"># Car类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name,model,year)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.model = model</span><br><span class="line">        <span class="keyword">self</span>.year = year</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descript</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 返回描述信息</span></span><br><span class="line">        long_name = str(<span class="keyword">self</span>.year) + <span class="string">'---'</span> + <span class="keyword">self</span>.name + <span class="string">'---'</span> + <span class="keyword">self</span>.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 示例化</span></span><br><span class="line">my_car = Car(<span class="string">'audi'</span>,<span class="string">'A4'</span>,<span class="string">'2016'</span>)</span><br><span class="line">print(my_car.get_descript())</span><br></pre></td></tr></table></figure><p>处理的结果是:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">2016</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">Audi</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">A4</span></span><br></pre></td></tr></table></figure><h5 id="给属性设置默认值"><a href="#给属性设置默认值" class="headerlink" title="给属性设置默认值"></a>给属性设置默认值</h5><p>类中的每个属性都必须有初始值，哪怕这个值是<code>0</code>或空字符串。在有些情况下，如设置默认值时，在方法<code>__init__()</code>内指定这种初始值是可行的;如果你对某个属性这样做了，就无需包含为它提供初始值的形参。</p><p>在<code>car</code>类在<code>__init__</code>的方法新增属性<code>self.odometer_reading = 0</code>，同时新增一个方法<code>read_odometer()</code>：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(<span class="keyword">self</span>)</span></span>: </span><br><span class="line">    <span class="comment"># 打印一条指出汽车里程的消息 </span></span><br><span class="line">    print(<span class="string">"汽车的里程有："</span> + str(<span class="keyword">self</span>.odometer_reading))</span><br></pre></td></tr></table></figure><p>调用该方法:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_car = Car(<span class="string">'audi'</span>,<span class="string">'A4'</span>,<span class="string">'2016'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(my_car.get_descript()</span></span>)</span><br><span class="line">my_car.read_odometer()</span><br></pre></td></tr></table></figure><h5 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h5><p>可以以三种不同的方式修改属性的值：直接通过实例进行修改;通过方法进行设置;通过方法进行递增(增加特定的值)。</p><p><strong>直接修改属性的值</strong></p><p>代码如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_new<span class="type">_car</span>.odometer_reading = <span class="number">23</span> my_new<span class="type">_car</span>.read_odometer()</span><br></pre></td></tr></table></figure><p>有时候需要像这样直接访问属性，但其他时候需要编写对属性进行更新的方法。</p><p><strong>通过方法修改属性的值</strong></p><p>在<code>Car</code>类新增一个<code>update_odometer()</code>的方法，专门用来修改属性的值。</p><p>代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(<span class="keyword">self</span>,update_value)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 修改里程值</span></span><br><span class="line">    <span class="keyword">self</span>.odometer_reading = update_value</span><br></pre></td></tr></table></figure><p>在调用的时候就很简单了:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.update_odometer</span>(66)</span><br><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.read_odometer</span>()</span><br></pre></td></tr></table></figure><p><strong>通过方法对属性的值进行递增</strong></p><p>递增的逻辑其实很简单，只有将之前的记录保存并且和后面传入的值进行相加操作即可。</p><p>代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(<span class="keyword">self</span>,update_value)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 修改里程值</span></span><br><span class="line">    <span class="keyword">self</span>.odometer_reading += update_value</span><br></pre></td></tr></table></figure><p>调用方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.update_odometer</span>(6)</span><br><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.read_odometer</span>()</span><br><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.update_odometer</span>(1)</span><br><span class="line"><span class="selector-tag">my_new_car</span><span class="selector-class">.read_odometer</span>()</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>编写类时，并非总是要从空白开始。如果你要编写的类是另一个现成类的特殊版本，可使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法;原有的类称为父类，而新类称为子类。子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法。</p><h5 id="子类的方法-init"><a href="#子类的方法-init" class="headerlink" title="子类的方法__init__()"></a>子类的方法<code>__init__()</code></h5><p>创建子类的实例时，<code>Python</code>首先需要完成的任务是给父类的所有属性赋值。我们直接在上一节的汽车类基础上添加一个<code>ElectricCar</code>类，让它继承<code>Car</code>类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="comment"># 电动汽车</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,model,year)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化父类的属性</span></span><br><span class="line">        super().__init__(name,model,year)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 示例化</span></span><br><span class="line">my_car = ElectricCar(<span class="string">'dian'</span>, <span class="string">'models'</span>, <span class="number">2019</span>)</span><br><span class="line">print(my_tesla.get_descriptive())</span><br></pre></td></tr></table></figure><p><code>super()是</code>一个特殊函数，帮助<code>Python</code>将父类和子类关联起来。这行代码让<code>Python</code>调用<code>ElectricCar</code>的父类的方法<code>__init__()</code>，让<code>ElectricCar</code>实例包含父类的所有属性。父类也称为超 类(<code>superclass</code>)，<code>super</code>因此而得名。</p><h5 id="给子类定义属性和方法"><a href="#给子类定义属性和方法" class="headerlink" title="给子类定义属性和方法"></a>给子类定义属性和方法</h5><p> 让一个类继承另一个类后，可添加区分子类和父类所需的新属性和方法。和之前的定义属性和方法的逻辑类似，不做过多的阐述。可以理解为在子类里面可以自定义一些自己需要的方法或者属性。</p><h5 id="重写父类的方法"><a href="#重写父类的方法" class="headerlink" title="重写父类的方法"></a>重写父类的方法</h5><p>对于父类的方法，只要它不符合子类模拟的实物的行为，都可对其进行重写。为此，可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样，<code>Python</code>将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。或者可以理解为在子类里面可以重写一个新的方法，重新赋值一个新的属性等。通俗的理解为：“取其精华，去其糟粕”。</p><h5 id="将实例用作属性"><a href="#将实例用作属性" class="headerlink" title="将实例用作属性"></a>将实例用作属性</h5><p>使用代码模拟实物时，你可能会发现自己给类添加的细节越来越多:属性和方法清单以及文 件都越来越长。在这种情况下，可能需要将类的一部分作为一个独立的类提取出来。你可以将大 型类拆分成多个协同工作的小类。</p><h4 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h4><h5 id="导入单个类"><a href="#导入单个类" class="headerlink" title="导入单个类"></a>导入单个类</h5><p>为了使项目代码的可读性更加高，使用该模块的程序都必须使用更具体的文件名。例如<code>my_car.py</code>。导入的方法和之前类似，具体语法结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> model_name <span class="keyword">import</span> Class_name</span><br></pre></td></tr></table></figure><p>采用<code>improt</code>语句让<code>Python</code>打开模块<code>car</code>，并导入其中的<code>Car</code>类，剩下的就可以使用了。</p><p>导入类是一种有效的编程方式。如果在这个程序中包含了整个<code>Car</code>类，它该有多长呀!通过 将这个类移到一个模块中，并导入该模块，你依然可以使用其所有功能，但主程序文件变得整洁而易于阅读。</p><h5 id="在一个模块中存储多个类"><a href="#在一个模块中存储多个类" class="headerlink" title="在一个模块中存储多个类"></a>在一个模块中存储多个类</h5><p>也就是一个模块中可以有多个类，例如父类和子类。假设<code>my_car.py</code>有两个类，一个是父类<code>Car</code>，另一个是子类<code>ElectricCar</code>，那么在导入该模块时，可以选择导入某一个类。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> model_name <span class="keyword">import</span> Class_name</span><br></pre></td></tr></table></figure><p>现在就可以进行示例化或者其他的操作了。</p><h5 id="从一个模块中导入多个类"><a href="#从一个模块中导入多个类" class="headerlink" title="从一个模块中导入多个类"></a>从一个模块中导入多个类</h5><p>和我们之前导入函数的时候原理一样，我们可以导入任意数量的类。导入模块多个类的时候，采用逗号拼接即可。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> model_name <span class="keyword">import</span> Class_name0, Class_name1</span><br></pre></td></tr></table></figure><p>导入之后，就可根据需要创建每个类的任意数量的实例。</p><h5 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h5><p>导入整个模块的语法也特别的简单，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> model_name</span><br></pre></td></tr></table></figure><p>这样就可以使用整个模块的任意类。</p><h5 id="导入模块中的所有类"><a href="#导入模块中的所有类" class="headerlink" title="导入模块中的所有类"></a>导入模块中的所有类</h5><p>导入多个就用逗号一个个区分，然后倒入所有的就用<code>*</code>代替。所以语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> model_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><blockquote><p>引用原文。</p></blockquote><p>不推荐使用这种导入方式，其原因有二。首先，如果只要看一下文件开头的<code>import</code>语句，就能清楚地知道程序使用了哪些类，将大有裨益;但这种导入方式没有明确地指出你使用了模块中的哪些类。这种导入方式还可能引发名称方面的困惑。如果你不小心导入了一个与程序文件中其 他东西同名的类，将引发难以诊断的错误。这里之所以介绍这种导入方式，是因为虽然不推荐使 用这种方式，但你可能会在别人编写的代码中见到它。 </p><p>需要从一个模块中导入很多类时，最好导入整个模块，并使用<code>module_name.class_name</code>语法来访问类。这样做时，虽然文件开头并没有列出用到的所有类，但你清楚地知道在程序的哪些地方使用了导入的模块;你还避免了导入模块中的每个类可能引发的名称冲突。</p><h5 id="在一个模块中导入另一个模块"><a href="#在一个模块中导入另一个模块" class="headerlink" title="在一个模块中导入另一个模块"></a>在一个模块中导入另一个模块</h5><p>有时候，需要将类分散到多个模块中，以免模块太大，或在同一个模块中存储不相关的类。将类存储在多个模块中时，你可能会发现一个模块中的类依赖于另一个模块中的类。在这种情况下，可在前一个模块中导入必要的类。</p><p>这部分的笔记实在是比较简单，没有过多的代码，逻辑上的问题基本在之前都涉及过了。如果不是特别了解，可以看看之前的文章，或者可以关注我，后续将继续更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;类的基本介绍、创建和使用；&lt;/p&gt;
&lt;p&gt;实例化类，设置属性和和修改等。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习07天</title>
    <link href="https://chensenlin.cn/posts/60902/"/>
    <id>https://chensenlin.cn/posts/60902/</id>
    <published>2018-03-21T07:30:41.000Z</published>
    <updated>2018-03-27T05:34:39.083Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>函数的定义和使用；</p><p>传递实参和返回值；</p><p>模块的导入、使用和函数导入、使用。</p><a id="more"></a><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数是带名字的代码块，用于完 成具体的工作。要执行函数定义的特定任务，可调用该函数。需要在程序中多次 执行同一项任务时，你无需反复编写完成该任务的代码，而只需调用 执行该任务的函数，让<code>Python</code>运行其中的代码。</p><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><p>定义函数的关键字：<code>def</code>，由此来告诉<code>Python</code>这是一个函数。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"函数体说明部分"</span></span><br><span class="line">    mes = <span class="string">"你好我是森林"</span></span><br><span class="line">    print(mes)</span><br><span class="line">    </span><br><span class="line">hello_user()</span><br></pre></td></tr></table></figure><p><code>def</code>关键字定义函数；<code>hello_user()</code>是该函数的函数名；冒号定义结尾；冒号后面到缩进结尾表示该函数的函数体，也就是函数需要做什么。上述函数就是打印一个变量。执行结果为：<code>你好我是森林</code>。而最后一行表示调用函数名为<code>hello_user()</code>的函数。</p><h5 id="向函数传递信息"><a href="#向函数传递信息" class="headerlink" title="向函数传递信息"></a>向函数传递信息</h5><p>在函数名后面的括号可以进行传参操作，例如传入简单的用户名。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的名字叫: "</span> + username)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"你好我是森林"</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的名字叫：你好我是森林</span><br></pre></td></tr></table></figure><h5 id="实参和形参"><a href="#实参和形参" class="headerlink" title="实参和形参"></a>实参和形参</h5><p>方法在定义的时候的参数称为形参，函数完成其工作所需的一项信 息；函数在调用的时候传入的参数称为实参。</p><p>例如在上面的代码中，<code>get_user(username)</code>的<code></code>username<code>未形参，而调用的时候输入</code>你好我是森林`为实际参数。</p><h4 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h4><p>鉴于函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式很多，可使用位置实参，这要求实参的顺序与形参的顺序相同;也可使用关键字实参，其中每个实参都由变量名和值组成;还可使用列表和字典。</p><h5 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h5><p>调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序。这种关联方式被称为位置实参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(type,value)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的"</span> + type + <span class="string">"是: "</span> + value)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"年龄"</span>,<span class="string">'18'</span>)</span><br></pre></td></tr></table></figure><p>根据<code>type</code>的类型传入的值，输入不一样的结果。传入的<code>年龄</code>就存入函数的<code>type</code>变量中，<code>88</code>就存入<code>value</code>变量中。这样就能够完整的输出。结果为：<code>我的年龄是: 88</code>。</p><p>根据这个结果可以推出，该函数可以被多次调用。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(type,value)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的"</span> + type + <span class="string">"是: "</span> + value)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"年龄"</span>,<span class="string">'18'</span>)</span><br><span class="line">get_user(<span class="string">"体重"</span>,<span class="string">'100'</span>)</span><br><span class="line">get_user(<span class="string">"身高"</span>,<span class="string">'180'</span>)</span><br><span class="line">get_user(<span class="string">"性别"</span>,<span class="string">'男'</span>)</span><br></pre></td></tr></table></figure><p>输出的结果是：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">我的年龄是: 18</span></span><br><span class="line"><span class="section">我的体重是: 100</span></span><br><span class="line"><span class="section">我的身高是: 180</span></span><br><span class="line"><span class="section">我的性别是: 男</span></span><br></pre></td></tr></table></figure><p>需要注意的是传参的位置很重要。如果传参顺序出错，就容易出现笑话。</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(type,value)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的"</span> + type + <span class="string">"是: "</span> + value)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"年龄"</span>,<span class="string">'18'</span>)</span><br><span class="line">get_user(<span class="string">"100"</span>,<span class="string">'体重'</span>)</span><br><span class="line">get_user(<span class="string">"100"</span>,<span class="string">'身高'</span>)</span><br><span class="line">get_user(<span class="string">"男"</span>,<span class="string">'性别'</span>)</span><br></pre></td></tr></table></figure><p>运行的结果：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">我的年龄是: 18</span></span><br><span class="line"><span class="section">我的100是: 体重</span></span><br><span class="line"><span class="section">我的100是: 身高</span></span><br><span class="line"><span class="section">我的男是: 性别</span></span><br></pre></td></tr></table></figure><h5 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h5><p>关键字实参是传递给函数的名称—值对。直接在实参中将名称和值关联起来了，因此向函数传递实参时不会混淆。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(type,value)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的"</span> + type + <span class="string">"是: "</span> + value)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"年龄"</span>,<span class="string">'18'</span>)</span><br><span class="line">get_user(value=<span class="string">"18"</span>,type = <span class="string">'age'</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">我的年龄是: 18</span></span><br><span class="line"><span class="section">我的age是: 18</span></span><br></pre></td></tr></table></figure><h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h5><p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，<code>Python</code>将使用 指定的实参值;否则，将使用形参的默认值。因此，给形参指定默认值后，可在函数调用中省略相应的实参。使用默认值可简化函数调用，还可清楚地指出函数的典型用法。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(type,value = <span class="string">'19'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息"""</span></span><br><span class="line">    print(<span class="string">"我的"</span> + type + <span class="string">"是: "</span> + value)</span><br><span class="line">    </span><br><span class="line">get_user(<span class="string">"年龄"</span>,<span class="string">'18'</span>)</span><br><span class="line">get_user(<span class="string">"年龄"</span>) <span class="comment">#没有传值</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">我的年龄是: 18</span></span><br><span class="line"><span class="section">我的年龄是: 19</span></span><br></pre></td></tr></table></figure><blockquote><p>使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参。 这让Python依然能够正确地解读位置实参。</p></blockquote><h5 id="等效的函数调用"><a href="#等效的函数调用" class="headerlink" title="等效的函数调用"></a>等效的函数调用</h5><p>鉴于可混合使用位置实参、关键字实参和默认值，通常有多种等效的函数调用方式。基于这种定义，在任何情况下都必须给函数提供实参;指定该实参时可以使用位置方式，也可以使用关键字方式。同样，指定该实参时可以使用位置方式，也可以使用关键字方式。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回 的值被称为返回值。在函数中，可使用<code>return</code>语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。</p><h5 id="返回简单值"><a href="#返回简单值" class="headerlink" title="返回简单值"></a>返回简单值</h5><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_info</span><span class="params">(type,info)</span>:</span></span><br><span class="line">    <span class="string">"""返回用户信息"""</span></span><br><span class="line">    user_info =  <span class="string">"我的"</span> + type + <span class="string">"是: "</span> + info</span><br><span class="line">    <span class="keyword">return</span> user_info.title()</span><br><span class="line"></span><br><span class="line">user_info = get_user_info(<span class="string">'身高'</span>,<span class="string">'190'</span>)</span><br><span class="line">print(user_info)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">我的身高是: 190</span></span><br></pre></td></tr></table></figure><p>返回一条字符串类型的用户的信息，然后赋值给变量<code>user_info</code>，最后打印输出。</p><h5 id="让实参变成可选的"><a href="#让实参变成可选的" class="headerlink" title="让实参变成可选的"></a>让实参变成可选的</h5><p>在某些时候我们的参数可能不是必选，但是需要设置默认值就可以决定是否需要传参。</p><h5 id="返回字典"><a href="#返回字典" class="headerlink" title="返回字典"></a>返回字典</h5><p>将用户的信息存储在字典中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span><span class="params">(first_name, last_name)</span>:</span> </span><br><span class="line">    <span class="string">"""返回一个字典，其中包含有关一个人的信息"""</span></span><br><span class="line">    person = &#123;<span class="string">'first'</span>: first_name, <span class="string">'last'</span>: last_name&#125;</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>)</span><br><span class="line">print(musician)</span><br></pre></td></tr></table></figure><p>同时该字典还可以不断的增加。例如新增返回年龄。</p><p>调用函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span><span class="params">(first_name, last_name,age=<span class="string">''</span>)</span>:</span> </span><br><span class="line">    <span class="string">"""返回一个字典，其中包含有关一个人的信息"""</span></span><br><span class="line">    person = &#123;<span class="string">'first'</span>: first_name, <span class="string">'last'</span>: last_name&#125;</span><br><span class="line">    <span class="keyword">if</span> age:</span><br><span class="line">        person[<span class="string">'age'</span>] = age</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"> </span><br><span class="line">musician = build_person(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>,age=<span class="number">19</span>)</span><br><span class="line">print(musician)</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'first'</span>: <span class="string">'jimi'</span>, <span class="string">'last'</span>: <span class="string">'hendrix'</span>, <span class="string">'age'</span>: <span class="number">19</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h4><p>向函数传递列表很有用，这种列表包含的可能是名字、数字或更复杂的对象(如字典)。将列表传递给函数后，函数就能直接访问其内容。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_users</span><span class="params">(names)</span>:</span> </span><br><span class="line">    <span class="string">"""向列表中的每位用户都发出简单的问候"""</span> </span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">"Hello, "</span> + name + <span class="string">"!"</span></span><br><span class="line">        print(msg)</span><br><span class="line"></span><br><span class="line">usernames = [<span class="string">'Hannah'</span>, <span class="string">'Ty'</span>, <span class="string">'Margot'</span>] greet_users(usernames)</span><br></pre></td></tr></table></figure><p>传入一个列表，进行循环遍历打印，然后得到如下结果。</p><p>运行结果：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Hannah!</span><br><span class="line"><span class="built_in">Hello,</span> Ty!</span><br><span class="line"><span class="built_in">Hello,</span> Margot!</span><br></pre></td></tr></table></figure><h5 id="在函数中修改列表"><a href="#在函数中修改列表" class="headerlink" title="在函数中修改列表"></a>在函数中修改列表</h5><p>由上面的例子可以得出，函数在遍历的过程中是可以通过一些函数进行修改的。例如将传入的值全部变为大写。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_users</span><span class="params">(names)</span>:</span> </span><br><span class="line">    <span class="string">"""向列表中的每位用户都发出简单的问候"""</span> </span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">"Hello, "</span> + name.upper() + <span class="string">"!"</span></span><br><span class="line">        print(msg)</span><br><span class="line"></span><br><span class="line">usernames = [<span class="string">'hannah'</span>, <span class="string">'ty'</span>, <span class="string">'margot'</span>] greet_users(usernames)</span><br></pre></td></tr></table></figure><p>当然，也可以进行复杂的修改操作。例如把传入的列表复制给第二个列表；同样，我们也可以紧致修改列表。</p><h5 id="禁止函数修改列表"><a href="#禁止函数修改列表" class="headerlink" title="禁止函数修改列表"></a>禁止函数修改列表</h5><p>将列表的副本传递给函数就可以实现没有修改列表。切片表示法<code>[:]</code>创建列表的副本。语法如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">function_name</span><span class="params">(list_name[:])</span></span></span><br></pre></td></tr></table></figure><h4 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h4><p>利用<code>*</code>定义为一个空元组就可以将所有传入的实参都进行打印。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span> </span><br><span class="line">    <span class="string">"""打印顾客点的所有配料"""</span> </span><br><span class="line">    print(toppings)</span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>无论传入多少值都可以被打印出来。</p><h5 id="结合使用位置实参和任意数量实参"><a href="#结合使用位置实参和任意数量实参" class="headerlink" title="结合使用位置实参和任意数量实参"></a>结合使用位置实参和任意数量实参</h5><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。`Python·先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span></span><br><span class="line">        <span class="string">"""概述要制作的比萨"""</span> </span><br><span class="line">        print(<span class="string">"\nMaking a "</span> + str(size) + <span class="string">"-inch pizza with the following toppings:"</span>)</span><br><span class="line">       <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br><span class="line">        </span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><h5 id="使用任意数量的关键字实参"><a href="#使用任意数量的关键字实参" class="headerlink" title="使用任意数量的关键字实参"></a>使用任意数量的关键字实参</h5><p>有时候，需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量的键—值对——调用语句提供了多少就接受多少。只要坚持一个原则，无论用户输入的实参有多少信息，采用遍历的方式将其逐步返回，然后打印就可以实现无论用户输入什么信息就返回。</p><h4 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h4><p>函数的优点之一是，使用它们可将代码块与主程序分离。通过给函数指定描述性名称，可让 主程序容易理解得多。你还可以更进一步，将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。<code>import</code>语句允许在当前运行的程序文件中使用模块中的代码。</p><h5 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h5><p>要让函数是可导入的，得先创建模块。模块是扩展名为<code>.py</code>的文件，包含要导入到程序中的代码。创建模块代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span> </span><br><span class="line">        <span class="string">"""概述要制作的比萨"""</span> </span><br><span class="line">        print(<span class="string">"\nMaking a "</span> + str(size) + <span class="string">"-inch pizza with the following toppings:"</span>) </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">            print(<span class="string">"- "</span> + topping)</span><br></pre></td></tr></table></figure><p>保存为<code>make_pizza.py</code>的文件，然后创建一个新的文件<code>make.py</code>。代码如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  make_pizza</span><br><span class="line"></span><br><span class="line">make_pizza.make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br></pre></td></tr></table></figure><p>运行后结果如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  day8 python make.py</span><br><span class="line">Making <span class="selector-tag">a</span> <span class="number">16</span>-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br></pre></td></tr></table></figure><h5 id="导入模块的某些函数"><a href="#导入模块的某些函数" class="headerlink" title="导入模块的某些函数"></a>导入模块的某些函数</h5><p>既然可以导入整个模块，说明是能完全读取整个模块的信息，同理，可以推出，我们导入文件的时候是不是可以将某些函数导入进入使用呢？具体的语法如下：</p><p>导入某一个函数：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from <span class="keyword">module</span><span class="number">_n</span>ame <span class="keyword">import</span> <span class="keyword">function</span><span class="number">_n</span>ame</span><br></pre></td></tr></table></figure><p>导入某些函数，也就是多个函数：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from <span class="keyword">module</span><span class="number">_n</span>ame <span class="keyword">import</span> <span class="keyword">function</span><span class="number">_0</span>, <span class="keyword">function</span><span class="number">_1</span>, <span class="keyword">function</span><span class="number">_2</span></span><br></pre></td></tr></table></figure><p>具体的使用方法同理，相当于该函数就可以被调用，和函数调用一致，没有什么区别。即：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pizz import make_pizz</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">make_pizz</span><span class="params">(<span class="number">12</span>,<span class="string">'demo_pizz'</span>)</span></span></span><br></pre></td></tr></table></figure><h5 id="使用as给函数指定别名"><a href="#使用as给函数指定别名" class="headerlink" title="使用as给函数指定别名"></a>使用<code>as</code>给函数指定别名</h5><p>某些业务的需求，函数名可能有特别长，但是在新的模块文件中，我们不需要这样的函数名，一来影响代码的美观；二来对开发人员不太友好，于是采用关键字<code>as</code>可以给函数取一个在新的模块中的别名。具体的语法如下：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name <span class="keyword">as</span> fun_name</span><br></pre></td></tr></table></figure><p>在这里可以看到<code>fun_name</code>就是起的别名，在调用的时候就可以直接采用<code>fun_name</code>进行调用。具体调用方法如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizz <span class="keyword">import</span> make_install_pizz_div <span class="keyword">as</span> mpip</span><br><span class="line"></span><br><span class="line">mpip(<span class="number">14</span>,<span class="string">'pizz_name'</span>)</span><br></pre></td></tr></table></figure><p>具体的调用和实际导入的函数没有什么区别，同样的使用。但是为了提高代码的可读性，建议最好将别名取的有意义。</p><h5 id="使用as给模块指定别名"><a href="#使用as给模块指定别名" class="headerlink" title="使用as给模块指定别名"></a>使用<code>as</code>给模块指定别名</h5><p>由<strong>使用<code>as</code>给函数指定别名</strong>可以推出，同样可以为模块取一个更有意义或者更适合自己的别名。在日常的<code>Python</code>开发中，常用的库或模块有很多，我们同样可以进行别名的方式来实现。具体语法如下：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn</span><br></pre></td></tr></table></figure><p>使用方式不再阐述，和没有指定别名的方式是一样的。</p><h5 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h5><p>在日常开发中<code>*</code>通常是通配符的意思，所以我们要实现一个导入模块的所有函数可以用<code>*</code>来实现。具体语法如下：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>调用对应函数的方法和上面类似，不做过多的阐述。</p><h4 id="函数编写指南"><a href="#函数编写指南" class="headerlink" title="函数编写指南"></a>函数编写指南</h4><blockquote><p>原文内容。</p></blockquote><p>编写函数时，需要牢记几个细节。应给函数指定描述性名称，且只在其中使用小写字母和下划线。描述性名称可帮助你和别人明白代码想要做什么。给模块命名时也应遵循上述约定。</p><p>每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式。文档良好的函数让其他程序员只需阅读文档字符串中的描述就能够使用它:他们完全可以相信代码如描述的那样运行;只要知道函数的名称、需要的实参以及返回值的类型，就能在自己的程序中使用它。</p><p>给形参指定默认值时，等号两边不要有空格。<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP 8</a>建议代码行的长度不要超过79字符，这样 只要编辑器窗口适中，就能看到整行代码。如果形参很多，导致函数定义的长度超过了79字符，可在函数定义中输入左括号后按回车键，并在下一行按两次Tab键，从而将形参列表和只缩进一层的函数体区分开来。大多数编辑器都会自动对齐后续参数列表行，使其缩进程度与你给第一个参数列表行指定的 缩进程度相同:</p><p>如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开，这样将更容易知道前一个函数在什么地方结束，下一个函数从什么地方开始。所有的import语句都应放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;函数的定义和使用；&lt;/p&gt;
&lt;p&gt;传递实参和返回值；&lt;/p&gt;
&lt;p&gt;模块的导入、使用和函数导入、使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习06天</title>
    <link href="https://chensenlin.cn/posts/4583/"/>
    <id>https://chensenlin.cn/posts/4583/</id>
    <published>2018-03-20T04:03:31.000Z</published>
    <updated>2018-03-27T05:34:36.619Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>用户输入和<code>while</code>循环；</p><p>利用<code>while</code>处理列表和字典。</p><a id="more"></a><h3 id="用户输入和while循环"><a href="#用户输入和while循环" class="headerlink" title="用户输入和while循环"></a>用户输入和while循环</h3><h4 id="函数input-的工作原理"><a href="#函数input-的工作原理" class="headerlink" title="函数input()的工作原理"></a>函数<code>input()</code>的工作原理</h4><p>函数<code>input()</code>让程序暂停运行，等待用户输入一些文本。获取用户输入后，<code>Python</code>将其存储在 一个变量中，以方便你使用。</p><p>代码示例:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_res = input(<span class="string">"输入你最喜欢的食物:"</span>)</span><br><span class="line">print(<span class="name">input_res</span>)</span><br></pre></td></tr></table></figure><h5 id="编写清晰的程序"><a href="#编写清晰的程序" class="headerlink" title="编写清晰的程序"></a>编写清晰的程序</h5><p>有时候，提示可能超过一行，例如，你可能需要指出获取特定输入的原因。在这种情况下， 可将提示存储在一个变量中，再将该变量传递给函数<code>input()</code>。</p><p>代码示例:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"If you tell us who you are, we can personalize the messages you see."</span></span><br><span class="line">prompt += <span class="string">"\nWhat is your first name? "</span></span><br><span class="line">name = input(prompt)</span><br><span class="line">print(<span class="string">"\nHello, "</span> + name + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>第1行将消息的前半部分存储在变量<code>prompt</code>中; 在第2行中，运算符+=在存储在<code>prompt</code>中的字符串末尾附加一个字符串。</p><h5 id="使用int-来获取数值输入"><a href="#使用int-来获取数值输入" class="headerlink" title="使用int()来获取数值输入"></a>使用<code>int()</code>来获取数值输入</h5><p>使用函数<code>input()</code>时，<code>Python</code>将用户输入解读为字符串。如果用户输入的值需要进行和数字比较，就会发生错误，这个时候就需要转换一下。可以采用<code>int()</code>来进行字符串和整型之间的转换</p><p>代码示例:<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="keyword">input</span>(<span class="string">"请输入你的年龄: "</span>)</span><br><span class="line">age = <span class="keyword">int</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"你已经成年"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"你还未成年"</span>)</span><br></pre></td></tr></table></figure></p><p>运行示例:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  day6 <span class="keyword">python</span> <span class="keyword">int</span>.<span class="keyword">py</span></span><br><span class="line">请输入你的年龄: <span class="number">12</span></span><br><span class="line">你还未成年</span><br><span class="line">➜  day6 <span class="keyword">python</span> <span class="keyword">int</span>.<span class="keyword">py</span></span><br><span class="line">请输入你的年龄: <span class="number">18</span></span><br><span class="line">你已经成年</span><br></pre></td></tr></table></figure><h5 id="求模运算符"><a href="#求模运算符" class="headerlink" title="求模运算符"></a>求模运算符</h5><p>处理数值信息时，求模运算符<code>(%)</code>是一个很有用的工具，它将两个数相除并返回余数。求模运算符不会指出一个数是另一个数的多少倍，而只指出余数是多少。如果一个数可被另一个数整除，余数就为<code>0</code>，因此求模运算符将返回<code>0</code>。</p><p>代码示例:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">4</span> % <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">5</span> % <span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">4</span> % <span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>利用这一点来判 断一个数是奇数还是偶数:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">number</span> = <span class="built_in">input</span>(<span class="string">"Enter a number, and I'll tell you if it's even or odd: "</span>) <span class="number">13</span> </span><br><span class="line"><span class="keyword">number</span> = <span class="keyword">int</span>(<span class="keyword">number</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">number</span> % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"\nThe number "</span> + str(<span class="keyword">number</span>) + <span class="string">" is even."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"\nThe number "</span> + str(<span class="keyword">number</span>) + <span class="string">" is odd."</span>)</span><br></pre></td></tr></table></figure><h4 id="while-循环简介"><a href="#while-循环简介" class="headerlink" title="while 循环简介"></a><code>while</code> 循环简介</h4><p><code>for</code>循环用于针对集合中的每个元素都一个代码块，而<code>while</code>循环不断地运行，直到指定的条 件不满足为止。</p><h5 id="使用while循环"><a href="#使用while循环" class="headerlink" title="使用while循环"></a>使用<code>while</code>循环</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">current_number = 1</span><br><span class="line"><span class="keyword">while</span> current_number &lt;= 5:</span><br><span class="line">    <span class="builtin-name">print</span>(current_number) </span><br><span class="line">    current_number += 1</span><br></pre></td></tr></table></figure><p>在第<code>1</code>行，我们将<code>current_number</code>设置为<code>1</code>，从而指定从<code>1</code>开始数。接下来的<code>while</code>循环被设置 成这样:只要<code>current_number</code>小于或等于<code>5</code>，就接着运行这个循环。循环中的代码打印 <code>current_number</code>的值，再使用代码<code>current_number += 1</code>(代码<code>current_number = current_number + 1</code>的简写)将其值加<code>1</code>。只要满足条件<code>current_number &lt;= 5</code>，<code>Python</code>就接着运行这个循环。</p><h5 id="让用户选择何时退出"><a href="#让用户选择何时退出" class="headerlink" title="让用户选择何时退出"></a>让用户选择何时退出</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line">message = <span class="string">""</span> </span><br><span class="line">while message != 'quit':</span><br><span class="line">        message = input(prompt) </span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure><p>只有当用户输入<code>quit</code>的时候才能推出，否者一直不能退出。</p><h5 id="采用标志"><a href="#采用标志" class="headerlink" title="采用标志"></a>采用标志</h5><p>在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量被称为<strong>标志</strong>，充当了程序的交通信号灯。你可让程序在标志为<code>True</code>时继续运 行，并在任何事件导致标志的值为<code>False</code>时让程序停止运行。这样，在<code>while</code>语句中就只需检查一 个条件——标志的当前值是否为<code>True</code>，并将所有测试(是否发生了应将标志设置为<code>False</code>的事件) 都放在其他地方，从而让程序变得更为整洁。</p><h5 id="使用break退出循环"><a href="#使用break退出循环" class="headerlink" title="使用break退出循环"></a>使用<code>break</code>退出循环</h5><p>要立即退出<code>while</code>循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用<code>break</code>语句。<code>break</code>语句用于控制程序流程，可使用它来控制哪些代码行将执行，哪些代码行不执行，从而让程序按你的要求执行你要执行的代码。</p><h5 id="在循环中使用continue"><a href="#在循环中使用continue" class="headerlink" title="在循环中使用continue"></a>在循环中使用<code>continue</code></h5><p>要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它 不像break语句那样不再执行余下的代码并退出整个循环。</p><h5 id="避免无限循环"><a href="#避免无限循环" class="headerlink" title="避免无限循环"></a>避免无限循环</h5><p>每个<code>while</code>循环都必须有停止运行的途径，这样才不会没完没了地执行下去。每一个循环必须要有一个可结束的条件。</p><h4 id="使用while循环来处理列表和字典"><a href="#使用while循环来处理列表和字典" class="headerlink" title="使用while循环来处理列表和字典"></a>使用while循环来处理列表和字典</h4><p><code>for</code>循环是一种遍历列表的有效方式，但在<code>for</code>循环中不应修改列表，否则将导致<code>Python</code>难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用<code>while</code>循环。通过将<code>while</code>循环同列表和字典结合起来使用，可收集、存储并组织大量输入，供以后查看和显示。<br>主要的处理有：在列表之间移动元素；删除包含特定值的所有列表元素；使用用户输入来填充字典等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;用户输入和&lt;code&gt;while&lt;/code&gt;循环；&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;while&lt;/code&gt;处理列表和字典。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习05天</title>
    <link href="https://chensenlin.cn/posts/21991/"/>
    <id>https://chensenlin.cn/posts/21991/</id>
    <published>2018-03-18T15:43:03.000Z</published>
    <updated>2018-03-27T05:34:53.130Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><p>字典的介绍和基本使用；</p><p>遍历字典和字典嵌套相关知识；</p><a id="more"></a><h4 id="字典及其使用"><a href="#字典及其使用" class="headerlink" title="字典及其使用"></a>字典及其使用</h4><p>在<code>Python</code>中，字典是一系列键—值对。每个键都与一个值相关联，你可以使用键来访问与之 相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何<code>Python</code>对 象用作字典中的值。<br>在Python中，字典用放在花括号<code>{}</code>中的一系列键—值对表示。<br>键—值对是两个相关联的值。指定键时，Python将返回与之相关联的值。键和值之间用冒号 分隔，而键—值对之间用逗号分隔。在字典中，你想存储多少个键—值对都可以。最简单的字典只有一个键—值对。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0[<span class="string">'color'</span>])</span></span> </span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0[<span class="string">'points'</span>])</span></span></span><br></pre></td></tr></table></figure><h5 id="访问字典的值"><a href="#访问字典的值" class="headerlink" title="访问字典的值"></a>访问字典的值</h5><p>要获取与键相关联的值，可依次指定字典名和放在方括号内的键。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0[<span class="string">'color'</span>])</span></span></span><br></pre></td></tr></table></figure><p>字典中可包含任意数量的键—值对。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alien_0</span> = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="添加键-值对"><a href="#添加键-值对" class="headerlink" title="添加键-值对"></a>添加键-值对</h5><p>字典是一种动态结构，可随时在其中添加键—值对。要添加键—值对，可依次指定字典名、用 方括号括起的键和相关联的值。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0)</span></span></span><br><span class="line">alien_0[<span class="string">'y_position'</span>] = <span class="number">25</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0)</span></span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125; <span class="number">13</span></span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'y_position'</span>: <span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，键—值对的排列顺序与添加顺序不同。Python不关心键—值对的添加顺序， 而只关心键和值之间的关联关系。</p></blockquote><h5 id="创建一个空字典"><a href="#创建一个空字典" class="headerlink" title="创建一个空字典"></a>创建一个空字典</h5><p>方法：用一对空的花括号定义一个字典，再分行添加各个键—值对。使用字典来存储用户提供的数据或在编写能自动生成大量键—值对的代码时，通常都需要先 定义一个空字典。</p><p>代码:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br><span class="line">alien_0[<span class="string">'color'</span>] = <span class="string">'green'</span> alien_0[<span class="string">'points'</span>] = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0)</span></span></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h5><p>要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"The alien is "</span> + alien_0[<span class="string">'color'</span>] + <span class="string">"."</span>)</span></span></span><br><span class="line">alien_0[<span class="string">'color'</span>] = <span class="string">'yellow'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"The alien is now "</span> + alien_0[<span class="string">'color'</span>] + <span class="string">"."</span>)</span></span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The alien <span class="keyword">is</span> green.</span><br><span class="line">The alien <span class="keyword">is</span> <span class="keyword">now</span> yellow.</span><br></pre></td></tr></table></figure><h5 id="删除键—值对"><a href="#删除键—值对" class="headerlink" title="删除键—值对"></a>删除键—值对</h5><p>对于字典中不再需要的信息，可使用del语句将相应的键—值对彻底删除。使用<code>del</code>语句时， 必须指定字典名和要删除的键。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(alien_0)</span></span></span><br><span class="line"><span class="selector-tag">del</span> alien_0[<span class="string">'points'</span>] print(alien_0)</span><br></pre></td></tr></table></figure><h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><p>一个<code>Python</code>字典可能只包含几个键—值对，也可能包含数百万个键—值对。鉴于字典可能包含 大量的数据，<code>Python</code>支持对字典遍历。字典可用于以各种方式存储信息，因此有多种遍历字典的 方式:可遍历字典的所有键—值对、键或值。</p><h5 id="遍历所有的键-值对"><a href="#遍历所有的键-值对" class="headerlink" title="遍历所有的键-值对"></a>遍历所有的键-值对</h5><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'efermi'</span>, </span><br><span class="line">    <span class="string">'first'</span>: <span class="string">'enrico'</span>, </span><br><span class="line">    <span class="string">'last'</span>: <span class="string">'fermi'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">key</span>, value in user_0.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\nKey: "</span> + <span class="built_in">key</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Value: "</span> + value)</span><br></pre></td></tr></table></figure><p><code>for</code>语句的第二部分包含字典名和方法<code>items()</code>，它返回一个键—值对列表。</p><h5 id="遍历字典中的所有键"><a href="#遍历字典中的所有键" class="headerlink" title="遍历字典中的所有键"></a>遍历字典中的所有键</h5><p><code>keys()</code>获取字典的所有值。</p><p>代码示例:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>, </span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>, </span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>, </span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>, </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">name</span> <span class="built_in">in</span> favorite_languages.keys():</span><br><span class="line">    print(<span class="built_in">name</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">jen</span></span><br><span class="line"><span class="attribute">sarah</span></span><br><span class="line"><span class="attribute">edward</span></span><br><span class="line"><span class="attribute">phil</span></span><br></pre></td></tr></table></figure><h5 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h5><p><code>values()</code>获取字典的所有值。<code>set()</code>可以去除重复的值。</p><p>代码示例:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>, </span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>, </span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>, </span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>, </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">name</span> <span class="built_in">in</span> favorite_languages.values():</span><br><span class="line">    print(<span class="built_in">name</span>)</span><br><span class="line">print(<span class="string">"去重复的值"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">name</span> <span class="built_in">in</span> <span class="built_in">set</span>(favorite_languages.values()):</span><br><span class="line">    print(<span class="built_in">name</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span></span><br><span class="line"><span class="keyword">c</span></span><br><span class="line"><span class="keyword">ruby</span></span><br><span class="line"><span class="keyword">python</span></span><br><span class="line">去重复的值</span><br><span class="line"><span class="keyword">python</span></span><br><span class="line"><span class="keyword">c</span></span><br><span class="line"><span class="keyword">ruby</span></span><br></pre></td></tr></table></figure><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><p>有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典。</p><h5 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h5><p>代码示例:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alien_<span class="number">0</span> = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'points'</span>: <span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">aliens = [alien_<span class="number">0</span>, alien_1, alien_2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    print(alien)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">10</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'points'</span>: <span class="number">15</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="在字典中存储列表"><a href="#在字典中存储列表" class="headerlink" title="在字典中存储列表"></a>在字典中存储列表</h5><p>每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表。</p><p>代码示例:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pizza</span> = &#123;</span><br><span class="line">    <span class="string">'crust'</span>: <span class="string">'thick'</span>,</span><br><span class="line">    <span class="string">'toppings'</span>: [<span class="string">'mushrooms'</span>, <span class="string">'extra cheese'</span>], </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>列表和字典的嵌套层级不应太多。如果嵌套层级比前面的示例多得多，很可能有更简单 的解决问题的方案。</p></blockquote><h5 id="在字典中存储字典"><a href="#在字典中存储字典" class="headerlink" title="在字典中存储字典"></a>在字典中存储字典</h5><p>代码示例:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">users = &#123; <span class="string">'aeinstein'</span>: &#123;</span><br><span class="line">                <span class="string">'first'</span>: <span class="string">'albert'</span>, </span><br><span class="line">                <span class="string">'last'</span>: <span class="string">'einstein'</span>, </span><br><span class="line">                <span class="string">'location'</span>: <span class="string">'princeton'</span>, </span><br><span class="line">                &#125;,</span><br><span class="line">        <span class="string">'mcurie'</span>: &#123;</span><br><span class="line">            <span class="string">'first'</span>: <span class="string">'marie'</span>, </span><br><span class="line">            <span class="string">'last'</span>: <span class="string">'curie'</span>, </span><br><span class="line">            <span class="string">'location'</span>: <span class="string">'paris'</span>, </span><br><span class="line">            &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义了一个名为<code>users</code>的字典，其中包含两个键:用户名<code>&#39;aeinstein&#39;</code>和<code>&#39;mcurie&#39;</code>; 与每个键相关联的值都是一个字典，其中包含用户的名、姓和居住地。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;p&gt;字典的介绍和基本使用；&lt;/p&gt;
&lt;p&gt;遍历字典和字典嵌套相关知识；&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习04天</title>
    <link href="https://chensenlin.cn/posts/43494/"/>
    <id>https://chensenlin.cn/posts/43494/</id>
    <published>2018-03-17T13:33:13.000Z</published>
    <updated>2018-03-27T05:34:58.618Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：条件判断和<code>if</code>语句的使用；</p><a id="more"></a><h4 id="认识条件判断"><a href="#认识条件判断" class="headerlink" title="认识条件判断"></a>认识条件判断</h4><p>在日常开发中需要用到如果怎么样就怎么样，否则就怎么样的逻辑。主要采用<code>if</code>语句来实现的。</p><p>例如：假设你有一个汽车 列表，并想将其中每辆汽车的名称打印出来。对于大多数汽车，都应以首字母大写的方式打印其 名称，但对于汽车名<code>&#39;bmw&#39;</code>，应以全大写的方式打印。下面的代码遍历一个列表，并以首字母大 写的方式打印其中的汽车名，但对于汽车名<code>&#39;bmw&#39;</code>，以全大写的方式打印:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'subaru'</span>, <span class="string">'toyota'</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car == <span class="string">'bmw'</span>:</span><br><span class="line">        <span class="built_in">print</span>(car.<span class="built_in">upper</span>())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(car.title())</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Audi</span></span><br><span class="line"><span class="keyword">BMW</span></span><br><span class="line"><span class="keyword">Subaru</span></span><br><span class="line"><span class="keyword">Toyota</span></span><br></pre></td></tr></table></figure><h4 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h4><p>每条<code>if</code>语句的核心都是一个值为<code>True</code>或<code>False</code>的表达式，这种表达式被称为条件测试。</p><h5 id="判断是否相等"><a href="#判断是否相等" class="headerlink" title="判断是否相等"></a>判断是否相等</h5><p>相等的语句是:<code>==</code>，赋值的语句是:<code>=</code>，两者需要作区分。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">'like'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(c == <span class="string">'Like'</span>)</span></span></span><br></pre></td></tr></table></figure><p>运行结果:<code>False</code></p><p>如果需要或略大小写可以采用将其转化为小写的方式，函数为:<code>lower()</code>。其余的逻辑同理。</p><h5 id="判断是否不相等"><a href="#判断是否不相等" class="headerlink" title="判断是否不相等"></a>判断是否不相等</h5><p>语句:<code>!=</code>，其余的逻辑类似，不过多阐述。</p><h5 id="比较数字"><a href="#比较数字" class="headerlink" title="比较数字"></a>比较数字</h5><p> 条件语句中可包含各种数学比较，如小于、小于等于、大于、大于等于。</p><p>代码示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; num = <span class="number">29</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; num &lt; <span class="number">21</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; num &gt;= <span class="number">4</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="多个条件判断"><a href="#多个条件判断" class="headerlink" title="多个条件判断"></a>多个条件判断</h5><p>多个条件判断将条件采用关键字<code>and</code>连接，只有全部为<code>true</code>才能满足，否则整体条件就为<code>false</code>。如果是或者的关系采用关键字<code>or</code>，只要满足其中的一个整体条件就为<code>true</code>。如果不确定优先级(或者可读性)的问题，可以采用括号就没个单个条件括起来。</p><p>代码示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> = <span class="number">22</span> </span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_1 = <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> &gt;= <span class="number">21</span> and age_1 &gt;= <span class="number">21</span> </span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_1 = <span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> &gt;= <span class="number">21</span> and age_1 &gt;= <span class="number">21</span> </span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> = <span class="number">22</span> </span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_1 = <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> &gt;= <span class="number">21</span> or age_1 &gt;= <span class="number">21</span> </span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> = <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; age_<span class="number">0</span> &gt;= <span class="number">21</span> or age_1 &gt;= <span class="number">21</span> </span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; False</span><br></pre></td></tr></table></figure><p>采用括号的形式提高可读性和解决优先级的问题。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">age_0</span> &gt;= <span class="number">21</span>) and (<span class="name">age_1</span> &gt;= <span class="number">21</span>)</span><br></pre></td></tr></table></figure><h5 id="检查特定的值是否包含在列表中"><a href="#检查特定的值是否包含在列表中" class="headerlink" title="检查特定的值是否包含在列表中"></a>检查特定的值是否包含在列表中</h5><p>要判断特定的值是否已包含在列表中，可使用关键字<code>in</code>。</p><p>代码示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'onions'</span>, <span class="string">'pineapple'</span>]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">'mushrooms'</span> <span class="keyword">in</span> requested_toppings</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">'pepperoni'</span> <span class="keyword">in</span> requested_toppings</span></span><br><span class="line">False</span><br></pre></td></tr></table></figure><h5 id="检查特定的值是否不包含在列表中"><a href="#检查特定的值是否不包含在列表中" class="headerlink" title="检查特定的值是否不包含在列表中"></a>检查特定的值是否不包含在列表中</h5><p>确定特定的值未包含在列表中，可使用关键字<code>not in</code>。</p><p>使用方法和上面判断是否在列表中一致。</p><h5 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h5><p>布尔表达式的结果要么为<code>True</code>，要么为<code>False</code>,布尔值通常用于记录条件。</p><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><code>if</code>语句</h4><h5 id="简单的if语句"><a href="#简单的if语句" class="headerlink" title="简单的if语句"></a>简单的<code>if</code>语句</h5><p>代码示例:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">num</span> = <span class="number">34</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">num</span> &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"恭喜，您已经成年"</span>)</span><br></pre></td></tr></table></figure><h5 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a><code>if-else</code>语句</h5><p>代码示例:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">num</span> = <span class="number">16</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">num</span> &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"恭喜，您已经成年"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"你好，你未成年呢"</span>)</span><br></pre></td></tr></table></figure><h5 id="if-elif-else-结构"><a href="#if-elif-else-结构" class="headerlink" title="if-elif-else 结构"></a><code>if-elif-else</code> 结构</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">num</span> = <span class="number">16</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">num</span> &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"恭喜，您已经成年"</span>)</span><br><span class="line">elif <span class="built_in">num</span> &gt; <span class="number">15</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"你好，还差3年就成年"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"122"</span>)</span><br></pre></td></tr></table></figure><p><code>elif</code>可以连续多次使用，多加判断即可。同时在某些时候可以省略<code>else</code>的部分。</p><h4 id="使用if语句处理列表"><a href="#使用if语句处理列表" class="headerlink" title="使用if语句处理列表"></a>使用<code>if</code>语句处理列表</h4><h5 id="检查特殊元素"><a href="#检查特殊元素" class="headerlink" title="检查特殊元素"></a>检查特殊元素</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping == <span class="string">'green peppers'</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Sorry, we are out of green peppers right now."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Adding "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\nFinished making your pizza!"</span>)</span><br></pre></td></tr></table></figure><p>循环的时候可以进行判断，然后即可，同时还可以判断是否为空列表。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：条件判断和&lt;code&gt;if&lt;/code&gt;语句的使用；&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习03天</title>
    <link href="https://chensenlin.cn/posts/56807/"/>
    <id>https://chensenlin.cn/posts/56807/</id>
    <published>2018-03-16T07:14:43.000Z</published>
    <updated>2018-03-27T05:35:05.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><ol><li><p>使用列表：切片，遍历切片，复制切片；</p></li><li><p>元组的定义，遍历元组，修改元组变量；</p></li></ol><a id="more"></a><h4 id="使用列表"><a href="#使用列表" class="headerlink" title="使用列表"></a>使用列表</h4><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数<code>range()</code>一样，<code>Python</code> 在到达你指定的第二个索引前面的元素后停止。要输出列表中的前三个元素，需要指定索引<code>0~3</code>， 这将输出分别为<code>0</code>、<code>1</code>和<code>2</code>的元素。</p><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"><span class="built_in">print</span>(players[0:3]) <span class="comment"># 取从索引0开始到第三个结束，最后输出前三个</span></span><br><span class="line"><span class="built_in">print</span>(players[0:3]) <span class="comment"># 输出从索引1到4结束，</span></span><br><span class="line"><span class="built_in">print</span>(players[:4])  <span class="comment"># 没有索引就从列表开头开始，到指定的索引值结束</span></span><br><span class="line"><span class="built_in">print</span>(players[2:]) <span class="comment"># 没有结束索引就知道最后结束</span></span><br><span class="line"><span class="built_in">print</span>(players[-3:]) <span class="comment"># 倒数第三个</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'charles</span>', <span class="symbol">'martina</span>', <span class="symbol">'michael</span>']</span><br><span class="line">[<span class="symbol">'charles</span>', <span class="symbol">'martina</span>', <span class="symbol">'michael</span>']</span><br><span class="line">[<span class="symbol">'charles</span>', <span class="symbol">'martina</span>', <span class="symbol">'michael</span>', <span class="symbol">'florence</span>']</span><br><span class="line">[<span class="symbol">'michael</span>', <span class="symbol">'florence</span>', <span class="symbol">'eli</span>']</span><br><span class="line">[<span class="symbol">'michael</span>', <span class="symbol">'florence</span>', <span class="symbol">'eli</span>']</span><br></pre></td></tr></table></figure><h5 id="遍历切片"><a href="#遍历切片" class="headerlink" title="遍历切片"></a>遍历切片</h5><p>前面我们遍历列表的时候采用<code>for</code>语句来实现的，同理，切片同样可以采用<code>for</code>语句来实现。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"Here are the first three players on my team:"</span>)</span></span></span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:</span><br><span class="line">    print(player.title())</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Here are <span class="keyword">the</span> <span class="keyword">first</span> <span class="literal">three</span> players <span class="keyword">on</span> <span class="title">my</span> <span class="title">team</span>:</span><br><span class="line">Charles</span><br><span class="line">Martina</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure><h5 id="复制切片"><a href="#复制切片" class="headerlink" title="复制切片"></a>复制切片</h5><p>要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引<code>([:])</code>。 这让<code>Python</code>创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表。复制的过程中可以进行赋值或者修改操作。例如新增一个元素。</p><p>代码示例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods[:]</span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"My favorite foods are:"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(my_foods)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"\nMy friend's favorite foods are:"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(friend_foods)</span></span></span><br></pre></td></tr></table></figure><p>代码结果:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">My</span> favorite foods are:</span><br><span class="line">[<span class="symbol">'pizza'</span>, <span class="symbol">'falafel'</span>, <span class="symbol">'carrot</span> cake', <span class="symbol">'cannoli'</span>]</span><br><span class="line"></span><br><span class="line"><span class="type">My</span> friend's favorite foods are:</span><br><span class="line">[<span class="symbol">'pizza'</span>, <span class="symbol">'falafel'</span>, <span class="symbol">'carrot</span> cake', <span class="symbol">'ice</span> cream']</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><h5 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h5><p>列表是可以修改的，主要适合存储程序在运行期间可能会变化的数据。如果需要创建不可修改的值就需要用元组，所以元组可以理解为:不可被修改的列表。但是元组采用的是方括号来标识。和列表同理，均可采用索引来访问元素。</p><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change_list = (<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>) <span class="comment">#定义一个元组 </span></span><br><span class="line"><span class="built_in">print</span>(change_list[0]) <span class="comment">#取元组索引为0 的值</span></span><br><span class="line">change_list[1] = <span class="string">'hello'</span> <span class="comment">#修改元组中索引为1的值 会被报错，因为元组不可以被修改。</span></span><br></pre></td></tr></table></figure><h5 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h5><p>遍历元组和遍历列表一样，采用<code>for</code> 来实现。</p><p>代码如下:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change_list = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">number</span> in change_lis<span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">number</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h5 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h5><p>修改元组的变量不等于修改元组的元素，也就是给存储元组的变量赋值。</p><p>代码示例:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">change_list = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">number</span> in change_lis<span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">number</span>)</span><br><span class="line">    </span><br><span class="line">change_list = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">444</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">number</span> in change_lis<span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">number</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">444</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用列表：切片，遍历切片，复制切片；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元组的定义，遍历元组，修改元组变量；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习02天</title>
    <link href="https://chensenlin.cn/posts/3226/"/>
    <id>https://chensenlin.cn/posts/3226/</id>
    <published>2018-03-15T02:04:23.000Z</published>
    <updated>2018-03-27T05:35:02.080Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：</p><ol><li><p>遍历列表，创建列表，<code>range()</code>函数使用；</p></li><li><p>统计列表数值，列表解析；</p></li></ol><a id="more"></a><h4 id="通过循环的方式遍历列表"><a href="#通过循环的方式遍历列表" class="headerlink" title="通过循环的方式遍历列表"></a>通过循环的方式遍历列表</h4><p>通常情况下，我们需要对列表的所有元素进行操作，这个时候就需要遍历整个列表。循环采用<code>for</code>。</p><p>语法:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> change_name <span class="keyword">in</span> list_name:  </span><br><span class="line">    <span class="builtin-name">print</span>(change_name)</span><br></pre></td></tr></table></figure><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">alice</span></span><br><span class="line"><span class="attribute">david</span></span><br><span class="line"><span class="attribute">carolina</span></span><br></pre></td></tr></table></figure><p>循环的含义其实是将列表的值逐一取出，然后进行其他操作。例如拼接、赋值、运算等。</p><p>代码示例:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician.<span class="built_in">upper</span>() + <span class="string">", that was a great trick!"</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALICE, that was <span class="selector-tag">a</span> great trick!</span><br><span class="line">DAVID, that was <span class="selector-tag">a</span> great trick!</span><br><span class="line">CAROLINA, that was <span class="selector-tag">a</span> great trick!</span><br></pre></td></tr></table></figure><p>注意事项:</p><ol><li><code>python</code>中语法需要注意的主要是忘记<strong>缩进</strong>和不必要的缩进;</li><li>列表后面的<code>:</code>不能遗漏; </li><li>对于位于<code>for</code>语句后面且属于循环组成部分的代码行，一定要缩进。</li></ol><p>例如:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magiciand <span class="keyword">in</span> magicians:</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(magiciand)</span></span></span><br></pre></td></tr></table></figure><p>错误提示:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">File</span> <span class="string">"for.py"</span>, <span class="keyword">line</span> 3</span><br><span class="line">    <span class="keyword">print</span>(magiciand)</span><br><span class="line">        ^</span><br><span class="line">IndentationError: expected <span class="keyword">an</span> indented block</span><br></pre></td></tr></table></figure><h4 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h4><h5 id="range-函数认识"><a href="#range-函数认识" class="headerlink" title="range()函数认识"></a><code>range()</code>函数认识</h5><p><code>range()</code>函数产生指定范围的随机值。</p><p>代码示例:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for <span class="keyword">value</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">value</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  day2 python range.py</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>需要注意的是这是函数的使用，可以理解为<code>[1,7)</code>;</p><h5 id="range-函数创建数字列表"><a href="#range-函数创建数字列表" class="headerlink" title="range()函数创建数字列表"></a><code>range()</code>函数创建数字列表</h5><p>要创建数字列表，可使用函数<code>list()</code>将<code>range()</code>的结果直接转换为列表。如果将<code>range()</code>作为<code>list()</code>的参数，输出将为一个数字列表。同时还可以指定步长。</p><p>代码示例:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">range_num = <span class="type">list</span>(range(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line">print(range_num)</span><br><span class="line">range_num_two = <span class="type">list</span>(range(<span class="number">1</span>,<span class="number">20</span>,<span class="number">2</span>))#指定步长</span><br><span class="line">print(range_num_two)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><h5 id="统计数字列表的值"><a href="#统计数字列表的值" class="headerlink" title="统计数字列表的值"></a>统计数字列表的值</h5><p><code>min()</code> :找出列表的最小值;<br><code>max()</code> :找出列表的最大值;<br><code>sum()</code> :求和;</p><p>代码示例:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">print(min(<span class="type">list</span>))</span><br><span class="line">print(max(<span class="type">list</span>))</span><br><span class="line">print(sum(<span class="type">list</span>))</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure><h5 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h5><p>代码示例:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [<span class="keyword">value</span>**<span class="number">2</span> for <span class="keyword">value</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><p>要使用这种语法，首先指定一个描述性的列表名，如<code>squares</code>;然后，指定一个左方括号， 并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为<code>value**2</code>，它计 算平方值。接下来，编写一个<code>for</code>循环，用于给表达式提供值，再加上右方括号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;遍历列表，创建列表，&lt;code&gt;range()&lt;/code&gt;函数使用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;统计列表数值，列表解析；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chensenlin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chensenlin.cn/tags/Python/"/>
    
      <category term="学习" scheme="https://chensenlin.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
