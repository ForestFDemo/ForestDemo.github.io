<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2Fposts%2F0%2F</url>
    <content type="text"><![CDATA[title: 购买付费软件的一点感想categories: 生活tags: 软件 生活date: 2018-02-03 11:34:53 付费还是免费？以前我使用Windows的时候，如果遇到付费的软件我都会选择注册机、注册码、破解工具等方式来解决，同时某盘还存了很多的破解的软件或者工具。现在我会逐步选择付费的软件，同时选择同类产品比较好的软件。因为我觉得付费购买是对人家的一种尊重和支持。同理，我是一个开发者，我希望我的作品别人也能够支持，支持别人其实自己也会得到支持。 如何付费？一般会根据自己的需求来判断自己是否需要这个软件的功能，是否能够解决我自己的问题？是否能够满足的我的需要？然后对比同类产品中付费和免费的相关的产品，如果免费的就足够就不需要考虑付费了。例如卸载软件AppCleaner，还有比它更加优秀的产品，但是我选择这个就可以了。同理，如果付费中我能够接受的价格能够满足就可以了，没有必要去选择最贵的活着最好的，主要是最适合自己的。例如剪切板工具有很多，我选择了iPaste，专注于剪切板功能。 选择付费是一种需要，也是一种支持，更是一种态度。 付费软件列表iPhone 软件名 价格(元) Price Tag 30 V2er 8 白描 1+6 熊猫吃短信 1 Picsew 1 凤凰新闻 Pro 1 Holo 0.00 小历 1 2017年 落格输入法 3 Piiic 1 2017年 iPaste 58.00 TextGrabber 30.00 X.cat Pro 40 Cosmos 0.00 Shu 12.00 鲨鱼记账Pro 1 Mac 软件名 价格(元) Clearview 78 2017年 MWeb 98 2017年 Yummy FTP Pro 18 2018年 iPaste 58 2017年 赠送 Xnip 12/年 2018年 12元/年 Disk Drill 189.00 2018年 赠送 Total Video Converter 0.00 2018年 限免 Folx pro 5 59.00 20180224 iStat Menus 6 14.00 20180228 暂时就想起来了这么点。。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python学习03天]]></title>
    <url>%2Fposts%2F56807%2F</url>
    <content type="text"><![CDATA[使用列表切片要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range()一样，Python 在到达你指定的第二个索引前面的元素后停止。要输出列表中的前三个元素，需要指定索引0~3， 这将输出分别为0、1和2的元素。 代码示例: 123456players = ['charles', 'martina', 'michael', 'florence', 'eli']print(players[0:3]) # 取从索引0开始到第三个结束，最后输出前三个print(players[0:3]) # 输出从索引1到4结束，print(players[:4]) # 没有索引就从列表开头开始，到指定的索引值结束print(players[2:]) # 没有结束索引就知道最后结束print(players[-3:]) # 倒数第三个 运行结果: 12345['charles', 'martina', 'michael']['charles', 'martina', 'michael']['charles', 'martina', 'michael', 'florence']['michael', 'florence', 'eli']['michael', 'florence', 'eli'] 遍历切片前面我们遍历列表的时候采用for语句来实现的，同理，切片同样可以采用for语句来实现。 代码示例: 1234players = ['charles', 'martina', 'michael', 'florence', 'eli']print("Here are the first three players on my team:")for player in players[:3]: print(player.title()) 运行结果: 1234Here are the first three players on my team:CharlesMartinaMichael 复制切片要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引([:])。 这让Python创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表。复制的过程中可以进行赋值或者修改操作。例如新增一个元素。 代码示例: 12345678my_foods = ['pizza', 'falafel', 'carrot cake']friend_foods = my_foods[:]my_foods.append('cannoli')friend_foods.append('ice cream')print("My favorite foods are:")print(my_foods)print("\nMy friend's favorite foods are:")print(friend_foods) 代码结果: 12345My favorite foods are:['pizza', 'falafel', 'carrot cake', 'cannoli']My friend's favorite foods are:['pizza', 'falafel', 'carrot cake', 'ice cream'] 元组定义元组列表是可以修改的，主要适合存储程序在运行期间可能会变化的数据。如果需要创建不可修改的值就需要用元组，所以元组可以理解为:不可被修改的列表。但是元组采用的是方括号来标识。和列表同理，均可采用索引来访问元素。 代码示例: 123change_list = ('one','two','three','four') #定义一个元组 print(change_list[0]) #取元组索引为0 的值change_list[1] = 'hello' #修改元组中索引为1的值 会被报错，因为元组不可以被修改。 遍历元组遍历元组和遍历列表一样，采用for 来实现。 代码如下: 123change_list = (1,2,3,4)for number in change_list: print(number) 运行结果: 12341234 修改元组变量修改元组的变量不等于修改元组的元素，也就是给存储元组的变量赋值。 代码示例: 1234567change_list = (1,2,3,4)for number in change_list: print(number) change_list = (11,22,33,444)for number in change_list: print(number) 运行结果: 123456781234112233444]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习02天]]></title>
    <url>%2Fposts%2F3226%2F</url>
    <content type="text"><![CDATA[通过循环的方式遍历列表通常情况下，我们需要对列表的所有元素进行操作，这个时候就需要遍历整个列表。循环采用for。 语法: 12for change_name in list_name: print(change_name) 代码示例: 123magicians = ['alice', 'david', 'carolina']for magician in magicians: print(magician) 运行结果: 123alicedavidcarolina 循环的含义其实是将列表的值逐一取出，然后进行其他操作。例如拼接、赋值、运算等。 代码示例: 123magicians = ['alice', 'david', 'carolina']for magician in magicians: print(magician.upper() + ", that was a great trick!") 运行结果: 123ALICE, that was a great trick!DAVID, that was a great trick!CAROLINA, that was a great trick! 注意事项: python中语法需要注意的主要是忘记缩进和不必要的缩进; 列表后面的:不能遗漏; 对于位于for语句后面且属于循环组成部分的代码行，一定要缩进。 例如: 123magicians = ['alice', 'david', 'carolina']for magiciand in magicians:print(magiciand) 错误提示: 1234 File "for.py", line 3 print(magiciand) ^IndentationError: expected an indented block 创建数值列表range()函数认识range()函数产生指定范围的随机值。 代码示例: 12for value in range(1,7): print(value) 运行结果: 1234567➜ day2 python range.py123456 需要注意的是这是函数的使用，可以理解为[1,7); range()函数创建数字列表要创建数字列表，可使用函数list()将range()的结果直接转换为列表。如果将range()作为list()的参数，输出将为一个数字列表。同时还可以指定步长。 代码示例: 1234range_num = list(range(1,4))print(range_num)range_num_two = list(range(1,20,2))#指定步长print(range_num_two) 运行结果: 12[1, 2, 3][1, 3, 5, 7, 9, 11, 13, 15, 17, 19] 统计数字列表的值min() :找出列表的最小值;max() :找出列表的最大值;sum() :求和; 代码示例: 1234list = [1,2,3,4,5,6,7]print(min(list))print(max(list))print(sum(list)) 运行结果: 1231728 列表解析代码示例: 12squares = [value**2 for value in range(1,11)]print(squares) 要使用这种语法，首先指定一个描述性的列表名，如squares;然后，指定一个左方括号， 并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为value**2，它计 算平方值。接下来，编写一个for循环，用于给表达式提供值，再加上右方括号。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习01天]]></title>
    <url>%2Fposts%2F7874%2F</url>
    <content type="text"><![CDATA[列表概念列表由一系列按特定顺序排列的元素组成。可以创建包含字母表中所有字母、数字0~9或 所有家庭成员姓名的列表;也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。鉴于列表通常包含多个元素，给列表指定一个表示复数的名称(如letters、digits或names)是 个不错的主意。 语法用方括号([])来表示列表，并用逗号来分隔其中的元素。 12bicycles = ['demo', 'chen', 'sen', 'lin']print(bicycles) 访问列表元素访问列表中的元素是通过索引获取的，而索引是从0开始的。 12345bicycles = ['demo', 'chen', 'sen', 'lin']print(bicycles)print("取第0个索引:" + bicycles[0])print("取第1个索引:" + bicycles[1])print("取第最后一个索引的值:" + bicycles[-1]) 运行结果： 12345➜day1 python dsc.py['demo', 'chen', 'sen', 'lin']取第0个索引:demo取第1个索引:chen取第-1个索引:lin 结合第0天的知识，我们现在对列表元素进行拼接的操作。 123bicycles = ['demo', 'chen', 'sen', 'lin']res = "My name is " + bicycles[0] + "!";print(res) 运行结果： 1My name is demo! 修改列表元素修改元素的值可以理解为通过索引获取需要修改的值，然后重新赋值。 代码示例: 1234bicycles = ['demo', 'chen', 'sen', 'lin']print(bicycles)bicycles[1] = 'Name';print(bicycles) 可以理解为: 123456bicycles = ['demo', 'chen', 'sen', 'lin']print(bicycles)change_res = bicycles[1];change_res = 'Name';bicycles[1] = change_res;print(bicycles) 运行结果: 12['demo', 'chen', 'sen', 'lin']['demo', 'Name', 'sen', 'lin'] 添加列表元素添加元素主要有两种方式：列表末尾添加元素，列表中插入元素(包含开头)。其中不能影响其他的元素。 代码示例: 1234bicycles = ['demo', 'chen', 'sen', 'lin']print(bicycles)bicycles.append('good')print(bicycles) 运行结果： 12['demo', 'chen', 'sen', 'lin']['demo', 'chen', 'sen', 'lin', 'good'] 甚至可以创建一个没有任何的元素空的列表，然后不断的追加元素。或者可以从开头或者中间插入元素。 代码示例: 12345null_list = []null_list.append('hello')null_list.append('senlin')null_list.append('chen')print(null_list) 运行结果: 1['hello', 'senlin', 'chen'] insert()可以在任意位置添加元素。 代码示例: 123in_list = ['hello', 'senlin', 'chen']in_list.insert(1, 'name')print(in_list) 运行结果: 1['hello', 'name', 'senlin', 'chen'] 删除列表元素删除元素的方法有:del删除、pop()弹出删除、根据值删除。 代码示例: 12345678list = ['on','list','time','man','like','goods']del list[0]print("删除第0个元素的值",list)print("弹出删除第最后一个元素的值",list.pop())print("弹出删除第一个元素的值",list.pop(1))print(list)print("根据值删除",list.remove('man'))print(list) 运行结果: 123456删除第0个元素的值 ['list', 'time', 'man', 'like', 'goods']弹出删除第最后一个元素的值 goods弹出删除第一个元素的值 time['list', 'man', 'like']根据值删除 None['list', 'man'] 组织列表组织列表中主要是针对列表进行排序等操作。排序分为临时排序(sorted())和永久排序(sort())。reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排 列顺序:reverse()永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。 代码示例: 123456789cars = ['bmw', 'audi', 'toyota', 'subaru']cars.sort()print(cars) #根据字母永久排序cars = ['bmw', 'audi', 'toyota', 'subaru']cars.sort(reverse=True)print(cars) #根据字母相反方向永久排序cars = ['bmw', 'audi', 'toyota', 'subaru']cars.reverse()print(cars) #倒着打印列表 运行结果: 1234['audi', 'bmw', 'subaru', 'toyota']['audi', 'bmw', 'subaru', 'toyota']['toyota', 'subaru', 'bmwmw', 'audi']['subaru', 'toyota', 'audi', 'bmw'] 获取元素长度代码示例: 123cars = ['bmw', 'audi', 'toyota', 'subaru']res = len(cars)print(res) 运行结果为：4 至此，第三章的列表已经学习完毕，本章的函数不是特别多。主要的知识点有概念，获取值，修改和排序等操作。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习00天]]></title>
    <url>%2Fposts%2F39399%2F</url>
    <content type="text"><![CDATA[安装和准备主要查询官网文档即可解决。官网地址：https://www.python.org Hello World终端运行 命令行运行新建以.py结尾的文件，例如hello.py;打开该文件，输入：print(&quot;Hello World&quot;);,最后运行：python hello.py ; 数据类型变量基本使用变量就是保存一个值的信息，将其存储起来，随着程序后面的不断赋值（要求存储一个新的值），该变量的值也会随着改变。如下图所示，change变量就是被重新赋值了。 运行结果如下： 123➜day0 python hello.pyHello SenLin Chen!Hello Python SenLin! 语法和规则语法：变量名=赋值的值，例如change是变量名，Hello SenLin Chen!是赋值的值。这样变量change的值就是:Hello SenLin Chen!; 规则： 变量名只能包含字母、下划线和数字。数字不能开头。不能包含空格。例如:12_name;合格写法：user_name； 不能用python的关键字和函数名作为变量名，因为已经被用了，这么想就没事了。 变量名应该见名知意，尽可能简短。 字符串含义用引号括起来就是字符串。其中有单引号和双引号。例如：&#39;string&#39;,&quot;user_name&quot;等。 修改字符串大小写常用方法: title():将字符串的首字母设置为大写; upper():将字符串全部设置为大写; lower():将字符串全部设置为小写; 代码示例: 1234change = 'hello,my name is demo chen!'print(change.title())print(change.upper())print(change.lower()) 运行结果: 1234➜ day0 python hello.pyHello ,My Name Is Demo Chen!HELLO ,MY NAME IS DEMO CHEN!hello ,my name is demo chen! 拼接字符串使用场景:多个字符串合并为一个字符串形式。 使用方法:采用+的形式来拼接。 代码示例: 123user = 'hello'name = 'senlin'user_name = user + '_' + name 运行结果: 12➜day0 python user_name.pyhello_senlinenlin 添加空白制表符:\t;换行:\n ;可以组合使用。 删除空白&#39;demo &#39;不等于‘demo’;所以需要去除空白。 相关函数: rstrip():去除末尾的空白;lstrip():去除开头的空白;strip():去除开头和末尾的空白; 数字数字主要有整数和浮点数。主要的运算有:加(+)、减(-)、乘(*)、除(/)、乘方(**)等 代码示例: str():将非字符串表示为字符串。 注释#为Python注释的语法。 代码示例:]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
