<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[怎样才能正确地认识自己？]]></title>
    <url>%2Fposts%2F666%2F</url>
    <content type="text"><![CDATA[在我们的心中，自己比其他任何事更关键。 受俞军老师的影响，今年的阅读主题开始涉及心理学与经济方面的内容。 俞军老师在知乎关于产品经理的书单（公众号回复：俞军书单 可免费获取）回答中也提到了《社会心理学》，我就作为了今年阅读的第一本书。 对我来说，阅读起来有点难度，毕竟心理学对我来说几乎是零基础，平时关注「L 先生说」也提到了一些关于心理学书单，然而并没有当回事。 我相信，这本书读完后，应该能收获不少，后续也会将阅读的笔记分享在「特立独行的异类」公众号（ID：senlin_books）首发。 本文是《社会心理学》的第 1 篇笔记。 一、书籍信息 书名：《社会心理学（第 8 版）》 作者：戴维·迈尔斯，爱荷华大学的博士，在密歇根的霍普学院工作，成为那里的 John Dirk Werkman 心理学教授，开设了多门社会心理学的课程。霍普学院评选他为「最杰出的教授」。 简介：这是一本被美国 700 多所大学或学院的心理系作为心理学领域的主导教材。本书有效的将基础研究与实践应用结合在一起，以富有逻辑性的组织结构引领学生了解人们是如何思索、影响他人并与他人建立联系的。是人们了解自身、了解社会、了解自己与社会之间关系的最佳的指导性书籍。 阅读目的（本章节）：初步认识社会心理学，结合「社会中的自我」反思自己。 二、笔记大纲 什么是社会心理学？ 社会中的自我 自我的概念：我是谁 自尊 自我展示 个人思考：我的自我 三、笔记正文3.1 什么是社会心理学社会心理学是一门研究我们周围情境的力量的科学，尤其关注我们是如何看待他人，如何影响他人的。更确切地说，社会心理学是一门就人们如何看待他人，如何影响他人，又如何互相关联的种种问题进行科学研究的学科。 社会心理学是研究人们如何看待彼此、如何互相影响，互相联系的科学。它关注的核心问题是：我们如何构建社会世界，我们的社会直觉如何指引我们，而有时候又是如何误导我们的，以及我们的社会行为如何受他人、我们自己的态度和生物性的影响。 社会学和心理学是社会心理学的母体。相比社会学，社会心理学试图在研究内容上更侧重于个体，在研究方法上更侧重于实验。相比人格心理学，社会心理学对个体之间的差异关注得较少些．而更多关注人类如何看待影响彼此。 社会心理学的重要课题是什么：它包罗万象的箩筐里究竟都装了些什么？ 我们人类总是有一种不可抑制的冲动，想要解释行为，对其归因，以使其变得次序井然，具有可预见性，使一切尽在掌握之中。 我们解释着他人的行为，通常足够快也足够准确，以适应我们日常生活的需要。当他人的行为具有一致性而且与众不同时，我们会把其行为归因于他们的人格。 例如，如果你发现一个人说话总是对人冷嘲热讽，你可能就会推断此人秉性不良，然后便设法尽量避免与他的接触。 社会心理学涉及生活的方方面面，你的生活：包括你的信念，你的态度，你的人际关系。如此说来，它便具有了阐释你生活的潜力，让那些指引你所思所想的微妙力量暴露在眼前。 3.2 社会中的自我这一段内容作者探讨了我们对自身的感觉与我们所处的社会之间的互动关系。我们所处的社会环境是如何塑造我们的自我定义的？我们的自我利益是如何影响社会判断、又是如何促进我们的社会行为的？ 如果你视力不好，你就得想办法解决。你可能会戴眼镜或隐形眼镜。但如果你听力不好，你有四分之三的可能会不去理睬这个问题，即不会戴助听器。为什么那些听力差的人，除非迫不得已，否则就不会要求配戴“耳朵的眼镜”——助听器呢？via 《社会心理学》 案例 在我们的心中，自己比其他任何事更关键。通过自我专注的观察，我们可能会高估自己的突出程度。这就是焦点效应。 焦点效应：把自己看做一切的中心，并且直觉地高估别人对我们的注意度。 那，我们怎样才能精确地认识自己？是什么决定了我们的自我概念？ 自我：我是谁 自我概念的基础、你对界定自我的特殊信念，是你的自我图式。图式是我们组织自己所处世界的心理模板。我们的自我图式即对自己的认识，这会影响我们如何感知、回忆和评价他人和自己。 例如，如果写代码是你自我概念的核心部分，你会特别注意别人电脑的开发工具或者对方的开发语言。 自我参照效应：当信息与我们的自我概念有关时，我们会对它进行快速的加工和很好的回忆。它可以阐明一个基本事实：我们对自我的感觉处于我们世界的核心位置。 由于我们倾向于把自己看成世界的核心，因此我们会高估别人对我们行为的指向程度。 我们经常把自己看做是某件事情的主要负责人，而实际上我们只是在其中扮演很小的一个角色； 当评判其他人的表现和行为时，我们经常本能地将其与我们自己的行为相比较； 当我们和别人聊天时，如果无意中听到屋里其他人提起我们的名字，那我们的听觉雷达会立刻转移我们的注意力。 自我概念已经成为社会心理学的主要焦点，因为它有利于组织我们的思想并指导我们的社会行为，但是什么会决定我们的自我概念呢？ 我们扮演的角色（学生、父亲、老板等） 我们形成的社会同一性（个人身份/社会身份） 我们和别人的比较（和别人比较，思考为何不同） 我们的成功与失败（失败会导致低自尊） 其他人如何评价我们（公认的成就能增强个体的自我概念） 周围的文化（东西方文化） – 自尊 什么是自尊呢？我们所有的自我图式和可能的自我的总和。你也可以理解为全面的自我评价。 低自尊的人在抑郁、滥用毒品和各种形式的行为过失方面面临更多的风险。高自尊则有利于培养主动、乐观和愉快的感觉。 当发现自己高傲的自尊受到威胁时，人们常常会以打压他人的方式来应对，有时甚至是以暴力的方式反应。一个心高气傲的孩子，如果又遭到社会性拒绝的威胁和挫折，那将是相当危险的。 和自尊脆弱的人相比，把自尊更多地建立在良好的自我感觉而不是分数、外貌、金钱或别人的赞美的基础上的自尊感明确的人，会一直感到状态良好。 如果良好的自我感觉是我们的目标，我们就不会不把批评放在心上，我们会更加倾向于去批评别人而不是对他们倾注感情，更加倾向于在压力下追求成功而不是仅仅在行动中获得快乐。 克罗克和帕克指出，时间久了，如此寻求自尊并不能满足我们对能力、人际关系和自主性的深层需求。对自我形象少关注一些，多注意培养自己的才能和发展人际关系，因为这些最终会给你带来更大的幸福感。 –自我展示 自我展示：指我们想要向外在的观众（别人）和内在的观众（自己）展现一种受赞许的形象。 自我位于我们社会世界的中心，自尊和自我效能带来一些益处，而自我服务性的傲慢却使自我评价出现偏差。有一些问题：那些美化自我的对外展示都是真实的吗？人们当众说出的话，是他们的真实感受吗？ 有证据表明，人们对外展示的自我和他们的自我感觉是不同的。是否想起了身边有自谦而不是自夸的例子呢？ “我太笨了”可能会引发身边的朋友安抚说：“你做得很好！” “我多希望我没这么丑”，也会引发“那有什么，我认识不少人，可比你丑得多” 这是「虚伪的谦逊」表现。 有时人们通过设置障碍物来阻挠自己获得成功。例如：“我并没有真的失败——要不是因为这个我肯定能干好。” 自我形象和行为绩效紧密相连时，“全力争取却失败了”要比“因延误时间而有了失败的好借口”更让人泄气。自我妨碍有利于我们把失败归于一些暂时的或外在因素（“我身体难受”；“我昨天晚上熬得太晚了”）而非自己的天赋或能力的匮乏，从而可以保护我们的自尊和公众形象。 作为社会性动物，我们调整自己的言语和行为以适应我们的观众。我们在不同程度上监控自己；我们对自己的表现加以注意，不断调整它以创造一个我们所希望的形象。 3.3 个人思考读到这这里，不禁会想一下我的自我呢？公众号的第一篇文章是我的自我介绍，其实很多的内容我都含蓄的说了出来，与我共事（一起做过事情）我的朋友可能比较了解我，在那篇文章中可能会体会到一些内容。 我是一个特立独行且有较强自尊心不甘失败的异类。 这个问题可以从公众号的名字说起，有部分的朋友在微信跟我聊过，「特立独行」不是约等于「异类」吗？也有点直接说这两个词是近义词。 从字面意思的理解确实是这样，但是如果你愿意查一下词典，你会发现「异类」有不同种类的意思；「特立独行」有独来独往、我行我素的含义。乍眼一看，是一样的。 我对「特立独行」的理解：我不太会迎合大众的乐趣，也很难因为大众喜欢的东西自己就会去做。例如周边很多人都喜欢玩游戏，但是我都会以「我的智商不够」为玩笑话婉拒； 我对「异类」的理解：因为我的「不合群」、我的「太小众」造成了我的现状，这种现状会把我自己从大众划分出来，也就是我自己的「种类」。 没有优越感，也没有自我贬低。只是因为很多「兴趣」确实与大众不符合，生活中也着实尴尬。 你说一个 90 后的人没有喜欢歌曲，没有喜欢的明星（很多人不认识），没有（持续）玩过游戏（偶尔娱乐）有多少呢？？？看起来都很无趣对吧。 关于自尊，不客气的说，我是一个自尊心相对较强的人。如果我的自尊受到了伤害，我会想办法，通过努力挣回来的。对比外在的形象，我更在乎与朋友的交流，会保持与朋友的持续交流，于我而言，在我生活中、工作中，有很多的朋友都给予了我很多的帮助（2019 年深刻感受到了），可以说，没有别人的帮助，很多事情我几乎束手无策。 你也可以通过 「 我是_ 」的来完成句子填空。期待在留言区或者微信看到你句子填空。 – 如果你对阅读、产品、效率等感兴趣的话，可以通过微信下方二维码关注我。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何建立自己的人生护城河？]]></title>
    <url>%2Fposts%2F54261232%2F</url>
    <content type="text"><![CDATA[发现自己的优势，建立自己的人生护城河。 有小伙伴在微信问我，上周没有发文章，这周也不打算发了吗？我：“发呀，为什么不发。” 上周没有发文章虽然有原因，但是结果就是没发，实则是写了的，但是不想(neng)发出来。有很多的内容不太方便公开，就沉默在「印象笔记」中吧。看过我自我介绍的朋友应该知道，我是坚持「每周一本书」的阅读节奏，因为好像我除了认识一些字，也不会做其他的了。 那今天分享本周阅读的一本书：《人生护城河》。 作者这本书的作者，很多的朋友应该或多或少有点了解，他的公众号是：辉哥奇谭； 不太记得我什么时候关注这个公众号了。但是作者给我在工作与生活上的启发很大。 关于写作、阅读、思考、自我成长、生活、投资、开放系统等各个方面都可以在他身上体现的淋漓尽致。 印象最深的是我们需要建立自己的三份收入。 《为什么你需要三份收入？》几乎每个人都需要「三种收入」，本职工作的收入，用来满足基本生活所需；「第二职业」，用来玩，发展兴趣，扩大第二职业的收入，满足自己的精神需求；投资收入，用来使自己免除「老无所养」的烦恼。 三种收入，三足鼎立，缺少任何一个，人生之舟都不那么平稳和轻快。 更多的信息建议大家通过作者公众号、知识星球等途径了解。 为什么要看？首先，我是作者公众号的忠实读者，我了解作者提供的内容是有价值的，这一点是前置信息。这本书是 7 月就上市了，由于我有其他的阅读计划一直没有开始阅读，上周末就在「待读」中看到了，拉出来看看目录介绍。 其次，在阅读目录的时候，我的大脑中只有一个信息：一个人的怎么才能活出自我？你看，这句话的拆解关键词：一个人、怎么才能、活出自我。我就是一个人，用辉哥的话说，每一个人都是一家公司，我们需要有愿景、战略、价值观、商业模式、竞争策略等，这样才能活下去，活得更好。 最后，我找了一下辉哥公众号关于本书的介绍，我再次去阅读的时候触动了，和之前看到推文的时候完全不一样，就开始阅读了。详情参见 执着比聪明重要 —— 《人生护城河》诞生记 这本书写的结构很适合阅读，大多数都是问题，然后如何做都是 1234 的方式，非常适合理解。 有哪些内容？拿到一本书，先看介绍和目录是我阅读的开始。 通过目录，能够 get 到一些信息，然后去想了一下作者可能会写什么？如果是我我能写什么呢？ 例如，通过「人生有限公司」，结合本书的题目和副标题，可以猜到这本书的主要的围绕着个人成长，可能涉及到如何成长？通过「三种收入」，可以想到可能作者会介绍为什么要有三种收入？如何实现三种收入？毕竟这是人生有限公司的商业模式。通过「连接今日与未来」，可以联想到今日就是当下，未来就是公司未来的发展、战略等。 人生有限公司一个人就是一个公司。一个公司就有愿景、战略，有商业模式、竞争策略。一个没有商业模式的公司是很难生存的。 人生商业模式可分为四种：第一，无杠杆卖时间。即单位时间只能卖一次，且只能卖给一个人；第二，有杠杆卖时间。即单位时间可以卖多次，且可以卖给多人，卖出的份数和客户数与杠杆比例相关；第三，花钱买时间，企业家属于此类。第四，花钱买「厉害的人」的时间，价值投资者。 人生商业模式决定了人生终局。 有商业模式就会有竞争，如何避免不必要的竞争呢？ 回归初心。不断的问自己这件事的目的是什么？找到自己定位目标，并持续为之付出。围绕优势。作者认为「知长知短」相比「取长补短」，更能真正的了解自己的优势与不足。着眼长线。长线思维是把我们从竞争泥潭拉出来的利器。着眼于未来，而不要拘泥于当下。 人生定位说到「回到初心」，那如何给自己定位呢？ 找到自己究竟想要什么，对于我来说肯定是很困难的，因为我想要太多了，两只手都数不过来。 辉哥在书中分享了一些方法，将自己想要的东西写下来，不断的探索自己的内心，然后将其变成一套标准，按照标准去选择与自己相处的东西，没有遇到达标的物品时就静静等待，直到合适的物品、合适的机会、合适的人或者合适的工作出现。 不断在生活中提高自己的标准，不断得到自己想要的品质生活和理想工作，最终达成「内心（想要的）—标准—行动—结果」的统一。 知道自己想要什么相对应的是知道自己需要放弃什么。 人生充满了选择，是选择决定了我们一生的道路。而选择同时意味着放弃，选择 A，就意味着放弃 B；选择 B，就意味着放弃 A。 也有人把选择成本称为机会成本，即考虑自己的选择时，不仅要看选择 A 所带来的利弊，也要看因为选择 A 而放弃 B 所导致的成本。 关于放弃的原则只需明确一点，即你最想要什么，为了你最想要的你可以放弃什么。 人生的结果由选择决定，你选择什么、放弃什么，最终决定了你人生的走向和所能达到的高度。 终身思考力 我们在分析优势的时候需要站在客观的角度和对方的角度来想问题。别人如果能在某件事情上想到你，则证明你是「存在的」；如果所有人都能想到你，则证明你是很有优势的；如果在某件事情上，大家不约而同第一个想到你，那么你在这件事情上最有优势。 怎样从正面来定义自己的优势？ 第一是你擅长的（但并非你喜欢的）； 第二是有需求的； 第三是能长期经营的。 我们可以不断往回头看，把自己人生中的点连成线，找到是什么样的事情，总是在人生的“低潮期”带给你力量，带给你转机？从历史的因素找到自己的优势所在。 找到自己的定位，发现自己的优势，利用长线思维，不断去的经营，着眼于未来的 10 年、30 年，甚至一生。 三份收入作者认为一个人应该具有三种收入，分别是：本职工作收入、第二收入（我更愿意将其称为通过兴趣获得的收入）、价值投资。 本职工作是日常生活开销最重要的经济来源；第二收入是与现有本职工作利益无关，而为单独为自己工作，我比较愿意理解为兴趣收入，通过自己的某一个兴趣发展为可持续的为自己创造收入；价值投资本质是基于长线思考预期的结果来确定今日的策，即长线思维。 辉哥关于股票投资分享了自己的经验：（1）找一个有「护城河」的公司。拥有护城河的公司有一个非常明显的标志：有定价权。（2）在合适的价格买入。（3）持有足够长的时间。任何好股票，如果你无法持有3年，那么也很难取得真正的收益。足够长的时间指至少3年，最好是5~10年。（4）投入足够多的钱。这是最后一点，也是最重要的一点。 关于工作的历练与第二收入不展开介绍，有兴趣自己阅读了解。 链接今日与未来去年开始，我有想过 40 岁后的自己会不会有中年危机？会不会焦虑？虽然现在也很焦虑。 立足于现在，去思考未来几十年后的生活，这是长线思维，也是我们最需要的做的一件事。要敢于跳出目前舒适的盒子，在更高层次去努力。 关于「复盘」，辉哥介绍了「如何把每一次意外和跌倒都当成机会」的作用与意义。其中关于 bug 三部曲的部分印象最为深刻。 面对 bug 的三部曲是：（1）如何防止同样的问题再次发生？（2）如何用自动的机制防止这个问题再次发生？（3）如何避免他人犯同样的错误？ 前面我们提到，找到自己的人生定位、然后立足于未来，长期去做，长期做经营。在此过程中，终身学习也是必不可少，这是人生最重要的能力。 安分守己，等着被岁月收割;不安分，则不断收获岁月的财富。人生，就要不安分；人生，必须终身学。 多维人生最后一部分我更愿意理解为这是关于「幸福」的阐述。结合之前的「勇于做少数派」，找到让自己快乐的事情，哪怕看起来是「不务正业」，可是那又如何？ 难道还有什么比快乐更重要吗？没有。（这不是不是鸡汤，更像是是生活态度） 人生可以有两面,人生必须有两面！]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019 年上半年我读了哪些书？]]></title>
    <url>%2Fposts%2F542671234%2F</url>
    <content type="text"><![CDATA[据不完全统计。 认识我的可能知道，我一直保持「每周一本书」的阅读习惯。 今天整理一下上半年的阅读清单（部分），也算是对自己上半年阅读成果的交待。 其实去年制定了「阅读」计划，但是好像每个月的书和当初的计划相差有点「远」。 说明我自己的阅读记录仅适用于我自己，所以想读的话看自己是否需要？ 有很多书并非第一次阅读，所以不要说为什么会看这本书？再问就回到一条。 阅读前找目的，阅读后找实践，每个人方法不同。 虽然「每周一本书」，但是并不是绝对的，具体时间具体安排。 列出来的书也有遗漏，不代表全部，只是部分，因为不能保证我全部记录了。 不要在乎阅读数量的变化，而要在意质量（效果）的提高。 一月《学会提问》（推荐） 《知识大迁移》 《科学学习》 《行为设计学 掌控关键决策》 《一本小小的蓝色逻辑书》 《终身成长》 《看见》 二月《用户思维+》（推荐） 《写给大家看的设计书（第4版）》 《半小时漫画中国史+世界史（共4册）》 《原生家庭》 三月《反脆弱》（推荐） 《需求》 《读书是一辈子的事》 《睡眠革命》 《启示录：打造用户喜爱的产品》 四月《乔布斯传》 《谁说菜鸟不会数据分析》 《小狗钱钱》 《穷爸爸富爸爸》（推荐） 《精益数据分析》 五月《图解网站分析》（未读完） 《文案创作完全手册》 《新媒体数据分析 概念、工具、方法》 《穷查理宝典 芒格最重要的三场演讲》 《一小时买个好房子》（推荐） 《计算广告》（在读） 六月《城里的房子：读懂中国房产财富的逻辑》 《中产阶级如何保护自己的财富》（推荐） 《人人都是网站分析师》 《搞定》 《网站分析实战》（在读） 总结从数量上来看，一共读了应读 32 本，实际完成 30 本阅读。 从计划上来看，远远超过了去年制定的计划，只是每个月的主题发生了变化。 从效果上来看，生活中的「购房」知识比以前更熟悉；工作中的话「数据统计」方面加深了解。 所以，如果一年总分 10 分，上半年可以 3.5 分。 阅读清单梳理完毕。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最近拍的 10 张照片]]></title>
    <url>%2Fposts%2F2311212%2F</url>
    <content type="text"><![CDATA[于 2019 年 4 月采用 iPhone 7Plus 拍摄。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经济机器是怎样运行的]]></title>
    <url>%2Fposts%2F43805%2F</url>
    <content type="text"><![CDATA[「经济机器是怎样运行的」By Ray Dalio 参考笔记：【经济】📊 Ray Dalio经济原理和💹 经济周期视频笔记 提示：播放本视频需要科学上网。B 站可以不用，点击跳转]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>经济</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[尝试解释「反脆弱」]]></title>
    <url>%2Fposts%2F33077%2F</url>
    <content type="text"><![CDATA[受不利影响是脆弱的；能恢复原貌是坚韧的；能从中获得益处的是反脆弱的。 这周不知道为什么原因就突然就看了《反脆弱》，而且阅读进度很慢，截止现在已经看了 46%，但是已经花了 5 小时 32 分钟，实在是遗憾。但还是会坚持本周看完。 在我看来，这本书对于我来说很难理解，有很多的概念我真的不知道怎么阐述和运用，导致进度很慢。开头部分我都来回看了 2 遍。 这本书的作者叫纳西姆•尼古拉斯•塔勒布，乍眼一看，我们互不认识，哈哈哈。没关系，他的另一本书应该就知道了，他的代表作有：《黑天鹅》、《随机漫步的傻瓜》。 就算和我一样也没用没有看过《黑天鹅》，那肯定知道「黑天鹅事件」吧。 黑天鹅事件指非常难以预测，且不寻常的事件，通常会引起市场连锁负面反应甚至颠覆。 一般来说，“黑天鹅”事件是指满足以下三个特点的事件：第一，它具有意外性。第二，它产生重大影响。第三，虽然它具有意外性，但人的本性促使我们在事后为它的发生编造理由，并且或多或少认为它是可解释和可预测的。 言归正传，按照我的理解解释一下「反脆弱」，希望能帮助你理解。 首先，从概念下手，既然说到了「反脆弱」，那什么是「脆弱」呢？ 维基词典对「脆弱」的释义如下： （才力）薄弱，单薄。 （身体）薄弱，孱弱。 （性格）不坚强，软弱。 （物体）不坚固。 （维基不愧是全球网络上最大的最受欢迎的参考工具书，解释一个词都这么严谨。 接着，我们了解一些脆弱的反面（反义词）是什么？同样取自维基百科。 反义词：坚强｜坚韧｜顽强｜强盛｜结实 那，「反脆弱」是不是就是「坚强」等含义的另一种说法呢？ 不是，作者的书名叫《反脆弱》，副标题叫「从不确定性中获益」。 如果我们深究副标题的话，也应该大致明白意思。从副标题我能获得 2 个信息，分别是：不确定性、获益。 不确定性，顾名思义就是随机性，不可预测的，而且这个随机的概率我们没有办法得知。作者在书中也提到过，「预测是现代化的产物」。作者认为风险是无法预测的，有两个原因：领域独立的限制和重大事件的随机性。 注意，新概念出来了，什么是「领域独立」？ 换一句话是不是可以就可以理解这个概念，「井底之蛙」。领域独立指的是人们常根据自己所处的行业、环境、过往经验、知识来判定某一件事。通俗的讲对一件事的判断是仅仅基于自己的认知水平。作者认为领域独立就等于领域偏见。 怎么理解重大事件的随机性也造成了风险不可预测？这个其实很好理解，天灾人祸，谁也没办法预测啊。例如：一座桥的桥墩有严重裂缝，坍塌是早晚的事，但是我们没有办法预测就是哪一辆车、载重多少的车经过时压垮了桥。 获益。获得益处，取得好处。这个理解应该不难。 连起来就是理解「反脆弱」的话，应该是这样的：如果在没有办法预测、随机的环境中，不仅不受其影响，反而还能能够取得好处、获得收益就是反脆弱。相反，如果没有获得好处就不是反脆弱。 受不利影响是脆弱的；能恢复原貌是坚韧的；能从中获得益处的是反脆弱的。 我想塔勒布本人应该也没找到一个比较好的词来解释上面这个概念，所以用了一个「反」字。 《反脆弱》这本书，塔勒布引领我们发现这个世界的三元属性：脆弱、强韧和反脆弱，这三种类型的事物相互交织。 如果我们想更理智地生活，更健全地成长，就要学会识别脆弱和反脆弱，并从反脆弱的事物中汲取知识，塑造自己和目标的反脆弱。 专制是脆弱的，分权是反脆弱的。 负债是脆弱的，冗余是反脆弱的。 复杂是脆弱的，简单是反脆弱的。 迷信科技是脆弱的，博学是反脆弱的。 厌恶波动求稳定是脆弱的，喜好波动不断更新是反脆弱的。 规模大而秩序严格是脆弱的，规模小而灵动柔性是反脆弱的。 强制规定是脆弱的，随机是反脆弱的。 对理论深入研究是脆弱的，自由探索的实践是反脆弱的。 基于条件、模型的概率决策是脆弱的，开放的经验法则是反脆弱的。 当我们能够辨认反脆弱，就可以相应地创建自己的反脆弱能力。 职业选择时，要选择能够有一定自主权的，避免职业的脆弱性。 做财务规划时，要选择积累资本，避免负债，增强财务的反脆弱力。 就医时，若不是重大疾病和紧急伤痛，尽量在医疗上做减法。 在生活中，不要妄图追求稳定，而要在波动中找到发展契机。 做权威或者家长时，不要试图横加干预，也不要过度保护，而要适当放权，让属下犯错，让孩童在挫折中成长。 在组织中，不要试图构建绝对有序的大型组织，而尽量要选择小型的结构，增加灵活和韧性。 当黑天鹅事件突然降临时，试图事前预测是徒劳的，因为风险无法准确预测。我们能做的，是不断扩大反脆弱势力，增强自己的反脆弱力。 在情绪方面，《反脆弱》一书提出的情绪强韧法：在一件事的开始，就怀有已经是最糟糕情形的想法，无论事情如何发展，我们的情绪都能适度平缓，不会崩溃。 在认知方面，不惧怕压力。将压力视作信息和动力，做事时采用试错法，不怕失败和困难，保持自己更新知识和经验的状态，做一个开放胸襟的反脆弱人。 在为人处世方面，要自觉抵御领域依赖，不盲目判断，更不要迷信统计数据和专家的理论断言。要聆听从实践而来的经验，争取更多的选择权。 总之，《反脆弱》给我们最大的启示是：去拥抱未知，拥抱随机。去从逆境中乘风而起，不要自大，不要妄想预测明天，也不要自卑，失败也是有益的机会。 这一点和《学习敏捷 构建高效团队》中第二条敏捷开发的原则类似。即：欣然面对需求变化，即使是在开发后期。敏捷过程利用变化为客户维持竞争优势。 本书值得花时间去读的。（我还没看完，有什么不对的后续完善和纠正]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《一本小小的蓝色逻辑书》]]></title>
    <url>%2Fposts%2F52847%2F</url>
    <content type="text"><![CDATA[50 个法则助你理清思路。 引言苏格拉底曾经幽默而郑重地警告世人，专家的判断也未必可靠，每一个人，无论他位有多高权有多重，或者拥有多少财富，都会有头脑混乱、思路不清，甚至失去理智的时候。 所谓“逻辑推理”，在广义上被定义为“我们评估信息的过程”。要想做出正确的决定，我们首先要占有充分的信息，而要想占有充分的信息，就必须提出正确的问题。 所以那些擅长逻辑推理的人，往往也比较善于提出问题，搜集相关信息，用“正确的”方式对这些信息进行评估。最重要的是，他们可以在不受他人干扰的情况下独立完成这一过程。 第1章 感知和思维模式法则1 所谓选择性感知，就是指人们往往会更加留意那些自己需要或喜欢的信息，而忽视真实的信息。 积极的思考者总是会尽量扩大自己的视野，从不同视角考虑问题，交叉核实自己获取的信息。 人们看世界的基本方式可以分为两种：积极视角和消极视角。 选择性感知我们总是会有选择地去理解一些事情，以此来满足自己的需求。 “光环效应”，就是指人们总是喜欢根据某起单一事件或某个单一特质来积极地看待某个人、某个地点或某个事物。 四种典型思维方式法则2 思维方式可以分为四种类型：分析型、理想型、现实型、综合型。根据实用性和情绪投入性，这些思维方式还可以进一步细分。 第2章 如何进行创意思考从解决问题的角度来说，要想先判定一个问题究竟是不是问题，最好的办法就是重述这个问题。 法则3 创意思考法是一种“后门”思考法。 发散性思维与聚合性思维法则4 聚合性思维让思路集中于一点，发散性思维让思路向四方延展。 聚合性思维会把所有思考都集中到一点。当我们从一个比较窄的视角分析某个问题，或者说集中精力思考一个点时，就是聚合性思维模式； 当我们从一个比较宽的角度审视一个问题，综合考虑各种证据和材料，收集新信息，或者思考多种不同的解决方案时，就是发散性思维模式。 发散性思维会让你脑洞大开，迸发出许多新的创意和想法，而聚合性思维则会让你深度思考某一个细节，直到找到答案。 魔鬼代言人法则5 用魔鬼代言人帮你更客观，思维更开放。 所谓“魔鬼代言人”，就是那些硬抬杠，拼命为相反观点辩护的人。你可以当自己的魔鬼代言人，提出各种反对观点或者对自己不利的证据，从而让你的观点更经得起推敲。 点子杀手和点子孵化器法则6 不敢怀疑显而易见的事，急于评判新点子，害怕自己看上去像个傻瓜——这是三个最要命的点子杀手。 简言之，我们必须克服各种漠然、轻率和不安全感。 Ⅰ 类错误是指那些我们本该拒绝却没有拒绝的错误； Ⅱ 类错误则是那些我们本该说“yes”但却没有说的错误。 Ⅰ 类错误会带来直接损失；而Ⅱ 类错误则会让我们错失良机。 点子杀手法则7 务必牢记“点子杀手”和“点子孵化器”清单。 头脑风暴法则8 头脑风暴的主要规则是，大家提出点子时，数量比质量更重要；新奇的想法要永远受到鼓励和欢迎；等所有人都提出想法之后再评估；鼓励“搭顺风车”。 首先，量比质重要。要让点子从参与者的舌尖上源源不断地流向白板。 其次，要激发大家想出真正的“新点子”，越古怪越好；要让点子自由涌出，千万不要担心自己会被其他人看成傻瓜。所有点子，不管有多古怪或多愚蠢，都应该受到欢迎和鼓励。 再次，要等所有人都说完之后再评估。 最后，在头脑风暴过程中，有人会不可避免地“搭顺风车”, “听到你说这个，我突然想到……”“要是这样的话，那我们不如……”。“搭顺风车”意味着一个人可以在另一个人的思路之上进一步延伸，提出一个更进一步的想法。 重述问题法则9 想想看，这个问题真的是问题吗？试着重新定义眼前的问题。 从现在起，养成一个好习惯，每次遇到问题时，问问自己，能不能换种方式描述眼前的问题呢？ 推销创意法则10 在推销一个新创意时，你所表现出来的信心和热情要比你的逻辑和细节更重要。 首先，把每个人都想象成你的盟友。 然后，认真记录下这些问题，然后想想怎么利用它们完善你的创意。 最后，一定要认真揣摩终极决策者的心理，他们才是你的听众，为了说服他们，你一定要下足功夫。 第3章 如何做决策本章提到的决策工具主要包括“决策树”和“决策矩阵”两类。 决策树可以让你的思考更有层次，决策矩阵则能帮你更好地对信息进行归纳和总结。 绘制决策树就像是在画流程表，它不仅能让你看清自己的思考路线，还能让你看到最终的结果。 决策矩阵则是对信息进行归纳整理。 加权分析也是一种重要的决策方式，它可以帮你更好地评估摆在眼前的各种选项，以及每个选项可能带来的结果。 假设法。当你想要判断一个想法或理论是否符合实际时，假设法是不错的选择。 最后，通过思考囚徒困境，我们对合作与竞争的利弊将会有更多的了解——尤其是它们对个人和群体决策的影响。 法则11 顾名思义，我们只要画个“T”字图，在两侧分别写出某个选项的利与弊即可。 利弊分析的好处在于，它不仅能让我们看到事物的消极面，还能逼迫我们看到事物的积极面。大多数人天生都善于发现问题，而利弊分析则会让我们的视角更平衡。 在进行利弊分析时，如果能够对每个利弊点进行量化，效果会更好。 矩阵分析法法则12 矩阵分析法可以帮你更好地梳理信息，将两个变量进行对比，并梳理出四种可能的结果。 目的是强调要把时间用来处理“重要却不紧急”的事情 要记住，在使用矩阵法进行分析时，一定要确保所有数据“相互独立，完全穷尽”。 表格只是把一些相关信息进行展示或归类，而矩阵中所展示的信息必须是“相互独立，完全穷尽”的。 好的信息要具备以下四个特点——易获取、易总结、相关性、个性化。 决策树法则13 决策树可以用图形的方式列出某个决策可能导向的多种结果。 违约，是指合作双方其中一方违反了双方签订的法律协议； 民事侵权行为通常被用来描述那些导致一方受到伤害的行为； 刑事犯罪则是指针对公众的伤害行为； 违规是指那些不是太正式的、轻微的伤害（比如说违章停车、闯红灯等）； 不法行为则是指那些“轻微的刑事犯罪”（比如说在商店偷东西）； 重罪指“重大刑事犯罪”，其中最典型的当属谋杀罪和叛国罪。 概率树法则14 每一根树枝代表出现这种结果的概率，概率树所有的树枝之和必须等于1（100%）。 加权排序法法则15加权排序法可以帮你通过加权平均值来找到答案。要想计算加权平均值，你需要把每个事件乘以其对应的权重，然后把结果相加。 加权平均值 =（事件1× 权重1）+（事件2× 权重2） 加权平均值可以对目标按照不同标准进行综合排序，最典型的应用是在聘用和提拔决策方面。因为在进行此类决策时，一个人的主观判断往往会产生巨大影响，所以用加权平均值来排序可以让我们的决策更加量化。 效用分析法法则16 效用分析考虑的对象不是具体的金额，而是分析某个结果对我们有多大用处。 效用指的是“我们想要什么”，而概率则是指“我们得到什么”。 期望值（expected value，简称EV）。EV计算公式为：EV=效用（某种结果带给我们的心理满足度）× 出现这种结果的概率 沉没成本法则17 沉没成本不应该影响我们对后续事件的决策。 已经失去的成本已经过去，对于未来的选择应该是基于当前的实际情况出发。 从经济学的角度来说，任何已经发生的成本都不应该影响到你对未来的决策。唯一能影响你未来决策的因素是两种选择的利弊分析。 假设测试法法则18 要想做假设测试，你至少要学会使用一张“双向”表格。 在利用假设测试进行推测时，一定要使用一张“双向”表格，这样你就可以通过两个变量的组合，将可能出现的结果分为四种。 所谓假设，是指“一个有待于证明的结论”。 正常情况下，我们都应该避免排斥正确的假设（Ⅰ类错误），或者避免接受错误的假设（Ⅱ类错误）。 找到对应的解决方案，然后有所预期。 无论做出什么假设，我们都应该问自己：“如果假设正确，那么我们否定这个假设会导致什么结果？如果假设错误，但我们却接受该假设，那又会导致什么结果？” 囚徒困境法则19 囚徒困境完美地说明了为什么合作要比竞争更有利。 囚徒困境很好地说明了一个道理：合作比竞争更合适。当然，由于双方的动机比较复杂，各种变量会同时受到其他变量的影响，并同时发挥作用，所以使得每一方的决策过程都变得复杂起来。毕竟，对于其中任何一方来说，自己的“幸福”不仅取决于自己的决定，还要取决于另一方的选择 第4章 如何进行论述分析在逻辑学中，所谓论述，就是指“一个有论据支撑的观点或陈述”。 论点——指作者或演讲者要表达的主要观点。 论据——包括作者或演讲者为了支持自己的论点而举出的事实、例子、统计数据、调查结果或其他相关信息。 关键假设——作者或演讲者没有说出来的能证明自己观点的想法，即“作者或演讲者认为不言而喻的东西”。或者用一种比喻的说法，关键假设就是“论据和论点之间的黏合剂”。 法则20 论据+关键假设=论点。关键假设的价值在于，它能把论据和论点联结起来。 分析论述法则21 要想驳倒一个人，通常有两种方式：质疑对方的论据，或者攻击对方的论述过程。 五个常见的推理漏洞法则22 人们在推理时最常出现的五个推理漏洞：把橘子跟苹果做比较；以偏概全；对相关的证据视而不见；混淆因果关系；在执行计划时没有提第一个是比较和类比假设漏洞，即把两个虽然不同，但逻辑上却相等的事物进行对比。 第二个是代表性假设漏洞，也就是所谓的“以偏概全”。 第三个是“好证据”假设漏洞。 第四个是因果假设漏洞。当我们错误地做出因果假设，或者在没有证据的情况下就认定一件事会导致另外一件事时，就会犯这种错误。 第五个是实施假设漏洞，当我们没有预料到计划实施过程中可能出现的瓶颈，或者盲目地相信自己的计划会轻而易举地得到落实时，我们就会犯这种错误。 要想弱化对方的类比推理，最好的方法就是：当对方将两件事物进行类比时，我们便找出二者的相同或不同，以此证明对方的类比并不成立。 所谓样本，就是指从一大群人或事物中选出来的一小部分人或事物，以此来代表这一小部分人或事物所属的整个群体的特点。 想真正有代表性，有说服力，你选的样本必须在质和量上都能代表整体。 想在量上代表整体，你选择的样本数量必须足够大——很显然，只选一两件是不够的。 很多人会把高度相关误认为因果关系，但一定要记住，二者之间有着本质的区别。 为什么计划不一定会变成现实呢？主要有四个原因：做计划的人或机构没有动力、欲望或毅力去做这件事。做计划的人或机构缺少必要的技能来执行计划。做计划的人或机构没有机会或经济实力去执行计划。出现了一些意想不到的瓶颈（比如说体力、经济、技术或物流等方面），从而导致计划无法实现。 逻辑推理大练兵**法则23 一定要留意别人“偷换概念”。 法则24 定义文字的方式发生了变化，从而使得人们无法进行有效的比较。 法则25 如果某个论述中提到了某项“调查”，一定要仔细了解该调查的样本是否在量和质上具有足够的代表性。 法则26 代表性假设的基础在于：部分可以代表整体。 法则27 从广义上来讲，当我们想要从部分来判断整体时，我们就是在做代表性假设。 法则28 留意对方是否只选择那些对自己有利的证据，否则我们就会成为“倾向性论据”的牺牲品。 法则29 在判断一句话是否有道理时，一定要留意那些“被忽略的论据”。 法则30 相关不等于因果。 法则31 因果假设认为，因为第二件事发生在第一件事之后，所以第一件事是原因，第二件事是结果。 法则32 在讨论因果关系时，要首先想想二者之间是否还有因果解释。 如果论述认为A是因B是果，你一定要留意是否还有其他原因，比如说C，才是出现B的真正原因。 法则33 有时可能会有两个结果都是源自同一个原因，所以如果有人提出是A导致B，那么你可以想想，是否有其他原因C，同时导致了A和B。 法则34 如果“因为A所以B”成立，那么“因为B所以A”的说法则被称为反向因果，一旦反向因果有可能成立，我们就有理由怀疑“因为A所以B”是否真的成立。 法则35 考虑相反方案——比如说，如果你听有人说“满月会导致犯罪率升高”，那么一定要问问不是满月的时候，犯罪率是多少。 法则36 理论可能与实践脱节。计划不等于行动。千万不要盲目地认为计划就一定会丝毫不差地变成现实。 法则37 “能做”不等于“愿做”。一个人拥有做某件事的能力不代表他会发挥这一能力——可能是故意不发挥，也可能是没想到去发挥。 法则38要想让计划得到有效实施，就一定要事先预料到可能出现的瓶颈。 法则39 提出论断的一方可能会假设另一方很清楚当前的情况。 法则40 虽然我们在寻找某样东西，但并不意味着我们会在找到它时能立刻认出它。很多时候，我们会假设自己能在找到某一事物的同时立刻辨认出它。 法则41 在论述过程中一旦遇到模糊的术语，一定要请对方解释清楚。 第5章 掌握逻辑只要……就……”陈述是因果关系的另一种表达方式。我们可以说“只要A成立，B就成立”，或者可以表示成“只要A→B”。 “只要……就……”陈述句只能单向成立，它不是可逆的。 必要条件是指“目标事件发生一定要具备的条件”，但该条件并不足以导致目标事件发生。充分条件则是“足以让目标事件发生的条件”。 “NSMA”陈述所谓NSMA，是指“no some most all”这四个单词首字母的缩写。 逻辑推理大练兵法则42 一定要注意，“只要……就……”句式是不可逆的。 “只要A成立，B就成立”不能等同于“只要B成立，A就成立”。这在逻辑上被称为“逆命题不成立”。 法则43 “只要A成立，B就成立”的逆否命题“只要B不成立，A就不成立”也是成立的。 法则44 “只要A成立，B就成立”的否命题“一旦A不成立，B就不成立”并不成立。这在逻辑上被称为“否命题不成立”。 法则45 “只要A成立，B就成立”并不意味着只有A是B成立的唯一原因，可能C、D或E也能让B成立。 法则46 必要条件不等于充分条件。 “一个人需要喝水才能保持健康”并不等于他只靠喝水就能保持健康。水是一个人保持健康的必要但不充分条件。 法则47 “只要A成立，B就成立”并不意味着“只有A能让B成立”。 法则48 “每一个A都是B”并不等于“只有A是B”。 打个比方，“每一只猫都是哺乳动物”这句话不应被理解为“只有猫才是哺乳动物”。 法则49 “所有”意味着完全穷尽；“有些”则意味着交叉；“没有”意味着相互独立。 法则50 虽然“有些”式陈述是可逆的，但“大多数”式陈述却未必可逆。 附录Ⅵ 阅读理解解题技巧阅读理解解题技巧 通读文章内容，理清文章主题、范畴和作者创作此文的目的。 先读第一句，然后直接跳到最后一句。 了解文章结构，留意重要的指示词、文中观点的数量以及这些观点之间的关系。 排除那些超出文章范畴、扭曲作者意思或直接反对文章观点的干扰选项。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信消息「引用」功能]]></title>
    <url>%2Fposts%2F31526%2F</url>
    <content type="text"><![CDATA[让「引用」更好用。 起因在微信的日常群聊中，会同时回应对个人或者回答多个问题，如果仅仅是通过 at 的方式很难明显的知道是回复的哪一个话题。 看上图，其实我需要作出回复，如何保证回复的就是对方需要的呢？或者如何让对方一眼就看懂我回复的是什么问题呢？ 答案就是：微信的「引用」功能。 电脑端使用方法 截图演示为 Mac ，Windows 同理。 在对应的消息处「右击-引用消息」。 是不是很简单呢？以此类推，效果如下。 手机端使用方法 截图演示为 iPhone 7Plus，其他iPhone 手机同理。 手机上微信目前没有「引用」功能，需要借助另外一个 App 来配合使用，非常的简单。 前置条件： iPhone 手机 安装了 「捷径」 App 捷径上安装了「微信引用」的捷径 关于捷径 App 的安装和「微信应用」捷径安装此处省略。 将「微信应用」捷径完成后，在捷径中稍微设置一下，在 Widget 可以看到即可。 使用方式演示： 备注捷径 App 安装地址：点击安装 「微信消息引用」捷径安装地址：点击安装]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[行为设计学，掌控关键决策]]></title>
    <url>%2Fposts%2F13665%2F</url>
    <content type="text"><![CDATA[阅读目的：了解决策的基本流程和四个陷阱，掌握 WRAP 决策流程。 0 决策过程的一般步骤 面临选择 分析选项 接受结果 做出选择 1 决策过程的四个陷阱 思维狭隘限制了选择范围 证实倾向使你搜集利己的信息 对未来走势过于自信 短期情绪做出错误判断 2 解决方案2.1 扩宽选择空间1 避免思维狭隘 如何避免 根据目标做选择 考虑机会成本 机会成本：做出某一项选择所放弃的东西 选项消失测试 现有的选项消失会怎么做 原因 选择只有两种吗？ 表明决心式 是否式决定 专注于目前的选择意味着对其他选项视而不见 2 多目标追踪 同时思考一个以上的选择 更容易认识到问题的形状 时刻保持自省且速度快 不极端。多考虑 1-2个 3 借助外脑 内部 找到自己的亮点 外部 竞争分析 标杆分析 最优方法 着眼于远处 利用类比法 2.2将假设放到现实中检验1 克服证实倾向 概念：证实我们初步假设的信息，常为利己主义 组织内部促成建设性的不同意见的形成 问更多的反面问题 通过故意犯错测试自己的假设 训练自己考虑相反的情况 2 缩小和放大 内部意见是我们对自身所在的特定环境的评价 外部意见着重于事情通常如何发展的。更为精确，但大多数倾向于内部意见 若无法找到基本比率，可寻求专家的帮助 为得到更有用的信息，我们可以将外部意见和特写相结合 3 尝试 概念：通过小实验来测试理论 先尝试，在迭代，后决定 能实验就不要猜测，预测未来方面做的总是很糟糕 2.3 留出思考的距离1 战胜短期情绪 在冲动决定前，先暂停一下 瞬时的情绪会诱使我们做出从长远来看是坏决定的选择 留出距离进行判断，克服分心的短期情绪 10—10—10 法则 10 分钟、10 个月、10 年后如何看待此选择 将当前情绪像对未来情绪一样进行充分考虑 认知偏见 曝光效应： 喜欢自己所熟悉的东西 损失厌恶：损失让人痛苦，收益使人愉快 最有力的问题 “如果面临这种情况是我最好的朋友，我会告诉他如何做？” 2 尊重自己的核心重点 令人苦恼的决定常常是核心重点遇到冲突的时候 将核心重点视为行动纲领，解决困境将变得更容易 将时间放下核心重点上，并不断践行 2.4 做好出错的准备1 预防过度自信 对结果进行最佳和最差的预期 对最差的情况我们要事前析误 对最好的结果要事前预演 对无法预见的结果可以以使用安全系数 2 设置一个止损点 习惯性进入「自动驾驶」状态 止损点可以让我们清醒 受困于「自动驾驶」可以考虑最后期限和隔断 提供冒险空间 规定冒险行为的神上限 使精神获得平静 主要目的：需要做出一个选择 3 决策流程的公正性 群体决策的问题：必须被视为公正的决定 判定人们对决定有何感受：程序正义 确保判定过程是公正的：流程是公正的 一个可靠的方法可以帮助我们设法解决最棘手的问题 对一个流程的信任使得我们可以冒更大的险，做更大的决定]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《慕课革命--互联网如何变革教育》]]></title>
    <url>%2Fposts%2F23112%2F</url>
    <content type="text"><![CDATA[书籍来源于@Dean Huo赠送，我用笔记、思考作为回馈 笔记采用问答式进行，筛选和总结我的问题，并在书中寻找答案 全书共五大篇，18章节，约15万字 书籍信息大规模在线教育的慕课革命大幕已经拉开，这是一场基于互联网及移动互联网的教育大变革。本书通过大量国内外的实践案例，告诉读者慕课的发展历史和趋势，中国该如何应对，以及慕课的商业模式有哪些、如何赚钱等。 作者信息汤敏，美国伊利诺伊大学经济系博士。现任国务院参事，友成企业家扶贫基金会常务副理事长。先后担任亚洲开发银行经济发展研究中心经济学家、亚洲开发银行驻中国代表处副代表兼首席经济学家、国务院发展研究中心中国发展研究基金会副秘书长。同时兼任中国人民银行研究生部部务委员会副主席，北京大学中国经济研究中心、武汉大学经济学院兼职教授，北京智石经济研究院院长，“中国经济50人论坛”专家成员。 问题列表 对慕课的定义是什么，它有什么内在特征？ 目前市面上的慕课有哪些？具体的状况怎么样？ 工业又革命了，教育不革命行吗？ 中国慕课教育的背景是什么？主要的突破口在哪儿？ 翻转课堂的慕课能颠覆“你教我学”的课堂模式吗？中国在中小学教育有什么尝试？ 慕课的最大受益者是老师，而最大的受害群体也可能是老师，教师们应该如何应对呢？ 传统教育下，教育不可能公平，而在慕课教育模式下，教育公平是不是会出现希望呢？ 慕课下的高考如何改，慕课下还用高考吗？还需要高考吗？ 免费模式既是互联网精神的体现，也是众多企业的杀手锏。如果慕课全部免费，那么它如何赚钱呢？它能不能赚钱？市场如何？ 慕课到底是一场革命还是一场泡沫？ 政府对慕课的管理边界在哪里？该管什么，不该管什么？ 慕课的未来？ 慕课革命，浩浩荡荡,学生或家长或雇员或老板或官员或平民，怎样才能不错过这场革命呢？ 01. 对慕课的定义是什么，它有什么内在特征？维基百科的定义： 大规模开放在线课堂（课程），又称慕课（英语：Massive Open Online Course/MOOC)，是一种针对于大众人群的在线课堂，人们可以通过网络来学习在线课堂。MOOC是远程教育的最新发展，它是一种通过开放教育资源形式而发展来的。 慕课：MOOC,有四个字母，含义如下： M: Massive(大规模)。表明学习人数至多，可能8万人，可能10万不等；O: Open(开放的)。表明学习的对象不受约束，无论是谁都可以参加学习；O: Online(在线)。表明学习方式在线上，可以不受时间、空间等限制；C: Course(课程)。 总结一句话：「 慕课是以网络化学习的开放教育为基础 」。 综合其概念我们可以延伸和总结一下慕课的特点： 知识点，短视频。 随堂考试，满10分过关。 兵评兵，机评兵。 虚拟课堂，规模PK。 大数据分析，小数据跟踪。 从根本上来说，以互联网为平台的慕课，可以实现多对多的“众人可以同时发言、倾听和回应”的功能。从根本上说能打破传统课堂的“一对多”的局限性，能过实现大范围的探究式、讨论式、参与式的学习方式。 02. 目前市面上的慕课有哪些？具体的状况怎么样？慕课三巨头：edX、Coursera和Udacity; edX 哈佛和麻省理工学院合办的非营利性的网络课程开源技术平台。该平台的不仅将网络课程资源免费提供给注册学员，同时也为参加联盟校方成员提供教育学的研究工具和数据。其主要目标是为在线学生建立一个全球性的课堂，扩大高校同盟体影响力。同时，它还探讨如何用技术改变校园学习和在线学习。2013年5约，edX宣布又有15所高校加入，其中有清华大学、北京大学等6所亚洲高校。 Coursera 截止2014年7月，其平台聚集了来自普林斯顿大学、哈佛大学等上百所大学的课堂。2013年7月上海交通大学成为中国第一个加入的高校。未来Coursera网络教育计划将于更多的大学合作，提供更多样性的课程。 Udacity 成立时间最早的慕课平台。主要是以计算机为主，数量不多，但十分精致。同时还有学习管理系统、论坛和社交元素。 据统计，目前世界上已经出现32个(数据来源未知)慕课平台，当然数据还在增加。例如Stanford Online、NovoED,FutureLearn、Open2Study、Lversity、Ewant、FUM等。中国也有自己的慕课平台，例如学堂在线、果壳网MOOC学院、果实网、慕课网等。2013年被称为中国慕课元年。 03. 工业又革命了，教育不革命行吗？中国分别失去了18世纪晚期的第一次工业革命和1913年的第二次工业革命。第一次主要是当时的中国处于康乾盛世，GDP稳居世界第一，闭关锁国的中国没有赶上第一次工业革命；第二次主要是整个正在推翻晚清统治，军阀混乱，导致落后的中国上百年都在挨打。 与新工业革命眼小呼应，一场新的教育革命-慕课革命也在不断逼近。 新的工业革命需要大量的创新型人才，而目前以应试为主的教育方式不能适应这样的需求。标准化的教育方式制造了大生产时代的可用人才，从根本上来说，这种教育就是为流水线培养工人、培养工程师的。现在的问题是如何才能创造出一批能过适应第三次工业革命的有全新机制的教育机构呢？如何利用最新的机制和技术手段、以更大规模、更低成本、更新的模式、更快的速度为更多的年轻人创造出更好的教育环境呢？ 慕课革命正式顺应这些需求应运而生的。慕课的特点是无论是谁，无论在什么时间或者什么地点都能学到任何的知识技能。有了慕课，学生的学习才真正的有了选择，学习才能真正的成为个性化的事，能做到因材施教，当慕课充分发展后，就能做到让每个学习者根据自己的兴趣、程度等实际情况来学习自己感兴趣的知识和技能。 关注这些最新的变化，关注并参与这场最新的工业革命和教育革命，是我们国家未来能够在世界竞争中获得领先地位的根本保证！ 04. 中国慕课教育的背景是什么？主要的突破口在哪儿？大学生的就业问题一直是中国社会一大问题，每年秋季毕业时，总有上百万的大学生找不到工作。一般来说，大学生就业难的问题，很多人归结为「扩招」导致的。大学生就业难是因为我国的大学教育和市场需求不太吻合，中国经济正在发生着一日千里的变化，但学校总的来说还是以“精英教育”培养学者，企业找不到满意的学生，主要是来自于大学生缺乏企业的所需要的技术技能，因为他们为人处事、解决问题的能力不行。 综上，我国的慕课教育主要突破口是职业教育，传统模式不能保证质量，所以慕课能解决绝大多数问题。慕课可以解决职教师资不足的问题。 现有的职业教育高校可以把自己学校比较优秀的课程制作成慕课挂在网上，同时大中行企业可以把它们适合职业高校使用的培养员工的优秀课程制成慕课，让高职学生学习。于此同时，企业还可以找优秀的工程师等进行线上答疑、讨论等。这样做能够保证企业找到自己需要的员工，学生能学到实际的技能。最后，为了保证教学质量，国家剋组织各方面专家，成立慕课审查委员会，专门负责慕课教育管理和教学质量把控等工作。 所以，中国慕课应该以职教优先。 05. 翻转课堂的慕课能颠覆“你教我学”的课堂模式吗？中国在中小学教育有什么尝试？翻转课堂是将课堂的教学方式反过来，从在学校上课变成在家里上课；在家里做作业，变成在学校做作业；由老师讲课变成让学生讲课。这样的教学方式最初来自美国。翻转课堂其实就是慕课模式的一部分。翻转课堂强调线上与线下的结合，即“O2O”的方式。学生可以看到自己老师的课程，也能看到全国升值世界其他老师课程。老师可以通过计算机才知道每个学生学习进度以及完成作业的情况，保持和孩子们的沟通。 中国式的慕课尝试有直接将课程带到教育最薄弱的贫困乡村学校去。或称之为双师教学，即：通过互联网，把城市优质的教学资源送到贫困地区的乡村学校中去。每个乡村试验班有两个老师，一个人大附中远程授课教师，另一位是乡村的现场教学老师。各司其职，互相配合。其面临的最大跳转就是优质的教育资源一般是为优秀的学生提供的，而双师教学的另一端确是程度较差的学生。这不仅是中国双师教育的问题，同样也是全世界慕课教育面临的问题。 中国在中小学教育尝试有：常青义教、千千树幼儿园、村小的婚龄教学等。 06. 慕课的最大受益者是老师，而最大的受害群体也可能是老师，教师们应该如何应对呢？慕课的大规模推广，会不会导致大量的老师失业？从世界上其他发展慕课的经验来看，慕课与翻转课堂对老师的要求更高。老师不仅要负责线上的课程，还需要在线下和学生进行辅导，对于中小学教育更需要线上的讲课与线下的翻转课堂相结合。 毋庸置疑，慕课将会颠覆传统的教学方法，改变很多教师的工作方式。未来的教室更像一个导师，从以“教”为主，变成以“导”为主。同时，当慕课普及到一定的程度来说，也需要对老师进行一些培训，以适应慕课的新教学方法。会讲课不一定会指导学生讨论，不一定会辅导。最后，对于滥竽充数、混日子的老师来说，在慕课革命下就可能会被淘汰。 推动慕课发展的主要因素主要有：具有战略眼光的校长们，学校的老师，风险投资者，学习者，企业家群体等。 07. 传统教育下，教育不可能公平，而在慕课教育模式下，教育公平是不是会出现希望呢？教育公平分为三个层次：第一，受教育的机会公平；第二，受教育的质量公平；第三，使受教育的效果公平。即：“有学上，上好学，上学好”。影响教育公平分为软件和硬件。对于硬件来说，只要国家加大投入，提高学校的基础设施建设水平，有可能达到公平。软件方面在传统的教育模式下几乎不可能达到公平。但是慕课的出现，能过让教育公平的第二层次有了视线的希望。通过网络方式，优质的教育资源和师资团队，人人可享。 08. 慕课下的高考如何改，慕课下还用高考吗？还需要高考吗？高考的改革，对于正在蓄势待发的慕课来说是“生正时”。改变就有机会，大改变就有大机会。慕课以它的网络化、规模化的优势，能把优质的教育资源大众化，能使稀缺的教育资源普及化，而这切又能以很低的成本来实现。 总之高考改革给学生提供了一个新的学习与发展机会。为落实高考改革，需要更多地使用慕课这个新模式。高考改革给了慕课巨大的发展空间。而有了慕课的保驾护航，高考改革就可以更公平、更公正，真正地达到改革的目的。 当大量企业把他们的内训课慕课化后，当学生在四年里主要上的是企业提供的慕课时；当申请企业的工作岗位的前提条件是要考过该企业提供的慕课，参加过企业的实习时；是哪个学校毕业的还有那么重要吗？同样，高考的作用也会大大减弱。再想更远一点的未来，学生在中小学中学习、活动都数据化了用大数据分析，就可以了解到这个学生的优缺点、兴趣、发展潜力等，大学可以根据这些数据来挑选自己希望培养的学生。当然，这里还有一个条件是社会的诚信要大大地提高，走后门的现象大体上能够杜绝。那时，一个根本就不用高考的日子就会到来。 09. 免费模式既是互联网精神的体现，也是众多企业的杀手锏。如果慕课全部免费，那么它如何赚钱呢？它能不能赚钱？市场如何？到目前为止，包括中国在内的全世界范围内的慕课基本上是免费的，他们的理念是：“任何人、在任何时间、任何地方能学到任何知识。”对于广大学子来说，特别是对那些靠助学贷款上学的贫困家庭来说，这无疑是一个大福音。近二三十年来，全世界的大学学费都在涨。我国也从上大学免费到收取部分学费。 能听到全国甚至全世界最好的课，还是免费的，世界上真有这么好的事情吗？慕课的老师都是一流的教授，慕课的拍摄费用，按哈佛与麻省理工学院成立的edX公司的估算，一门课就要25万美金。再加上网络维护、上课学生答疑、学分管理等，花费绝对不菲。 互联网时代，就是一个免费的时代，是一个第三方付费的时代，因此慕课免费也并不奇怪。有一本叫《免费》的畅销书就点出了互联网免费的秘密。从理论上看，在互联网时代，买卖双方信息不对称将慢慢地成为历史。在信息高度平等、透明的时代，企业很难再依靠操作市场价格来赢利。所以，通过免费迅速扩大用户规模，做出好产品，就能扩大市场份额，这才是互联网企业赚钱的好方法。 套用《免费》使用的概念，在教育领域可以有四种免费模式。 1、交叉补贴型，用免费吸引客户购买其他商品；2、第三方付费，通过免费服务或者产品聚集大量的客户，由广告商付费；3、免费加收费模式；4、可以获得其他的“收入”，例如声誉、表达观点、分享快乐或者纯粹的兴趣。 除此之外，还有其他的模式。例如，类似猎头公司的收费模式和O2O模式（即线上与线下相结合的模式）。 最近，网易教育联合有道发起制作的《 2013 中国在线教育新趋势调查报告》揭示：七成白领都有在线教育需求。 中国互联网的三巨头，阿里、百度、腾讯，纷纷淌进慕课这池浑水中。按清科研究中心的估计，2012年中国网络教育规模已经突破了700亿元人民币。《2013中国在线教育新趋势调查报告》也揭示，在线教育年增长率超过线下教育14倍，预计2015年在线教育产业规模将达到1600亿元，占整体市场的40％。 据统计，仅仅在 2013 年前 8 个月，国内就有 23 家在线教育企业获得几十万到几千万美元不等的融资，比如猿题库获 700 万美元融资，沪江网获 2000 万美元融资等。 10. 慕课到底是一场革命还是一场泡沫？2012年是慕课元年，而2013年就被称为“反慕课元年”。 主要原因有： 1、就业市场上的折戟沉沙。慕课最吸引人的地方就是提高学员的职场竞争力，而最后的结果是通过推荐886名学生中最终只有3名获得了面试机会。原因很简单，公司的人力资源部门更喜欢有传统大学经历的候选人，而在慕课学习且通过考试的学员怎么保证学习或者考试没有作弊的行为呢？会不会有他人代替考试呢？所以慕课的成绩不能代表并证明其学员的实际应用能力。 2、教授们的质疑。公立学校办学经费吃紧，相比于雇用教员上课，使用慕课可以为学校省下更多的钱。他们忧虑的是，越来越多地使用慕课最终会导致学校当局减少雇用教授的数量。慕课有可能改变整个教育的格局。慕课的兴起，是名校、名师和名课对普通的学校、教师以及课程的冲击。未来的教师应该如何定位？未来的学校应该如何定位？当教育的主体 —— 教师对慕课都产生了怀疑、恐惧、抵制时，慕课还能推动下去吗？ 3、慕课的软肋：完成率低。当前慕课的最大软肋之一是学习的学生完成率低。以斯坦福大学的Udacity公司开的课为例，目前仅有5%至16%的完成率，通过率更低。因此有人得出结论，慕课不可能是传统教育的有效替代品。果壳网在2013年10月对慕课中文用户做了问卷调研，调查发现，在国内用户中，有43%选择了2~3门慕课课程学习，29%选择1门课程，25%选择4~10门；但67%的用户一门课程都没完成，16%所选课程完成了不到一半；只有6%的用户完成了全部所选课程。在“阻挠完成慕课课程的原因”一项中，可以投入的时间有限、缺乏毅力和语言障碍分别列前三位，占比59%、55%和55%。 4、对慕课教学方法的质疑。慕课发展潜在的受损者——教师们对它有所保留，这可以理解，但慕课不受它的最大受益者——学生——的喜爱就有点令人费解了。尼尔森的《中国在线教育调查报告》显示，我国的在线教育用户中只有不到一成的用户表示“非常满意”，有48%的认为无法和老师互动交流答疑，39%的认为没有课堂气氛。这些都成为在线教育课程最突出的问题。而且，在线教育需要学生有较强的自主学习能力，而这正是中国学生所普遍缺乏的。 慕课教学上的特点之一就是用了很多网络游戏的技术，让学习者能快乐地学习，在玩中学习。对这一问题，也有持不同意见的人，他们认为网络游戏能够吸引玩家就是利用了人性的弱点。而对于学习来说，它其实恰恰与游戏的设计理念背道而驰。将教育与网络游戏对比，会发现至少有两大不同。第一，目的性不同。游戏的目的是放松。但学习绝对不会是一件轻松的事情。第二是成就感。什么是成就感？说白了就是快感。而学习知识呢？都是要通过努力和汗水去获得知识，快感很难形成。几千年来，人们一直在摸索如何让学习变得更加有趣，但是效果不佳。让学习游戏化，就能轻松搞定知识的学习？恐怕没有那么容易。 对慕课的质疑，还可以找到很多很多。慕课的兴起毕竟只有几年的时间，它还是一个新生儿。任何新事物从出现到完善都要经历一个过程。斯坦福大学校长约翰·亨尼斯的看法可以代表大多数人对慕课的态度，他说：“我不能确切地告诉你慕课会如何变革教育，我的目标是自己参与进去，而不仅是静观其变。” 11. 政府对慕课的管理边界在哪里？该管什么，不该管什么？慕课所涉及的领域，都是在政府深度参与和主导的教育领域。现在从幼儿园、九年义务教育、高中阶段、大学、研究院、职业培训到终生教育，都有慕课的身影，都存在着慕课发展的巨大空间。可是这些领域又是意识形态、宣传教育、公共财政的重要领域，影响到社会的方方面面，政府的参与和主导是不可避免的。 中国政府不断提升对用信息化手段实现教育公平及资源共享的重视。在十八届三中全会的决议中，专门为慕课在中国的发展留出了一段话：“构建利用信息化手段扩大优质教育资源覆盖面的有效机制，逐步缩小区域、城乡、校际差距。” 法律法规没有规定不能做的，都可以去做。政府可以监管，但要依法监管。法规没有规定要管的，就不能随心所欲地去管。这跟过去的正面清单管理的思路有了巨大的进步。同时监管应该是双向的，要有容忍度，要有开放的心态，要用允许创新，允许一定程度的失败的态度来监管这些新的领域。 正面清单的思路就是:政府没有批准的都不可以做。 政府该干什么？ 1、做好顶层设计。有关主管部门应当提前考虑在我国发展慕课的战略问题，尽快出台推进慕课发展的指导思想、框架原则。政府推动慕课发展的重点，应该放在根据我国的国情，解决国家与企业发展最急需、市场又解决不了的问题上。 2、应该允许试验，鼓励试验。慕课是一个新生事物，需要摸着石头过河，不断地试错。在教育领域有很多清规戒律，管得很严，要试验也要这个批那个批的。有关部门应该鼓励试验，特别是跨界的试验。创新往往都是跨界的，应该允许非教育界的机构与人参与小规模的教育试验。 3、组织对各种试验的评估。在慕课中哪些做得好，哪些做得不好，值不值得推广，这些都需要借鉴评估的结果。这些评估最好是由有关部门邀请第三方独立进行，一定要避免利益冲突。有可能的情况下，最好有两个以上的评估独立进行。 4、关注农村，关注贫困地区，关注弱势群体。让市场的力量自然地推动下去，慕课一定是先走高大上的路，好学校优先、一线城市优先、优秀学生优先。 5、提供一定的资源。如果完全由市场的方式进行，那么慕课只会在锦上添花的领域中发展，在那些有商业价值、有赚钱机会的领域进行。政府的政策与资源就应该来弥补市场的不足，支持和引导一部分的试验在这些领域进行。政府可以通过服务外包的方式，引导一部分的社会机构参与慕课试验。 6、要开始逐渐建立一些规则，推动慕课方式在较大范围推广。教育部可以考虑在适当的时候出台一条规定，让选慕课的学生可得到学校的学分。为保证教育质量，教育部可组织数个专家审查委员会，对已经挂在网上的慕课的教学内容、教学质量、测验考试的水平进行认证。经过认证的课程可以在我国任何一所大学中给予学分。同一门课学生有权选择上慕课，也可以选本校老师开的课。 7、加快基础设施建设。开展慕课的最基本要求就是学校要接上宽带互联网。数字鸿沟问题现在已经成为国际上反贫困领域非常关注的一个问题，推广电子书包才能从根本上解决贫困地区与贫困学生的数字鸿沟问题。 8、要保护竞争。慕课正在挑起一场新的教育革命。不排除有一些人担心自己的工作机会被替代，习惯于传统教学方式的一些老师对这些新的教学方式有抵触情绪。政府应该鼓励有创新能力的学校与老师去创新。要保护竞争，防止一些人用行政手段、用手中的权力来阻止新的教学方法的进入。 政府不该干什么？ 1、不该过早地大规模推广，甚至强行推广慕课。应该让市场慢慢地形成，要大胆大量试验，小心谨慎推广。 2、不要过早地定出过多与过细的规则。因为我们对慕课教育还有一个逐步认识的过程。过早地制定出过多过细的规则，会扼杀很多创新。这个领域变化特别快，很多问题我们现在实际上还看不清楚。因此，如果一定要有一些规则，这些规则也应该粗放一些，可定可不定的规则，先不忙定。 3、尽可能减少一刀切式的政策。通过各地的试验与竞争，自下而上地慢慢形成一些全国统一的规则。有些地方的特殊规则就应该长期存在。根据地域、教育条件等因素因地制宜，实事求是。 12. 慕课的未来？未来的学生既是课程的消费者，也是课程创造的参与者。他们可以根据自己情况选择性学习。 未来在线学习的五大新趋势：吸引力；就业优先；不差钱；何种专业最火？ 未来的教师不断从“教书匠”向高水平“导师、教练”提升、跨越，会产生一种全新的师生关系。 未来的课程都应围绕学生的需求展开，学生自由选择课程，并为自己的学习负责。 未来的学校，慕课不但会印象大学的教育生态系统，也会颠覆大学教学管理体制。 13. 慕课革命，浩浩荡荡,学生或家长或雇员或老板或官员或平民，怎样才能不错过这场革命呢？ 革命：“革命指推动事物发生根本变革，引起事物从旧质变为新质的飞跃。” 政府 对于政府来说，首先是要做好顶层设计。有关主管部门应当提前考虑我国慕课的发展战略问题，尽快出台推进慕课发展的指导思想、框架原则。政府推动慕课发展重点，不应该是锦上添花，而是雪中送炭，根据我国的国情，以解决国家发展最急需的，市场又解决不了的问题为主。 其他的那些教育领域，如一流大学的慕课平台、白领的再培训，个性化的职业培训是市场机制可解决的，应该鼓励商业机构用市场机制去解决，或者通过用政府服务外包的模式，让民间机构参与解决。 政府要做的还应该包括尽快制定慕课质量认证、跨校学分互认、学位挂钩等规则。慕课是一个新生事物，应该允许民间试验，鼓励试验，保护竞争。当前，可以考虑让每个大学生一年选一门慕课并取得学分，让学校与学生逐渐熟悉慕课的学习方式。 政府还应该提供发展慕课所需的各种基础设施，尽快让所有的学校，特别是乡村学校、乡村的教学点接上宽带互联网。在试点的基础上，优先考虑让贫困地区学校使用电子书包，尽早改变他们那里的教学模式，大幅度提高贫困地区的教育质量。 校长、教师们 对于在教学第一线的校长、教师们来说，慕课革命下的关键是要转变角色。他们要从一个“教书匠”向高水平“导师、教练”的角色提升，变成一个学生学习的帮助者、知识资源的提供者。这对已经习惯了传统教育方式的老师们来说，冲击是颠覆性的！教师的任务不再是满堂灌地传递知识，而是指导学生如何获取信息，解决学习过程中的问题。教学将从教师个人的工作转化为运用信息技术来支持团队的形成。以教师为中心的教学模式将转化成以学生为主体，教学资源与活动都围绕学生来优化配置。 学生 对于慕课革命的最大受益者学生来说，他们要把自己培养成为知识的探究者和学习建构的主体。他们既是慕课课程的消费者，也是课程创造的参与者。学生在虚拟社区中结成学习伙伴，在自己选择的学习环境中学习。有了慕课，学生才真正有了选择，学习才真正成为个性化的事。每个学习者能根据自己的兴趣、自己的程度、自己熟悉的语言、自己的学习速度来学习自己感兴趣的知识。未来的教育不是把传统的课堂搬到网上，加强应试教育，而是让新技术解放学习者本来就有的能力和天分。 企业家 对于企业家来说，慕课将是一个新市场、新产业、新机遇。从幼儿园到大学，从普通教育到职业教育，从基础教育到终身教育，这是一个有10亿以上人群的巨大市场，是一个变化极快、潜力极大、陷阱也极深的新领域，让企业家有无限的想象空间。预计到2015年，仅中国在线教育市场规模就高达1600亿。但慕课又处于早期发展阶段，各方都在互相磨合中，颠覆性产品尚未真正出现，需要不断地创新，需要大量的跨界整合。这又是一个关系到国家发展、民族命运的重要战略领域，在很多问题上国家不得不慎重，不得不干预，社会也有一个磨合的过程。有志要在这一领域弄潮的企业家，要有长期投入的准备。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用「微信读书」管理公众号的些许经验]]></title>
    <url>%2Fposts%2F26375%2F</url>
    <content type="text"><![CDATA[一些意想不到的技巧分享。 及时推送更新公众号的文章可以直接在微信打开并直接将该公众号直接加入微信读书书架，后期会第一时间收到该公众号文章更新推送（无论是否在微信中取关其公众号）。 更好的阅读体验在微信读书中可以将该公众号对应的历史文章采用目录的方式进行阅读，而且可以「写想法」、「划横线」等，在「我—笔记」中能够查看对应公众号的笔记内容。 导出笔记更方便微信读书支持导出对应书籍/公众号的笔记，可以根据自己需要进行选择；如果有导出 Markdown 的需求可以用捷径实现，也很方便。 减少公众号关注数随着使用微信的时间越长，关注的公众号越来越多，如果将其加入书架后是可以再取关一波公众号（断舍离）。 内容更加系统化公众号中有很多特别优秀的文章，有时候阅读后想再看看可以放在收藏或者稍后读中，但是都没有微信读书用起来成系统。 公众号阅读历史在微信读公众号没有阅读记录，我有时候会想不起某一个段落在哪个公众号或者哪篇文章，通过微信读书可以根据阅读时间记录阅读历史，如果未来微信读书搜索的功能会更方便。 语音朗读文章不方便阅读的时候可以尝试声音输入。 也存在一些不足，例如笔记不能搜索、公众号内容不能搜索、阅读历史不能搜索等，已经反馈给官方。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>微信</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《把时间当作朋友--升级你的操作系统》]]></title>
    <url>%2Fposts%2F60177%2F</url>
    <content type="text"><![CDATA[每个人都有困境 但不是每个人都会思考 如何思考？如何应用？ 第0章 困境缘起一般我们经常说的是就是“没有时间”。真的没有时间吗？ 慌乱于是我们开始着急，开始慌乱。 解决一个不争的事实：时间是不可被管理的。于是，我们开始反思自己，一切的问题都在自己身上。这一切都需要积累，只有积累到达足够的境界，时间就是我们的朋友，否则就是敌人。人是由概念和方法论组成的。一切靠学识决定，与其花时间管理时间，不如花时间提高自我解决问题的效率。 第1章 醒悟大脑我们竟然可以用自己的大脑控制自己的大脑。你的大脑并不是你，你的大脑是（属于）“你的”大脑，运用心智获得解放，不再让自己“跟着感觉走”，成为大脑的奴隶，而是翻身做大脑的主人。 心智一个人的心智就是器过往获得的一切知识以及经验的总和。其中包括基于这些知识和经验造就的思考方式、思考模式。心智，上不封顶下无保底，一旦打开，就可能因为学习而像病毒一样疯狂发展，与此同时，学习能力相应大幅度增长。 第2章 现实速成绝无可能期望速成有两个主要原因：第一个是希望自己的欲望马上得到满足；第二个是不懂“有些阶级是无法跨越的”。 交换才是硬道理“我要”的欲望可以用“我有”的东西来满足。如果行李是必须的，那么背动行李的唯一办法不是减负，而是让自己变强。 完美用不存在人人都希翼完美，只可惜，完美并不存在。越是能力差的人，越有那种非常不现实又极其脆弱的完美主义倾向。生活本来就不完美，谁的生活不是磕磕绊绊？谁又在死去的时候没有一丝遗憾？现实如此只能接受。 未知永远存在未知因素给人们带来的心理压力远远超出一般人的想象。首先我们要承认自己不可能全知全晓。其次，对于未知我们要分为两种，一种是永远不能解决的，一种是可预见的未来可以解决。当遇到解决不了的问题时候，我们可以先记下来，然后继续前行。 现状无法马上摆脱人们往往会低估环境的巨大力量。尽管天分很重要，但一个人的能力主要靠积累获得。心怀梦想的时间越长，它沉没的成本就越高。接受现状最优的策略是有什么做什么，有什么用什么，做什么都做好，用什么都用好。 与时间做朋友与时间做朋友方法很简单：用正确的方法做正确的事。几乎一切愚蠢的行为都来自于否定现实、逃避现实。只有接受现实，才能脚踏实地，避免心浮气躁，好高骛远。时间是现实的人的朋友，是不现实的人的敌人。时间不是故意这么做的，只不过事实就是如此。 第3章 管理估算时间错误估算任务所需时间是最常见，也是最致命的错误。要想提高估算时间的能力，就要从现在开始养成习惯：做任何事情之前先判断其熟悉程度（陌生程度），再据此判断估算完成任务所需要的时间。 及时行动拖延的主要原因是，首先很多人做事拖延就是“不求有功，但求无过”心态在作祟。只要做事，就一定会出问题。这是现实。其次就是过分在乎外界的评价。如果我们明白了这是现实，就要把这种认识纳入自己的心智，就不会对“最后期限”产生幻觉。所以唯一的策略就是：现在就开始。 直面困难就算没有低估完成任务所需要的时间，就算已经迅速开始执行任务，很多人还是没办法及时完成任务。这类效率低下的原因：回避困难。所有真正踏实做事的人都知道，任何任务的绝大部分都是枯燥而无趣的，所谓有创意的部分，可能连1%都不到。 关注步骤任何事情有三个方面：内容、原因、方法；任何任务有三个属性：何事、何因、何法；在做任何事情之前，通过关注“方法”去反复拆分任务，最终确认每个子任务都是可以完成的，这是一个人不可或缺的功课。这样的习惯会让一个人变得现实、踏实。 并行串行提高效率指的是：原本只能串行的完成的两个任务现在可以并行完成。一些早期的计算机是单任务操作系统，为了提高效率现在有多任务操作系统。很直接的体现就是：DOS是没有办法理解Unix的。让自己拥有“多任务操作系统”方法：可以将大任务分成足够多又不太多的小任务；划分自己的时间。 感知时间可以尝试通过“事件日志”纪录时间。除了自己亲身经历事件一概不记，尽量不记感受，不记感想，只记录事件本身。柳比歇夫的日志是：事件−时间日志。李敖的日志是只记录事件名称，是一种基于结果的纪录。两者差别在于：基于过程的纪录要比基于结果的纪录更为详细。基于过程的纪录有一个更大的好处，结果不好的时候可以更容易找到原由。管理时间基本不可能，那么解决办法是想尽一切办法真正了解自己，真正了解时间，精确感知时间，而后再想尽一切办法使自己以及自己行为和时间合拍，也就是“与时间做朋友”。 列表列表从来都是最有效的组织工具之一。最方便的列表工具是纸和笔。列表也没有必要工整，只要我们自己能看懂就够了。列表一定要随手可及。最重要的任务只有一个。判断一件事情是否真的重要，标准只有一个：是否对目标（无论是长期还是短期）的实现有益。制作专门的下一阶段任务列表。如果有什么新鲜主意不要放弃，只需要启用另一个列表（下一阶段的任务列表），把他们记录下来，然后马上回到当前的任务列表，专注于现在应该完成的任务上。给每个任务制定一个核对列表。列表一旦开始运作，就一定要执行到底。 流程要想加快执行重复性任务的速度，只需在遇到重复性任务时先将其做完一次，然后马上总结、整理，搞清流程，再进一步实践把它变成“闭着眼睛也能做好”的事。这是提高效率、减少失误的根本手段。 预演做任何事情之前，尝试把将要做的事情整个过程在脑子里预演一遍甚至数遍。只有经过大量的预演或者练习，才能够在实际执行任务的过程中有出色的表现。 验收很多人做事半途而废、不了了之的根本原因在于从未想过要给自己执行 任务时的表现设计一个验收机制。最基本的验收机制是针对最终结果的，部 分有经验的人因为在做事之前总是更关注步骤，并会按照需求将任务拆分成 若干子任务，所以，他们甚至会为每一个步骤设计相应的验收机制。 从更高的层面上说，设计验收机制也是任何一个领导者必须拥有的基本能力。哪怕你领导的只是一个很小的团队，你也必然要向团队成员指派各种各样的任务。在这种情况下，如果你没有设计验收机制，最终的结果肯定会让你非常失望，因为缺少验收机制会使团队成员对自己的工作质量毫不介意， 长此以往，团队的执行力将等于零，作为困队领导者的你也必须承担失败的责任。 第4章 学习学习是投资回报率最高的行为每掌握一项新的技能，就感觉自己像重生了一样。学习最关键的一点：任何知识的获取，都是不可逆的。学习的重要起点是：起码学会一种技能。总之，千万不要拒绝学习。 基本途径获取更多知识几乎是我们开拓自身心智的唯一手段。所有人过去知识最基础的手段就是“体验”。比体验更高级的获取知识的手段是“试错”。比较聪明且重要得多的获取知识的手段是“观察”。但是“体验”、“试错”、“观察”都有局限。原因：首先大量的知识无法通过个人亲身“体验”获得。其次有些知识很难通过“试错”获得。所以对此三者进行补充，那就是“阅读”。阅读是人们获取知识更加重要的手段。阅读突破了个人“体验”或“试错”的局限——“体验”和“试错”都只能通过自己，然而通过阅读可以获得别人的体验和试错结果。 主要手段准确的说：正确的思考，才是获得真正意义上的知识的主要手段。思考、求知的过程，某种意义上就是探求因果关系的过程。开启心智、正确思考更值得我们投入时间和精力。 经验局限学习过程最大的障碍就是经验主义。个体经验的局限案例：强光喷嚏反射。群体经验局限在于人类寿命有限。不仅存在无法通过个体或者群体经验获得的知识，还存在与现有经验相悖的知识。 自学能力自学能力的基础就是阅读理解能力。检索能力建立在相当熟练的阅读理解能力基础之上。写作能力在自学能力中占据重要位置。实践能力是自学能力最终转化为真正价值的根本。要永远保持开放的心态。 在频繁失望甚至绝望的情况下居然坚持了那么久，最后我们会发现，原来我们是这么地有毅力啊！ 第5章 思考相关命题有70%以上的人分不清原命题和逆命题之间的区别。每天有无数人因为分不清原命题和逆命题而被他左右。混淆原命题和逆命题，抹杀两者之间的差别，是广告设计者最常用，最舍不得放弃的手段。 举证责任针对某一论点，对立双方的举证难度并非对称的。首先，举证难度受证人能力的影响，因为每个人的学识和专业不同。其次，举证难度受当时所在社会的整体知识水平的影响。最后，举证难度还受需要证明的结论与当时普遍接受的知识相符程度的影响。 对立论证人们可能基于一模一样的原因作出截然相反的决定。也就是用相同的论证证明截然相反的论点。实际上所谓的情商，从根源上朴素地看，还是思考力的问题。 辨析感悟我们都需要清楚道理和感悟的区别。成功者其实没有必要、没有义务，也往往没有足够的时间去阐述所有的细节。与其关注成功者不妨反其道而行之：努力从失败者身上汲取经验。只有经过自己的仔细分辨，真正的成功者的宝贵经验才是无价的。需要额外注意的是，一方面多花心思分辨，另一方面多花时间真正了解自己，以便能够避开“一概而论，生搬硬套”可能带来的灾难。 克服恐惧道理都明白，可是做不到，这是无数人生活中无数人在生命中无数次遭遇的尴尬。人人都有弱点，因为人人都会有恐惧。不要以为我们拥有无比的勇气，不要以为自己没有恐惧，总有那么一刻，我们的勇气无法抵御我们的恐惧。所以，我们有什么理由不能理解别人的恐惧呢？ 辅助工具语言是一种便宜（甚至是免费）而又有效的辅助工具。当我们试图批判一个错误的立场的时候，即使是在完全正确地批判的情况下，也总会有这样的抵抗，例如：难道就没有一点可取之处吗？ 勤于思考独立思考，只不过是从别人那里知道一个结论的时候，自己动脑重新推演一遍，看看结论的过程有没有漏洞和不合理的地方衡量一下到底有没有道理的过程。权威不是用来迷信的，权威在更多的时候本应该是我们认识世界的辅助工具。 思维陷阱概念不清。学习任何东西最重要就是搞清它们所有的基础概念。永远都是那些能把概念理解透彻、区分清楚的人才能清楚地思考世界，进而改变整个世界。拒绝接受不确定性。拒绝接受不确定性的一个根源在于害怕复杂、奢望简单。 因果关系因果关系往往分析往往不像看上去那么简单，人们往往因为因果关系分析错误而得出错误的结论且不自知，进而莫名其妙做出错误决定，走上错误的道路。 基础。外因会影响内因，内因同样会影响外因。它们相互影响，互为因果。要做一个用心的人，要用心做事，因为这个世界其实有“心”。分析因果关系是我们在决定是否接受某个观点之前必做的功课。所谓的思维缜密，其实并非常人想象得那么高不可攀，事实上可能恰恰相反—— 做到并不难。很多人做不到的原因无非两个：习惯性拒绝思考和不懂得应该如何思考。而前者往往是由后者长期作用的。 第6章 交流学会倾听正如没有人会认为自己不会说一样，几乎没有人会认为自己不会倾听。可事实上，大多数人不懂的应该如何有效的倾听。人类讲话的速度往往低于思考的速度，所以我们在倾听的过程中常常容易走神。如此这般下去终究会真正错过重要的信息。必须想办法获得一种或者一些用于鉴定已知信息有效性的知识。 那么如何倾听？ 为了做到真正有效的倾听，最需要克制的就是“过早质疑”。 在倾听过程中，我们可要利用多余的脑力处理两个方向的信息：“回顾”与“预期”。 一旦决定倾听，就要主要主动帮助说者进入“倾诉”状态。 说与不说有一种极为常见却又几乎总是被忽略的现象：明明是同样的话，自己说出来就不像那么回事。通过努力和积累成为能说更多话的人。有时候，我们知道自己说的是对的，但是没有人听得进去，绝大多数人面临这样的情况多少有些失落，甚至愤怒，可事实上，这往往说明一个问题 ：还没有赢得足够的重视。 交流守则 有意义讨论的前提是双方不仅要“相互竞争”，更要“相互合作”。 真理是独立存在的，他从来不会依附于任何个人或者集体。 真理不变，也不会因任何人而变；不停变化的只是人们对真理的理解或者解释。 正确复述沟通在很多时候并不像看起来那么容易。在这个过程中我们常常会因为某个参与者而导致“有效沟通根本不可能达成”。如果甲乙两个人需要沟通，那么他们沟通的过程是：甲将他想法用语言表达出来，已用自己的方式去理解甲的语言，然后反过来再次进行。此过程可能重复多次。但是两者的编码、解码机制常常不相同。所以为了保证沟通顺利，往往需要添加一个验证机制，或者说反馈机制。 这就需要我们在生活或者工作中给予别人一个反馈或者回复，让对方对此事有一定的知情权这样才能保证事情的沟通顺畅，效率更高。 勤与反思在讨论问题的时候，我们常常会被对方“固执已见”挫败，但对方眼里，我们可能也是“固执已见”的，只不过是程度不同而已。 所以，我们更需要如何做呢？ 深刻了解经验的局限。摆脱经验主义的第一个技巧：了解经验的局限性； 时时刻刻保持警惕。经验需要归纳，更需要经过演绎来论证； 使用记录，使自己能够记住更多经验。做记录是一个很好的习惯； 通过观察和阅读汲取他人的经验。观察和阅读是扩充有限的自我经验的最好的手段； 试用类比来跨越未知与已知的障碍。类比思考几乎是跨越已知与未知之间鸿沟的唯一手段； 耐心等待以拥有不能快速获得的经验。遇到不理解的问题或者不确定的想法先记录下来，保持耐心。 第7章 应用兴趣首先，有些人并不是对自己正在做的事情没有兴趣，而是没有能力把目前正在做的事情做好。其次，人们常常说他们真正感兴趣的事情是其他事情。综上，我觉得兴趣不是那么重要，至少没有我们想象的那么重要。因为往往不是有兴趣才能做好，而是做好了才有兴趣。 方法方法固然重要，但是比起“用功”来说，方法几乎可以忽略不计。所有学习上的成功只依靠两件事：策略和坚持。而坚持本身就是最重要的策略。坚持就是重复；而重复就是，说到底就是时间投入，准确地说，是大量时间的投入。与其不停地寻找“更好的方法”，还不如马上行动。 痛苦对痛苦的深刻感受，会扭曲或者抹杀人们感知其他事物的能力。痛苦就是这样，一旦我们学会在痛苦的时候运用心智把自己的注意力转移到其他地方去，痛苦就几近自动消失，而且在它被我重新注意之前绝不会回来。 比较在很多人眼里，所谓的成功，不过是比较的产物，归根结底就四个字：高人一等。但是，比较是相对的，相对是永远没有尽头的。很多时候比较是一个坑，大坑。再干脆点说，比较是陷阱。 生活无法彻底回避比较，但是无须比较就可以获得快乐和幸福也同样很多，只不过常常被人忽略。其实比成功更重要的是成长。如果成功是和别人比较，那么成长就是和自己比较。显然，成长比成功意义更大。 运气首先，运气是存在的；其次，运气是有好坏之分的。但是，相信运气是缺乏自制力的表现。当好运气发生在自己身上时，我们应该开心，当坏运气降临在我们身上时，我们呢应该平静接受。心态很重要。尽管对生活不应该盲目乐观，但一定不能失望悲观。 人脉基于某种原因，生活中广受欢迎的人总是少数。所有的人都喜欢并重视甚至偏爱一种交换：公平交换。资源更多的人更喜欢也更可能可能与另外一个资源数量或者质量对等的人进行交换。所以，承认知己能力有限，是保持心理健康的前提。 自卑每一个人都有一个愿望中的自己，同时还有一个感觉中的自己。最佳状态是：愿望中的自己=真实中的自己=感觉中的自己。但是很多时候是约等于并非等于，但是也有部分人处于不等于状态。 作为社会的一员，大多数人并没有意识到，有时候，整个社会向他灌输的关联可能是错的。 优秀的人更容易自卑。 停止嘲笑他人。 忘记自己的优点。 在自己语言中，把“优点”和“缺点”这两个词换成“特点”。 适当地放纵一下自己。 灵感素材固然重要，但是，如果提前确定一个方向或者目标，就可能会积累很多原本想象不到的素材——惊喜连连。不要无谓的相信什么“突然闪现的灵感”的存在。灵感这东西就算存在，也不会平白无故出现的，而是肯定有来历的。所以，以此类推，所有的成功，在本质上都是一样的。先花上相当的时间和精力去锁定一个方向和目标。确定它现实可行之后，运用心智的力量，在这个方向上投入更多的时间，比更多再多一点的时间，“必然”就会产生。 鼓励永远鼓励身边的人，哪怕多少有些盲目。当我们不停地鼓励所有人的时候，最大的受益者其实是我们自己，因力最终我们会发现，自己开始进入一种他人无法想象的伏态，成为一个不需要他人鼓励的人。这一点很重要。因为很多人之所以做事裹足不前，浪费时间 甚至生命，原因就在于他们是必须获得别人的鼓励才敢于行动的人。可是，我们却能成为另外一种人——我们可以不需要被别人鼓励——这是一种境界。 效率任何人都不可能100%地有效率，至少不可能总是100%地有效率。确定自己是什么样的人，熟悉自己的专注的重点，然后通过一定的练习，进而控制我们的大脑。当一个人经过一段时间的训练后，分割时间的方法对他来说就没有必要了。因为，他应该已经可以比较自如的专注在他应该做的、非常重要的事情上了——无论这件事情是有趣还是无趣。 节奏我们应该把自己的生活节奏调的慢一点。想办法提前预支自己需要掌握哪些技能，在确定它们是自己可以通过练习真正熟练掌握的技能，而后制定长期的计划，一步一点稳步执行。 物极必反 不要盲目的试图减少睡眠时间。 尽量不要减少与家人交流的时间。 最好不要放弃自己的社交时间。 自我证明长久的观察和思考，有益干锻炼自己心气平和的能力，反正别人 如何认为、如何评价、如何议论根本没办法影响一个人所处的状态。但是，一旦某个人开始为此心烦意乱、坐卧不安，甚至为此有一些无聊的举动，那么他就不仅是倒霉，而且是可怜了， 因为他已经被别人左右了。被别人左右，是一个人相当可悲的状态之一。 第8章 积累坚信积累现状会影响一个人的心态。如果有一个人心态受到了现状的影响，那么他的行为和决策都会随之发生变化。进而，行为和决策的结果形成新的现状，再次影响心态，形成恶性循环。 任何积累都需要时间，而且必然需要漫长的时间。也正是因为如此，大多数人才不肯积累，不愿积累，甚至不谢积累。相信积累的力量本质就是相信复利的力量。 越早醒悟越好，坚信积累的力量。 越早越好越早开始的事情没有几个，理财排在第一位。理财困难与矛盾来自这样一个窘境：很难很早开心，等开始的时候已经太晚。 为什么今天的人需要重视理财？第一：人们的平均寿命变得长了；第二：人们可获得收入的工作时间也随之变成了。 理财最难得两个地方是对自我的把控和对风险的把控。但是这两个技能可以通过习得而习得，最重要的是必须通过反复实践。 转移注意力是抵御诱惑的一种常用的有效手段。理财的风险意识必须通过自己的实践、失败、教训、总结才能获得的东西。 所以，理财这件事越早越好，开始学会理财，可能是改善自制力、自控力的方法。 如何开始 从今天开始存钱。 该花就花，有时候就要活在当下。（有时候） 爱面子其实是绝大多数人存不下钱的根本原因。 给自己培养一个不那么费钱的兴趣爱好。 开源节流。开源是正途，努力提高未来的营收能力才是当务之急，花时间提高自己的大脑。 给自己一个机会，在5年之后体会一下突然可以动用一笔闲钱的机会。 躺着赚钱收入分为两种：主动收入和被动收入。主动收入：就是必须做点什才能获取的收入。被动则相反。例如利息。很多人不仅没有“睡后收入”，还有“睡后支出”。分期消费的负担其实很重。创作和课程都是是一个睡后收入的不错选择。 思维导图版链接：https://mubu.com/doc/2TuvJmLxoA]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一图解决Google Backup备份出错问题]]></title>
    <url>%2Fposts%2F28362%2F</url>
    <content type="text"><![CDATA[超级简单 产生的故障 解决办法]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《学习之道》阅读第5天-学习有道]]></title>
    <url>%2Fposts%2F19750%2F</url>
    <content type="text"><![CDATA[十好十坏 前言本系列笔记主要是《学习之道》的读书笔记。《学习之道》简介 本系列阅读笔记： 《学习之道》阅读第0天-专注思维和发散思维《学习之道》阅读第1天-学习是组块的过程《学习之道》阅读第2天-预防拖延和对抗发懵《学习之道》阅读第3天-效率工具与提高记忆力《学习之道》阅读第4天-改变思维和自主学习 避免自负右脑在对把事情导入正规和“代入现实情境”中起到至关重要的作用。如果你一口气做完作业或者试卷，而完全不回头检查，你就是放弃了使用一部分的大脑。不停下来换换脑子，再回去从整体上看看自己所做的工作，就不知道结果是否说得通。 在专注模式下工作时，很容易在假设和计算中出很多小错误。依赖左脑的分析模式的问题。它使你条分缕析并保持乐观，但同时大量研究也显示了它潜在的死板、教条、自我中心的可能性. 当你万分肯定自己完成的作业或试卷没有问题时，不好意思，这可能是过度自信的观点，由左脑产生。当你回头检查时，你的左右脑之间才有了更多互动的机会，互相取长补短，从不同角度发挥各自的能力。 和你一起学习的同学应当具有积极的批判性，至少偶尔要是这样。团队学习对数学、科学和工程等科技类学科非常有效。然而，如果是社科类的学习，就不是这样了。减少闲谈，跟上节奏，完成作业。 学习中的批评，无论你是批评者还是被批评者，都应该客观对待。它们是在帮助你理解所处理的问题。 参加考试由难入简法 应对数学和科学考试，学生常被传授的经典策略是，从最简单的题目入手。这个策略是基于这样一种观念：当你做完了相对简单的题目，就会有信心面对更难的题目。 不幸的是，对于大多数人来说，这个策略带来的是反作用。难题通常更耗时，这意味着你更应该先做这些难题，而且难题也迫切需要发散模式来发挥创造力。但是想要进入发散模式，你就别紧盯着那些最想去解决的难题！ 那就先从难题入手，但是马上跳回简单题目。 开始做题时，就先做看起来最难的那道。不过要做好准备，一旦你发现自己已经一两分钟没有进展，或者感觉可能想偏了，就要立刻抽身出来。 “由难入简”法会把首个最难题目装进你的大脑，然后转移注意力。靠这两步就能让发散模式开始运转了。 如果首道难题进展不顺，那就跳到下一道简单的题目，把它做出来，或能做多少是多少，之后接着做另一道看起来很难的题目，并努力取得一点点进展。一旦感到陷入了困境或停滞不前，就再换一道简单些的题目去做。 忧虑的作用有好有坏。适当的忧虑能赋予你动力，帮你集中注意力，而不当的忧虑只会浪费精力。 要注意，由难入简法在某些情况下是不适用的。由难入简法，一些有悖常识的策略会让你的大脑有机会反思难度更大的题目，就算当时你正专注于解答其他更直观浅显的题目。 考试中出现焦虑的原因及对策 对于考试恐慌人群来说，有一个好建议就是把注意力暂时转移到自己的呼吸上来。放松腹部，把手放在上面，慢慢深吸一口气。你应感到手在向外移动，甚至同时感到整个胸腔如一个膨胀的桶在向外扩张。 在压力下人的身体会释放出一些化学物质。让一切结果决然不同的关键，就在于你如何看待身体对这些化学物质的反应。如果你转变思维，不去想“我好怕这次考试”，而是想“这次考试让我好激动，我要做到最好”，你的表现会大有改观。 正念 学生若能花上几周来练习这种正念，将会有更好的考试表现，受到那些念头的干扰也会减少。因为当你所剩时间越来越少，压力会越来越大，却恰恰还面临着最难的题目。当压力剧增，你会努力聚精会神，想着集中注意力就能够解决问题了，然而你的专注反而会让发散模式无法开始工作。 你的大脑会欺骗你，让你以为自己做的就是对的，即使事实并非如此。这意味着，只要条件允许，你应该跳过它，转移一下注意力，然后从全局视角二次检查自己的答案，问自己：“这样解答真的合理吗？” 学习的“十好十坏”学习的10个好方法 1.运用回想。2.自我测试。3.对问题进行组块。4.间隔开重复动作。5.在练习中交替使用不同解题技巧。6.注意休息。7.使用解释性的提问和简单类比。8.专注。9.困难的事情最先做。10.心理对照。 学习的10个坏的学习法则 1.被动重复阅读。2.满眼尽是重点标记。3.瞟一眼解题方法，就觉得胸有成竹。4.等到火烧眉毛才开始学习。5.已经清楚解法，但仍反复解答同一题型。6.与朋友一起把学习变成了闲聊。7.做题前忽视读课本。8.有疑问点，却不找导师或同学核对并解决。9.时常分心，却还以为自己能学得足够深入。10.睡眠不足。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
        <tag>学习之道</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《学习之道》阅读第4天-改变思维和自主学习]]></title>
    <url>%2Fposts%2F45371%2F</url>
    <content type="text"><![CDATA[改变思维改变人生 前言本系列笔记主要是《学习之道》的读书笔记。《学习之道》简介 本系列阅读笔记： 《学习之道》阅读第0天-专注思维和发散思维《学习之道》阅读第1天-学习是组块的过程《学习之道》阅读第2天-预防拖延和对抗发懵《学习之道》阅读第3天-效率工具与提高记忆力 改变思维，改变人生搭建深层组块 合成内容是一种神经模型，它可以是抽象化内容、组块或主旨概念。高质量组块构成的神经模型，不仅能与我们钻研的学科产生共鸣，也能在其他学科或生活领域产生反响。抽象化能让概念从一个领域转到另一个领域。 比喻或实体类比也能构造组块，这些组块能使一个截然不同的领域的概念对另一个领域产生影响。 无论你当前或今后有怎样的职业道路，要有开放心态，保证自己的学习宝库中常备数学和科学知识。你能因此储存更多的组块，从而更精明地应对生活、工作中的各种困难和挑战。 迁移 努力学习数学和科学的时候，我们能做的最重要的一件事，就是给脑中的抽象概念赋予生命。 迁移是把所学知识从一个知识背景应用到别处的能力。关键是要掌握一个数学概念的组块精髓，这会有利于概念迁移和将之应用到新途径中。在学习过程中一心多用会让学习无法深入，这样会限制你迁移所学知识的能力。 好老师的价值把握住和老师讨教或学习的机会。要训练自己克服“囫囵吞枣”的学习阶段，并迫使自己直击问题真正要害，而不是借机会向老师炫耀自己学过什么。谨防自己陷入“我的答案当然正确”的心理，明明是错的还要强迫老师跟随你糟糕的逻辑步骤。 自主学习是一种最深入、最有效的学习方式：自主学习能够提高你独立思考的能力；有时它会帮你解答出老师的奇怪考题。在学习中，毅力往往比智力更重要。 锻炼自己去接触那些你敬仰的人。你会结识学识渊博的新导师，往往他们的一席话可能会改变你的未来。但是请爱惜他们的时间。 正视自己 你是自己的骄傲，尤其应该骄傲于那些让你“与众不同”的特质，并把它用作你成功的秘密法宝。借你与生俱来的逆反心理反抗偏见，不要轻信他人对你下的结论。 如果你没能快速掌握学习材料的重点，不要灰心。常让人惊讶的是，“学得慢”的学生会抓住根本问题，而这些部分通常为进度较快的学生所遗漏。真正了解前因后果能让你从更深层次理解问题。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
        <tag>学习之道</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《学习之道》阅读第3天-效率工具与提高记忆力]]></title>
    <url>%2Fposts%2F14254%2F</url>
    <content type="text"><![CDATA[最好用的学习应用和方法 增强你的记忆力 前言本系列笔记主要是《学习之道》的读书笔记。《学习之道》简介 本系列阅读笔记： 《学习之道》阅读第0天-专注思维和发散思维《学习之道》阅读第1天-学习是组块的过程《学习之道》阅读第2天-预防拖延和对抗发懵 最好用的学习应用和方法找个专门的工作地点对工作极有帮助 比如为了进入运动状态而穿上运动服，或是把重要的报告放在大门口，防止自己错过。 冥想它让你学会对干扰想法视而不见。 如果自己态度不端正，就要改造自己的关注点，让注意力从负面转移到正面看法上； 在前一天晚上写好第二天的计划。 克制习惯最好的办法其实很简单：简要写出下一个星期要做的关键任务清单，一周写一次。之后，每天列一个清单，写出可执行可完成的合理任务量。 最好用的学习应用和程序 计时器：番茄工作法任务、计划和抽认卡片： StudyBlue：移动跨屏学习服务平台应用软件Evernote：用于记录任务清单和零散信息的软件Anki：一款纯粹的抽认卡片系统，内置优秀的间隔重复算法Quizlet.com：可输入自己的抽认卡，可和同学分工合作Google Tasks and Calendar：谷歌任务与日历 防止浪费时间的网站：Freedom：时间管理软件StayFocusd：Google Chrome扩展应用LeechBlock：火狐浏览展扩展应用 目标管理：StickK：目标设定、自我生活的管理辅助工具Things：目标设定网站 最简单的办法:关闭电脑和智能手机提示音。 增强你的记忆力记忆宫殿法 记忆宫殿法需要你回想一个你熟悉的空间，比如自己家的布局，然后把它当成视觉形象的记事本，用来存储你想要记住的概念形象。你要做的就是回想一个熟悉的空间：可以是你的家，可以是去学校的路，或是你最爱的餐馆。这个空间就变成了你的记忆宫殿，用它就像用笔记本一样。记忆宫殿法对记忆互无关联的物品很管用。 记忆宫殿法——将有助于记忆的形象嵌入你熟悉的场景中，让自己感受视觉记忆系统赋予的力量。 学着以更加训练有素且别具创意的方式来使用记忆，会有助于集中注意力，就算为了增强记忆而创造出天马行空的关联也没关系。 理解后再去记忆，你会对学习材料记忆犹新。随着思维宝库的不断强化，总有一天你会成为学习真正的主人。 记忆技巧打造生动形象的比喻或类比 比喻可以帮你更快地学会难懂的概念；重复是在记忆消退前对其进行巩固的必要动作；意群和口诀可以帮你简化学习内容，构成组块，这样就能更轻松地存储记忆；编故事，哪怕故事听起来会有点笨拙，但它也会让学习内容更好记；写和说在一定上都有加强记忆的作用；体育锻炼对新的神经元生长、新联结形成有强大的促进作用。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
        <tag>学习之道</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《学习之道》阅读第2天-预防拖延和对抗发懵]]></title>
    <url>%2Fposts%2F30653%2F</url>
    <content type="text"><![CDATA[预防拖延 对抗发懵 前言本系列笔记主要是《学习之道》的读书笔记。《学习之道》简介 本系列阅读笔记： 《学习之道》阅读第0天-专注思维和发散思维《学习之道》阅读第1天-学习是组块的过程 预防拖延化“坏”习惯为好帮手 学数学或科学依赖于两个过程：一是短暂的学习期，这是“神经砖块”垒砌的过程；二是学习期之间的间隔，就是“思维水泥”凝固的过程。 拖延往往是让我们感到不安的事情。因为如果你喜欢某一件事你会乐在其中，游刃有余。 我们可以看到短暂性的兴奋和解脱是乏味现实的避风港，不断的欺骗自己，不断自欺欺人。研究者也发现，拖延症不仅可以作为技不如人的借口，甚至会成为虚荣心的温床。拖延是会上瘾的。 习惯有好有坏。习惯可以帮我们节省力气，它能为我们的大脑腾出空间进行别的活动。 习惯分为四个部分：信号；反应程序；奖励机制；信念。 可以理解为：一个小的任务清单就是一个信号的输入，然后进入大脑，进行处理并给出对应的反应行为；习惯的不断发展很大程度上与大脑的奖励有关。不断的给自己兴奋或者短暂性解脱。最后在一定程度上导致习惯养成。它是可以上瘾的，不断的自我催眠，让我们在意识上更加坚定不移产生信任行为。 改变你对信号的反应，是唯一需要动用意志力的环节。 通过关注过程而非结果进入思绪 过程指的是时间进程以及与时间进程相关的习惯和举动。想要避免拖延，就不要专注于结果。 注意力放在过程而非结果上，可以让你避免对自己做出评价，并让你更放松地沉浸到工作进程中。 不断地转移注意力，也就意味着你脑中的新观点、新概念没有机会生根发芽。 搭建组块对抗发懵搭建强大组块的步骤： 全程在纸上解决一个重难点题目。 重新做一次，格外注意关键步骤。 学会放松，让自己休息一下。 睡眠。 再来一次。 给自己新的题目，新增挑战。 “主动”重复。 要记住，提取练习是最强效的学习方式之一。 测试是一种强效的学习经历 测试本身就是一种强效的学习经历。它可以改造你已有的知识体系或是为其添砖加瓦，同时可以显著地提高你记住学习材料的能力。就算测试结果不理想或是没得到任何反馈，基于测试效应产生的改进依然会发生。 要记得机遇的法则：如果准备充分、勤加练习并搭建思维方案库，你会发现幸运女神会更加眷顾你。换句话说，如果你不努力，那么必定会失败，但那些一直在不断努力争取的人定会体验更多的成功。即：机会是留给有准备的人。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
        <tag>学习之道</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《学习之道》阅读第1天-学习是组块的过程]]></title>
    <url>%2Fposts%2F48039%2F</url>
    <content type="text"><![CDATA[学习即创造 组块构建与避免能力错觉 前言本系列笔记主要是《学习之道》的读书笔记。《学习之道》简介 本系列阅读笔记： 《学习之道》阅读第0天-专注思维和发散思维 学习即创造专注模式和发散模式之间的转换 只要你放下手中的工作，停下来喘口气，发散模式就会乘虚而入，上蹿下跳，高屋建瓴地搜寻解决方案。适当的放松一下自己可能就会收获一些意外的解决方案，同时对问题的理解会更加深入。 创造力就是对自身能力的驾驭和拓展 发散模式能让你的学习更有深度和创造力，解决数学和科学问题的背后往往正是创造力在运筹帷幄。 同时，不要指望通过某中思维解决问题。要让大脑捕捉问题，首先要借助于专注模式调动全部注意力。研究表明，对于特定思考类型的问题，可用的精神能量，即意志力总量是有限的。 在紧凑的专注模式后，利用发散模式的方法奖励自己，给自己一个小目标，同时设置一个奖励。 自制力很强的人反而会更难关闭专注模式，好让发散模式进入工作状态。每一个人的思维模式和思维习惯不是相同的。有人坚持不懈，奋起直追；也有人休息一下，养精蓄锐。 遇到数学或科学上的概念和难题，首先要让专注模式打头阵。 遇到问题，放松一下，给发散思维一个展示的机会。 让两种模式有足够的时间各行其是，你才能理解自己所学的知识。 组块构建与避免能力错觉专注模式学习的一个重要部分，就是让注意力把大脑各个部分连接在一起。有趣的是，注意力触手会在紧张状态下失去部分连接能力。这就是当你愤怒、紧张或害怕时，总觉得脑袋有点不够用的原因。 专注的练习和重复是创造记忆痕迹的过程。 组块是根据意义将信息碎片组成的集合。思维组块都是绝大多数科学、文学和艺术知识的构成基础。 要熟练地掌握数学和科学知识，就要创造一些概念组块——这是通过意义将分散的信息碎片组合起来的过程。 构成组块的基本步骤 第一步：把注意力集中在需要组块的信息上；第二步：理解。要把基本概念打包成组块，首先要理解这个基本概念；第三步：获取背景信息。你所看到的将不仅是如何进行组块，还有何时何地使用它们。 案例： 快速浏览章节，或去听一场条理清晰的演讲，都能让你获得宏观图景。它会指引你看到自己构建的组块在宏观图景中的位置。要最先了解重点概念和要点——它们往往是一位合格老师的关键教学部分或是书籍的章节大纲、流程图、表格，或思维导图的核心内容。只要完成这一步，接下来就可以填充细节了。在学习即将收尾时，完整知识版图就算还缺上几块“拼图碎块”，也不会影响你总览宏观图景。 能力错觉与回想的重要性 试着回想学习材料，即提取练习，效果比单纯阅读材料好得多。 在学习中进行回想——让大脑提取关键概念，而非通过重复阅读被动地获取知识，将让你更加集中高效地利用学习时间。 通过冥想回顾自己的记忆，不要搬运书中的观点，学会独立思考和总结，不断的去探索真知。不断把零散的记忆组块打包，形成一块块拼图，逐步完成记忆的组装。直到能够独立的解决问题，寻找问题本身的真谛，而不是仅仅看一眼问题的答案就以为自己会的错觉。 在数学和科学的学习中，必须进行适量的练习和重复，否则就无法构建组块来支撑专业技能。 相同时间内，仅靠对材料的练习和回想，学生的习得内容和学习深度都远远超过了其他方法。 穿插学习法 穿插学习，是指把解题策略不同的题目混在一起练习。 解决混杂交错的各种问题，而非在同一个问题上过度学习，做到“口默念而心得解”的最后一个重点提示。要掌握一门新学科，是要学会挑选使用恰当的解题技巧。唯一的解决途径就是去练习各种题目，运用不同技巧解决这些问题。 仅知道怎样使用特定的解题技巧还不够，还得知道何时何地去使用才行。 简单回想，试着关上书回忆要点，是促进组块形成的最好办法之一。 我在想是不是以解决问题为导向呢？]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
        <tag>学习之道</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《学习之道》阅读第0天-专注思维和发散思维]]></title>
    <url>%2Fposts%2F32089%2F</url>
    <content type="text"><![CDATA[每个人都能提升学习能力 专注思维和发散思维，两种模式之间转换，择一而用 前言本系列笔记主要是《学习之道》的读书笔记。《学习之道》简介 每个人都能提升学习能力 本文的“他”即作者。 我们的大脑生来就具有非凡的心算能力。 他小时候对数学和科学深恶痛绝，甚至在少年时期连读中标的时分秒针都不清楚含义。初一的时候家庭变故，父亲受伤失去了工作，住进来贫民校区。 他喜爱小动物，热爱阅读和幻想。字典里也不会有数学和科学。化学实验的时候老师故意给他和他的搭档分别发了与别人不同的实验材料，编造实验数据导致挂科，最后认清了真相。老师不断灌输科学和数学知识，他不断拒绝。 高中一毕业参军了，军队花钱让他去学外语。学习俄语的发音标准被误认为是母语使用者。他成为了美军通信兵部的一名陆军少尉，而后开始思考自己的职业生涯。最后决定重新训练自己的大脑。 反思自己第一学期的跌跌撞撞，摸清了原因，开始掌握了一些小技巧。他认识到了，如果能把某些概念和技巧转化为自己的一部分，它们就会成为我的强大武器。 紧接着就拿到了电气工程学士学位和电子与计算机工程的硕士学位、拿到了系统工程学的博士学位，并拥有了广泛的学术背景。 事实上，我们对数理知识都有着天生的敏锐和直觉。想要学好，需要掌握的只是数理学科独有的语言和知识背景。 专注思维和发散思维大脑中两种思维网络模式：注意力高度集中的状态和更加放松的休息状态。这两种思考状态基于不同的神经网络模型，我们将其分别称为专注模式（focused mode）和发散模式（diffuse mode）。你会在两种模式之间转换，择一而用。 专注模式专注模式下的思维活动对数学和科学的学习必不可少。它是利用理性、连贯、分解的途径直接解决问题的一种模式。专注模式与大脑前额叶皮层（位置就在脑门正后方）集中注意力的能力相关。 专注模式是把精神集中于已在脑中形成紧密关联的事物上。启用专注模式，常常是因为已掌握的基础概念对于你而言既熟悉又轻松。专注模式意味着我们高度专注一个特定问题或者概念。 通常，你首先会将一个问题逐词逐句地注入大脑，比如读书或查阅课堂笔记。你的思维触手就会激活专注模式。利用专注思维模式来处理数学和科学问题，通常会比处理语言和人际交往相关问题费劲得多。 如果我们开始就用专注模式处理新的概念和陌生的问题，很容易止步不前。 发散模式发散模式对学数学和科学也同样必不可少。当你放松注意力，任由思维漫步时，发散模式思维就出现了。松弛状态让大脑的不同区域得到相互联络的机会，并反馈给我们宝贵的灵感。 与专注模式不同，发散模式看起来跟任何一个特定脑区的关系都不太密切，它更像是“弥散”于整个大脑之中。通常，专注模式生成了初步思路之后，发散模式的灵感才源源涌现。 如果你想要理解新事物，那最好关掉精确的专注思考模式，把开关切换到“广角光源”，直到你锁定了一个新的、更有成效的方法。 总结用直观的方式来看待专注模式和发散模式之间的区别：想象从手电筒里打出来的光。专注模式下的光束更紧密，穿透力更强，径直打在一小块区域上。而如果你拨到发散模式，光柱会分散开，照亮的范围更广，但各处的光强都会降低。 无论是专注模式，还是发散模式，都要求两个大脑半球同时参与。想要学习数学和科学，而且保持创造力，两种思维模式都会被用到，对它们的强化训练缺一不可。 定式效应就是说因死盯着有瑕疵的方法不放，而在解决问题时陷入僵局。切换到发散模式可以帮助我们从中解脱出来。有时候你的思考得灵活点。想要解决问题，理解概念，你可能需要在不同的概念之间转换。最初的想法反而可能是误导。 想要发掘新点子，解决问题，不仅需要最初的专注，接着也需要给注意力放个假，让它从眼前的问题上溜开一会儿。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
        <tag>学习之道</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next指定文章隐藏侧栏]]></title>
    <url>%2Fposts%2F24546%2F</url>
    <content type="text"><![CDATA[坑里呆了3小时 缘由近期在幕布的活动比较多，想新增一个幕布的作品集页面，所以就依葫芦画瓢，新建一个幕布作品集的页面。 1hexo new page "mubu" 中间省略其余相关步骤。 提交至线上发现右边我设置的隐藏栏就自动弹出来了，好奇的是为什么分类、标签等不自动弹出来呢？ 第一步各种Google找资料，next主题的官网等都没找到解决办法，最好慢慢在妥协，要不全部都不显示了？ 作为一个追求相对完美的人，肯定不愿意放弃！ 第二步找原因。 为什么不行呢？为什么会显示呢？查看next主题的配置文件。其中display: post,这句话的意思只有文章才自动显示。所以我的幕布作品集被当作了文章处理。 1234567891011121314151617181920212223242526sidebar: # Sidebar Position, available value: left | right (only for Pisces | Gemini). #position: left position: right # Sidebar Display, available value (only for Muse | Mist): # - post expand on posts automatically. Default. # - always expand for all pages automatically # - hide expand only when click on the sidebar toggle icon. # - remove Totally remove sidebar including sidebar toggle. display: post #display: always #display: hide #display: remove # Sidebar offset from top menubar in pixels (only for Pisces | Gemini). offset: 12 # Back to top in sidebar (only for Pisces | Gemini). b2t: false # Scroll percent label in b2t button. scrollpercent: true # Enable sidebar on narrow view (only for Muse | Mist). onmobile: false 继续探寻，最后在issues/943找到了解决办法的初步思路。 第三步根据issues-943找到了my-project/themes/next/layout/_marcro/sidebar.swig中找到下一列信息。 1&#123;% set display_toc = is_post and theme.toc.enable or is_page and theme.toc.enable %&#125; 将其修改为： 1&#123;% set display_toc = is_post and theme.toc.enable and !page.no_toc or is_page and theme.toc.enable and !page.no_toc %&#125; 然后只需要在你不想显示目录的文章头部加一行：no_toc: true即可。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac完全删除Vagrant]]></title>
    <url>%2Fposts%2F38898%2F</url>
    <content type="text"><![CDATA[Vagrant 依赖比较多 几行命令，同样搞定 卸载程序和依赖123rm -rf /opt/vagrantrm -f /usr/local/bin/vagrantsudo pkgutil --forget com.vagrant.vagrant 删除用户数据12rm -rf ~/.vagrant rm -rf ~/.vagrant.d]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[管理你的大脑--幕布]]></title>
    <url>%2Fposts%2F25517%2F</url>
    <content type="text"><![CDATA[幕布 不只是大纲笔记 更是一种思考方式 不试试？ 基本介绍思维导图，超好用的思维辅助工具在幕布中，大纲笔记与思维导图可以一键转换，再也不需要为思维导图的编辑而头疼。幕布帮你将宝贵的精力节省下来，让你专注于内容创作。 转换后 高效的结构化笔记幕布通过大纲来组织内容，无论是读书笔记、活动策划、会议记录还是待办清单，都能完美胜任，这种更具条理性的写作方式，会带给你全新的体验，极简可靠。 轻松自然的分享方式无论是微信、QQ 还是微博，通过链接，你可以将文档分享给任何人。轻松自然的分享方式，让你更便捷地传递信息。 可以导出为FreeMind和图片，FreeMind文件可以导入到其他的思维导图工具，例如Xmind。 云端自动同步多平台数据自动同步，随时随地，阅读创作。有幕布在手，一切得心应手。 轻松协作，团队共享 即将发布 发送链接，即刻开始协作。释放团队潜能，效率满载。 多平台支持目前支持的平台：网页版，桌面版，安卓版，iOS版，iPad，微信等。 高级版功能更丰富的功能，更生动的展现 无限空间，无限数量无限文档存储空间，单文档无限记录条数，您可以把一整本书摘录到幕布中。 内容高级样式3种标题字号，多种字体颜色，让您的段落清晰，重点突出。 文档插入图片复制粘贴，选择图片文件拖入文档，多种方式轻松快捷插入图片。 思维导图高级风格4种结构、10种风格，让您的思维导图模式更美观，加强大脑印象。 更多导出类型思维导图导出图片、FreeMind、文档导出OPML，更好的和其他工具配合使用。 高级版可以通过邀请好友获得，详情：https://mubu.com/exchange 使用教程基本用法幕布就像笔记本一样，直接输入文字即可 每段文字前面都有一个小圆点，一个圆点为一个主题 创建新主题：「Enter」键/回车键 调整主题层级：「Tab」键缩进一级，「Shift+Tab」提升一级 进阶技巧鼠标悬浮在主题上时，小圆点前面会出现展开/收起的图标，点击即可展开/收起，快捷键「⌘ + . 」 用鼠标点击按住小圆点，可以随意拖动调整主题的位置（可框选批量拖动），也可使用「⌘ + Shift + ↑/↓ 」向上/下移动主题 点击每个主题前的小圆点，可进入此主题，专注于一件事，快捷键「⌘ + ] 」 进入主题后，顶部会出现层级导航菜单，可用鼠标点击，也可使用「⌘ + [ 」返回上一级 主题功能菜单鼠标悬于小圆点上方时，出现主题功能菜单，可以完成更多操作 完成：将主题标记为完成状态，快捷键「⌘ + Enter」，再次按下可取消 编辑描述：为主题添加更详细的描述内容，快捷键「Shift + Enter」 添加图片：将本地图片文件插入到文档中，快捷键「Alt+ Enter」 删除：快速删除整个主题，快捷键「⌘+ Shift + Delete」 文字样式：修改字号大小及颜色 通用快捷键按下「⌘+ A」全选当前主题，再次按下全选整个文档 「 ⌘ + B」加粗； 「 ⌘ + I」斜体； 「 ⌘ + U」下划线。 选中文字后按下「⌘+ C」复制，「⌘ + V」粘贴 按下「⌘ + Z」撤销，按下「⌘ + Shift + Z」恢复 添加标签幕布提供了#和@两种标签，帮助您更好地对主题归类 直接输入#或者@开始添加标签，如果是在内容中间，#或者@符号前边要以空格开始，将标签和内容区分 点击标签后，可快速过滤内容进，筛选出文档中例如 @张三 的所有主题 两种标签功能是一样的，您可以在@后面接人，#后面接事件，更好地进行管理 标签内容至少四个字符，即四个英文数字或者两个中文字符 我的幕布作品【读书会】第54期 《EOS技术及生态系统介绍》读书笔记 ：https://mubu.com/doc/explore/14437 《原则》- 工作原则&amp;生活原则：https://mubu.com/doc/explore/13760 《把时间当作朋友》：https://mubu.com/doc/explore/13739 注册幕布幕布注册地址：https://mubu.com/inv/100324， 根据此链接注册可获得15天高级版会员。 文章内容来自幕布官网。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>幕布</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac搭建yaf项目]]></title>
    <url>%2Fposts%2F36403%2F</url>
    <content type="text"><![CDATA[官网地址：https://github.com/laruence/yaf 基础环境最基本的几个软件应该有的。 Homebrew,PHP,Nginx,MySQL(暂时用不到)。 或者，电脑应该有一个PHP的开发环境。 本次的环境： 12345678910➜ ~ php -vPHP 7.1.14 (cli) (built: Feb 2 2018 08:42:59) ( NTS )Copyright (c) 1997-2018 The PHP GroupZend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies with Xdebug v2.5.5, Copyright (c) 2002-2017, by Derick Rethans➜ ~ nginx -vnginx version: nginx/1.12.1➜ ~ brew -vHomebrew 1.6.4Homebrew/homebrew-core (git revision 530af; last commit 2018-05-20) 安装扩展直接采用brew进行扩展安装。 brew install php71-yaf 检查： 12➜ ~ php -m | grep yafyaf 表示yaf的扩展安装完成。 配置项目仓库地址：https://github.com/laruence/yaf 123456git clone https://github.com/laruence/yafcd toolscd cgphp yaf_cg yafApicd outputcp -R yafApi /User/demo/project/yafApi 配置虚拟主机我的环境目录： 12➜ conf.d pwd/usr/local/etc/nginx/conf.d 新建虚拟主机 检查nginx配置文件 123➜ conf.d nginx -tnginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is oknginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful 重启nginx服务 1brew services restart nginx 配置hostssudo vim /etc/hosts 12# yaf api 127.0.0.1 www.yaf.com 测试]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Mac</tag>
        <tag>yaf</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EOS技术及生态系统介绍]]></title>
    <url>%2Fposts%2F46022%2F</url>
    <content type="text"><![CDATA[读书会 第五十四期·区块链第五期 读书会·EOS技术与生态 嘉宾介绍哈胜，现任梦起文化传播有限公司技术总监，西北地区区块链技术发起第一人；一直在致力于将区块链技术推广，现为EOS引力区西北区节点竞选人。 EOS基本介绍EOS是Block.One公司正在研发的一个区块链底层公链系统，目的是解决现有的区块链应用性能低、安全性差、开发难度高以及过度依赖手续费的问题，实现分布式应用的性能扩展。EOS提供帐户，身份验证，数据库，异步通信以及在数以万计的CPU或群集上的程序调度。该技术的最终形式是一个区块链体系架构，该区块链每秒可以支持数百万个交易，同时普通用户无需支付使用费用。 目前的底层公链离真正的大规模商业应用还有很大的差距，主要表现在区块网络转账速度慢、费用高、系统并发处理能力差，稳定性差、数据存储和安全缺陷等。这是目前底层公链需要解决的问题，这些问题解决不了，商业化应用只是一句空话。EOS如果要成为一个真正能支持大量商业级应用的公链，势必要解决这些问题。 EOS的优势和创新大幅提升底层公链的交易速度采用了DPOS (股份授权证明）共识算法机制的EOS相对传统公链在速度方面优势明显。正处在开发阶段的 EOS如果能够顺利实现，很可能成为第一个可以处理商业级运算的去中心化底层公链。采用DPOS算法机制的石墨烯技术，在有限制的测试条件下已经实现了每秒上万次的交易量。后续，EOS将使用并发技术来继续扩展其网络性能，有望实现每秒数百万次的交易处理能力。届时，EOS将解决底层公链的速率和拓展性问题，将可同时支持数干个商业级的分布式应用程序 (DAPP) 在其平台上运行。 提升底层公链的可拓展性，避免硬分叉作为一个去中心化的操作系统，当出现分歧时能否达成共识，在避免硬分叉的前提下保持迭代，将成为一个至关重要的问题。 在区块链中，底层的代码相当于现实中的法律。代码中存在bug是无法避免的，如果一个区块链的底层平台出现bug时没有办法修复将是一件十分可怕的 事情，会失去用户的信任。之前的BTC和ETH都曾出现过分叉问题，BTC因为速率扩容以及网络拥堵，社区无法达成共识，至今已经出现了多种分叉币。而ETH则主要因为DAO黑客事件，造成社区内激烈争论，最终分叉为ETH和ETC两条链。 而EOS从整体的架构设计上解决了这个问题。EOS的约束性合约相当于“宪法”给整个平台下了明确的定义：在公链的运行中，当系统出错的时候，能够根据可读性意图来区分这个错误是否确实是bug，并且来判断社区的修复是否正确。有了这套机制，如果未来有新技术出现，也可以很容易地增加到EOS系统 中，有利于系统的升级和迭代。 例如，当EOS中出现了类似之前DAO的黑客事件时，系统中的21个节点将迅速采取行动，冻结黑客账户，然后通过投票采取最有效的处理方式，不会像之前的ETH因无法共识而出现硬分叉的情况。 从这方面来看，EOS在稳定性和可拓展性上相对已有的底层公链系统是非常有优势的。 用户免费使用网络资源EOS则采用所有权模式，如果你拥有相应比例的代币，就有权免费使用相应比例的网络资源，对你而言，交易将是零成本的。 安全性高，避免DOS攻击DOS攻击在众多网络攻击技术中是—种常见并且具有很大危害性的攻击方式。它通过各种手段消耗系统资源和堵塞网络带宽，使正常网络服务陷千瘫痪状态。在近几年的实践中以太坊网络已经被证明非常容易受到DOS攻击的影响。 EOS的代币则相当于网络资源的所有权，用户只能使用相应比例的网络资源。因此，DOS攻击者只能使用到其EOS代币相应比例的带宽资源，形成了天然的制度屏障，使DOS攻击仅可能出现在某一个应用程序上，但这些攻击永远不会破坏整个网络运行，因此EOS从设计上提升了整个基础链的安全性。 提升公链系统的兼容性为了实现更好的兼容性，EOS中设计了跨链交互和虚拟机独立架构机制。例如，在EOS系统中设置了以太虚拟机 ( EVM )。它能够支持现有的以太坊合约。也就是说，现有的以太坊平台上的应用，只需要稍加配置，未来就能够在EOS上面运行。 对于开发者来说，目前在其他公链上开发DAPP并不容易，需要自己写很多基础模块才能实现。而EOS的设计目标是成为区块链的底层操作系统，已经为开发者提供了各类底层开发模块。简单来说，各类基础功能EOS都已经帮你设计好了，你只需要知道怎么使用这些基础工具就可以完成自己的开发了。这样也就大大降低了开发者门槛，再加上EOS平台并发处理速度快，没有手续费的特点，将会吸引更多的普通开发者，有助于EOS平台上涌现大量的商业级应用，快速形成平台生态系统。 通过以上分析，我们不难得出结论，从架构设计的角度EOS非常有潜力成为能够支撑大盘商业级应用的超级底层公链。 但EOS还只是一个开发中的项目，在主网没有上线的情况下，列举这些技术解决方案及实现方式，只是出于概念上的论证，至于这种可能性能否最终实现，我们并不确定，作为投资者，想分析清楚一个项目的投资价值，我们还需要从可行性，进展情况等各方面进行多维度的考量。 EOSIO Dawn 3.0简介BM在Medium宣布EOSIO Dawn (EOS黎明）3.0正式发布，做为EOSI O主网正式发布之前的一个里程碑式的版本，Dawn 3.0版本是第一个功能完整的预发布。 Dawn 3. 0在这三个方面有巨大的提升：可扩展性；安全性；智能合约开发，并极大地改善了开发者的体验。 可扩展性可扩展性意味着通过扩展来不断满足市场需求。BM说：“我们的团队在每一步都将未来扩展需求纳入设计中。也就是说，Dawn 3.0只实现了一小部分潜在的优化，可以让EOSIO进行扩展。我们设计了EOSIO，以便将来的实现可以利用并行计算来加速吞吐量，不需要通过硬分叉就 能继续升级。” 安全特性安全对于任何计算系统都至关重要，BM说：“我们设计EOSIO是市场上最安全的区块链。安全是一个多维问题，必须考虑到黑客攻击，硬件故障，硬件丢失和密码丢失的风险。硬件钱包擅长防范黑客入侵，但如果失败，可能会将您锁定在帐户外。此外，硬件钱包的纸张备份可能会丢失或被盗。” 简易合约开发对于EOSIO，BM说：“我们的许多目标之一就是让合约的开发尽一切可能轻松。如果开发人员知道如何编写一个C++类的方法，那么他们应该能够编写一个尽可能不复杂的智能合约。”“我们很高兴已经简化我们的 “hello world” 合约到几行简单的代码。我们的 工具链已经自动化生成合约ABI的过程，并且调用用户action到定义于你类目的方法。” EOS和ETH、ADA的对比EOS VS ETH的优缺点在区块链领域，除了BTC这老大外，还有两璀璨的明星，那就是ETH和EOS，如果说BTC是区块链1.0的代表的话，那ETH和EOS就代表着区块链2.0、3.0；一直有种说法：BTC让人们见证了什么是虚拟货币、共识机制、公有的分布式账本， ET H让人们见证了什么是智能合约，即在这个共同的分布式账本上进行复杂交易的能力，而EOS则要将区块链推向我们的生活，使区块链应用能够大规模商业化。 通俗一点说，ETH是开源平台数字货币和区块链的智能合约平台，它为开发者提供在区块链上搭建和发布应用的平台，可以把以太坊当作是一个用于开发和运行去中心化应用。 EOS则是一个面积接近无限大的地基，这个地基牢固、精致、设计优美，并且在地基之上还提供了各种“积木”，开发商 ( Dapp应用团队）可以用这些“积木”轻易地搭出自己设计稿上的商业大厦、电影院、办公楼或者小木屋，而用户想进入这些房地产项目消费，也不需要先买门票，反而可以尽清领略各种景观。 设计理念假如说ETH是简单开发的荒野，EOS则是功能齐全的大都会。ETH被设计为一个对于所有潜在的应用中立的平台。以太坊在github上的设计原理文档中如此说道：以太坊“没有特性”，拒绝在协议中加入即使是常用的高级别的用例。这使得应用没那么擁肿，但是它依然要求不同的应用重用代码。但是如果平台本身提供了那些常用的功能，将能提高应用开发者的效率。 与ETH不同，EOS意识到不同的应用都需要一些相同的功能，EOS就提供了这些功能，比如基于角色的许可功能，用于开发界面的一套web工具，自描述接口，自描述数据库，声明式许可scheme。 共识机制与治理以太坊目前使用的的POW共识机制，运行在以太坊上的坏掉的应用导致投资人遭遇重大损失，慌乱的硬分叉。每次硬分叉都可能大量出现竞争链，更重要的，为了修复一个坏掉的应用而慌乱地进行硬分叉都会打乱整个以太坊网络。 EOS包含一套冻结并修复坏掉的应用的机制。坏掉的应用会被冻结，修复，然后更新，而不会干扰到其他的EOS应用。基于DPOS共识机制的EOS，即使硬分叉也不会大量产生竞争链而且，EOS将包含一个合法绑定宪法，用于解决争端，它同样包含一个基于股权权重投票产生的社区。 扩展性-速度以太坊网络受限于CPU的单线程性能。早期的测试网络达到每秒25次交易(还是在优化了的情况下)，经过优化，可以增加到50次或100次交易/秒。然而，在实际应用中，以太坊网络的交易差不多是10次交易/秒，甚至更少。 EOS将依赖于石墨烯技术，在压力测试中，石墨烯技术已能达到每秒3000笔交易。第二，EOS将使用并行技术来拓展网络，处理能力将到达每秒百万笔交易。如果这些都能实现，EOS将能支持上千个商业级Dapps。 安全性：DOS攻击以太坊网络已经被证明了非常容易受DOS攻击，在以太坊网络中，矿工倾向于优先处理那些高费用的交易。由于带宽和算力是有限的，可以预见出如果网络中被塞入大量高费用的交易，这将会把低费用的合法交易踢掉。这就会诱使有钱的玩家用高费用的交易堵塞网络，以保证他们的交易能被执行。 EOS不易受DOS攻击，EOS代币的持有者会在网络带宽，存储和算力方面给予用户一定比例的股权，恶意攻击者只会消耗掉他们的EOS代币赋予他们的那部分网络。某个应用或许会遭到DOS攻击，但是这些攻击不会干扰整个网络。 GAS燃烧费用VS股权拥有制以太坊中，交易，存储，操作，带宽使用的每次计算都需要gas费用，而且矿工倾向于选择那些高费用的交易来处理，这种经济模式会出现一种情况：富有的玩家可以向网络中发送大量高费用的交易从而导致网络瘫痪。 EOS使用所有权模式，持有EOS代币将在网络带宽，存储，处理能力方面给予用于一定的份额。这意味着如果某人拥有1%的EOS代币，那么他就永远只能获得1%的网络带宽，而不论网络剩余部分的负载情况。 EOS与ADA的优劣ADA简介卡尔达诺（Cardano）是一个正在开发中的新一代区块链智能合约平台，ADA是卡尔达诺平台的数字代币。 Cardano的哲学是在学习和继承现有基础公链优点的基础上，进行概念和技术的创新，希望能最终解决上述三方面问题，成为更便捷、更高速、更智能的新一代底层基础公链，也就是大家常说的区块链3.0。 Cardano不仅是加密货币，也是一个完全开源的区块链平台。其中心思想是要构建一个分层次的区块链生态系统。有些人甚至认为如果后续能够进展顺利，Cardano 有望成为一个史诗级项目。从底层基础公链的竞争角度来看，ADA显然是一个非常有实力的竞争者，国际化的团队做事扎实，透明度高，无论规模还是技术能力，都可以被称为区块链领域的豪华团队，完全有条件成为未来的顶级基础公链。 ADA的整体目标宏大，如果项目顺利完成，价值和意义都非常巨大，同时，项目的复杂度高，也必然带来很大的开发难度，对此，投资者也应适当审视。ADA是和EOS属于同一量级的项目，它们都有机会成为未来最好的基础公链，但相比于EOS，ADA在市场热度和认知度上都还有明显的差距。 目标宏大、复杂、难度大、周期长Cardano目标宏大，可以简单理解为改进版比特币+下一代以太坊。从软件工程的角度看，项目是非常复杂的，需要很扎实的开发推进和很长的开发周期。在一日千里高速变化的区块链领域，这种高难度长周期的项目定位本身也是一种风险，需要各方面的有力支撑才能顺利完成。 共识机制有待实践的检验共识算法是一个基础公链的价值观，Cardano的Ouroboros算法是自己独创的，目前并没有开发完成，整体的理念也还存在一些争论，这从BM与霍斯金森关于算法的互怼也可以看出一些端倪。EOS的DPOS算法，已经在两个项目中有过应用，但近期的投票机制依然引起了轩然大波和整个生态的争论。可见，一个共识算法的成熟和完善，重要而且漫长，对Cardano的共识算法我们仍需要拭目以待。 中心化倾向能否成为主流共识？对EOS的21个超级节点是否是中心化的争议仿佛一直没有停止过，在Cardano的设计中包含了接受监管，合规审查等思想，貌似是与区块链的去中心化思路相背离的，整个市场对于这种思路的接纳程度也是一个有趣的话题。 偏重技术，对营销的重视程度低清高、严谨、注重声誉，我一直觉得ADA是区块链领域的异类，尤其与那90%只想着快速圈钱的项目方相比实在反差太大。有人形容ADA团队“不在乎钱，而更在乎是不是在人类知识的边界上又突破了一步”，一个开发团队拥有这样的格局和气度，小姐姐由衷的欣赏和敬佩。但毕竟投资市场是浮躁的，很大一部分投机者不管你项目好不好，只要项目方能拉盘，币价明天能涨就是好项目。即使你是踏实做事的清流，币价不涨也会被骂。因此，ADA这类埋头做事的项目能否取得更大的共识，做好市值管理，其实与投资者的心态和整个市场的理性程度有很大关联。 需要面对EOS和以太坊等强大对手的竞争说到竞争，我们不得不提BM的EOS。在团队能力、项目定位、甚至共识算法方面，ADA与EOS都属于同一量级的，可能会成为较长一个阶段的直接竞争者。但目前EOS是遥遥领先的，已经实现了广泛共识。EOS 4月6日新发布了EOSIO DAWN 3.0版本，主网也即将在6月上线，似乎在落地进度上也领先了一步。这些无形中都是对ADA的巨大挑战，ADA需要在营销、落地、取得广泛共识等几个维度上尽力追赶。 EOS的生态建设方法EOS生态的目标在所有具有共识的人中，公平发放、公平使用Token。权益的公平性是维系EOS生态健康的第一要务，这个目标具体体现在了众筹、公链后的节点投票、通货膨胀等一系列运转细节的设计。 保证EOS生态具有和其他生态相比更先进的生产力。任何人和群体都有特质和局限性，曾经先进的公司变得落后，曾经天才的人物变衰老，都是可预期的客观事实。共识在凝聚和分裂中不断转化，社区需要有足够的包容性容纳不同价值观并为其提供充分的发展空间。在这个问题上，BM选择了多链自由竞争的路，具体如下： 自由竞争：Block.one不发起、不指定、不倾向任何公链，任何基于EOS.io的公链必须是由与Block.one无关的成员完成。由市场决定有哪一条或哪几条公链存活。 DAPP用链方式：Dapp可以自由选择和其他Dapp共享一条EOS公链、可以自己独占一条，甚至一个DAPP独占多条公链。 修改EOS.io：任何人都可以以任何方式删除、修改、补充EOS.io软件。就MIT协议来说，这是一个相对宽松的开源协议，任何人都有权使用，修改，复制，再分发（再分发版本无论是否开源都可以），销售这个软件。 在多链自由竞争的格局下，Eos.io同时具有的跨链功能。从而EOS社区真正成为一个求同存异，既有竞争又有合作的链网结构，任何人的新想法都可以在这个生态中得以实现。 运转Token的发放POW在项目运行早期可以实现发放公平，但在形成矿池后会因算力集中造成对普通人的不公平。POS在项目后期公平，但在初期受众面小的时候，考虑到公众对项目有认知周期，如何尽量降低由于信息扩散、信息不对称造成的早期权益集中是POS最重要的问题。EOS的Token发放通过以下几个设计完善的解决了这个问题： 除团队预留以外，不设任何预售和私募，绝大多数Token全部公平向公众发行。超长发放周期，让更多人有机会接触到项目，甚至有机会在几个牛熊转换中充分思考项目的价值，及其与自己价值观的匹配度，十分重要。1、为众筹前对项目感兴趣产生的需求提供供给。2、更精准发现EOS Tokens的价格。 不操纵币价。众筹期内，Block.one不可以交易或转账。在公链上线后，每年Block.one可与新的创始人将不可交易EOS token置换为可交易EOS token（不多于1000万）。整个众筹期内，Block.one会请第三方独立审计保证以下事项：Block.one不会用任何方式购买EOS，不会给Block.one的股东分红，不会进行任何股权回购行为。 DPOS和节点运行如前文所讲，EOS.io是一个高度自治的软件。节点是维系EOS生态运转的最重要角色。在设计节点角色时，系统遵从了如下的原则： 高速轮转，自由进出：节点是在持续投票过程中不间断产生的。“任何人”只要在某一轮获得足够的投票，都可以参与到当个周期的区块生产中去。每一轮63秒（0.5秒21个节点每个节点出6个块）都可以有新的节点选出来，旧的节点被踢出去。 Token Holder对于节点具有最终的决定权。一切经TokenHolder通过的决定，节点必须无条件执行、不执行的节点将被自动踢出生产节点序列。 节点在获得15/21票后可对一些异常账户、代码进行暂停。控制节点收益的比例。 通货膨胀的用意EOS本身的软件功能在增强、EOS所代表的计算资源在扩张，相应的工作投入需要给予激励回报。上述是提升整个EOS 社区成员福祉的行为，而并非针对个别Token Holder的行为，因此应以面向整个社区收取铸币税的形式来完成。换言之经济体的规模在增大，需要一定量的通货增加维持EOS的购买力平稳。 每年增发不超过5%的Eos Token，Token Holder投票决定具体数字。这部分Token 有三个用途：第一部分是节点奖励，完全用于扩大EOS生态计算能力，第二部分是Worker Proposal，第三部分是销毁掉。重点在第二部分，Token holder 可以投票发出申请（包括Community Benefit、Arbitration Fund、System Improvement三类），然后有开发者接单并提出报价。完工后开发者从Worker Proposal 账户中取得报酬。 宪法及宪法的升级生态中还有一部分是不能完全通过算法促成的共识。将以英文版书写的宪法Hash后，作为交易的一部分嵌入每笔交易中，作为交易双方对共识的完全认可。 宪法升级有一个Token Holder和BP配合操作的流程，简单来说投票选节点，节点来执行，节点执行结果维持同一个状态一段时间后，新宪法生效。不按照Token holder决定做的BP会被踢出。如果节点在未经token hodler授权时 ，其他所有非生产的全节点会拒绝这个改变。 Q&amp;AQ:老师,对于现在区块链这么火热，同时也产生了很多区块链+内容的产品，但是大多人都是薅羊毛（通过文章获取代币）的，而这样的产品出发点是什么呢？是不是有点不符合区块链本质（去中心化的分布式记账系统）呢？ A:你说的这个问题确实有的，尤其是今年被称为区块链元年，很多人趁着大家不懂和不了解，做了很多假项目，你说的那种通过文章获取代币的就是明显的，他们很不符合区块链技术本质。是一种伪去中心。 Q:老师，你认为eos相关的空投项目对整个eos生态的发展会有怎么样的影响？ A:EOS空投项目，对于整个生态和社区的壮大发展是有好处，但同时也要防止那些空投骗局。最近EOS发售的糖果eosDAC就很受大欢迎。 osDAC，由一个名叫“BlockMaker”的公司建立，希望这个社区有组织有纪律，有很好基础设施、能良好的发展下去，继而汇集大家的力量，来促进 EOS 的发展。 这个 eosDAC 会为大家准备好开发工具，将会和其他社区一同促使 EOS 成为一个真正的，方便大家使用的公链。 拥有多少 Token 也一定程度上代表着你在这个社区的话语权。 总的来说 eosDAC 致力于打造一个民主，有序、自治、去中心化的 EOS 社区，以此促进 EOS 生态的发展。 关于 EOS 技术方面的文章已经很多了，这里不做过多阐述，大体意思就是定位区块链 3.0，建立一个比以太坊牛逼很多的 DAPP 开发平台，TPS 达到百万级，来适应更多的实际应用，据称目前的在测试节点上已能跑到 1300 的样子。 对于公链这样的开源项目，除了技术外，生态建设格外重要，而生态是需要整个社区共同推进的 ，EOS 作为一项明星项目自带光环，还未上线，已吸引了全球数个团队的参与，形成了多个 EOS 社区，eosDAC 就是其中之一（更加紧密的社区），而 21 个节点同样是繁荣 EOS 生态的重要力量，可以提供更多的开发工具，吸引更多的 DAPP 开发人员，从而推动 EOS 不断向前，搞出杀手级应用也不无可能。 良好的空投项目发展可以很好的补充主链的反展。同时促进主链社区的推动。 本文所有内容来自哈胜老师在读书会关于EOS部分的分享。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>BitTiger</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《原则》·塑造你的生活与工作原则]]></title>
    <url>%2Fposts%2F17224%2F</url>
    <content type="text"><![CDATA[读书会 第五十三期·圆桌派第一期 《原则》分享会 本期书籍书名：《原则》 Principles: Life and Work 作者信息瑞·达利欧（Ray Dalio） 对冲基金公司桥水创始人 《福布斯》世界前100名富豪 入选《时代周刊》世界100位最具影响力人物 主要内容 作者一生的智慧结晶 从多角度立体阐述生活、工作、管理原则 适合多层次、多领域的读者 本书的所有原则列表：https://mubu.com/doc/2LfaW-49KA 嘉宾介绍Jasmine在BlackRock从事宏观投资策略分析工作纽约汉服社创始人纽约线下读书会负责人爱生活的杂学家 小分子美国匹兹堡计算生物学PhD在读本科毕业于北大热爱读书与分享微信公众号：“小分子简读” 李然香港国际十大创客GreenSpace AI Lab 创始人CEO前Makeblock 董事 副总裁前FABLAB 联合创始人 CEO6年职业经理人，5年连续创业经历 杨煜 Darren清华-华盛顿大学全球创新学院双硕士学位在读本科毕业于清华计算机系热爱读书、健身、音乐 嘉宾拆书·精华分享《原则》的主要内容是Ray Dalio从三个方面来阐述的。首先是原则的重要性，原则对他本人意味着什么？其次是个人生活经历，从他个人生活提炼出来的原则；最后是他在管理桥水基金的管理原则，主要是他的工作原则。 什么是原则？能帮助你连接到价值观的东西 Ray Dalio认为原则是能帮助你连接到价值观的东西。价值观是每个人认为最重要、最有价值的一个东西，这个东西可以是任何事情，只有我们是拥有原则之后，才能在面对一些重要选择的时候，去遵从内心最坚持的价值观，如果我们没有这些原则的话，可能就会做一些错误的决定。 把原则写下来 Ray Dalio认为每个人都应该把自己的原则写下来，可能你会觉得有很重要的价值观，只是非常感性思考的话，其实它没有真的帮助你，所以把每一个原则都用纸笔写下来，而且一一地把这个逻辑罗列下来。如果爱因斯坦或者一些其他的人，比如乔布斯，他们能把他们的原则也写下来，留给世人的话，这将会是很大的一笔财富。 Ray Dalio成长的故事差等生变学霸Ray Dalio 出生于1949年，是在美国的一个中产阶级家庭长大的，父亲是一名爵士乐手，母亲是普通家庭主妇，从这个单纯的家庭成长环境来看，其实对他取得现在的成就并没有多大帮助。他小时候也和很多普通的调皮的小男孩一样不爱学习，喜欢玩闹，甚至用伪造的身份证去酒吧。除了贪玩，他也承认自己的机械记忆能力很差，记不住学校里要求背的没有内在逻辑的东西，因此在上大学之前他的成绩一直很差，这可能会引起很多人的共鸣，很多人小时候觉得书上的东西没有逻辑且记不住。 和一般小朋友不一样的是，他很有冒险精神，从12岁开始就会用自己在外面打工挣的钱去炒股，也喜欢和朋友一起去海边冲浪，同时也很敢于在市场上冲浪。他身上还有很多闪闪发光的优点，比如他很有好奇心，喜欢琢磨事情，是一个非常独立思考、很有自己主见的人。在本书中也有提到，当他不想做什么事情的时候就会选择抗拒不做，当他决定要做什么很乐意并做那件事情的时候，就没有什么可以阻挡他。 他在大学是主修金融，基于他这样的性格，在学校一直尽情地学习自己感兴趣的东西，毕业以后就顺利地被哈佛商学院录取了。 总结：具有冒险精神和独立思考的品质，且好奇心强。 投资界的乔布斯他和乔布斯都是天才型的人物。 他们有一个共同的习惯：冥想，他认为冥想可以锻炼自己的心性，让他拥有很平静、开放的思维，而且有非常清晰、有创造性的逻辑思考能力。 从个性的角度上讲，Ray Dalio和乔布斯都是不愿意被别人牵着鼻子走的人，喜欢自己发挥自己的想象力，打造一些新奇好玩的东西。 从经历上来讲，他们都是白手起家的企业家，一个人创办了桥水，另一个人创办了苹果公司，都创造和重塑了整个业界创新的产品，都有自己独一无二的管理风格。 在Ray Dalio的心中，乔布斯是一个非常值得敬仰且心心相惜的人，他说桥水是没有办法和苹果公司相提并论的，他自己非常谦虚的说，自己不能和乔布斯相比肩。 总结：有冥想的习惯，想象力丰富，白手起家，最后都创造了辉煌。 好丈夫和好父亲平衡工作和家庭上的方法论。 Ray Dalio是把家庭和事业看得同等重要的人，而且会尽可能的把这两种事情联系在一起，它们是密不可分的。这本书从头到尾都在强调有意义的工作和有意义的人际关系是他两个必需品。它的公司在市场上的冲浪是非常有意义的一个工作；家庭和朋友是值得经营且非常有意义的人际关系。 他妻子叫芭芭拉，他和他妻子认识是在哈佛商学院的时候通过一个聚会经朋友介绍认识的。芭芭拉是一个西班牙女孩，相对来说有一些异域风情，很吸引Ray Dalio的眼球，后来他们相处很愉快，直到结婚生子，从这以后他就扮演着一个好丈夫的角色。他和芭芭拉一共养育了四个孩子，有了孩子后更是极力扮演着一个好父亲的角色。例如出差的时候他会带上孩子们，一来可以帮助孩子们开阔视野；二来会让他和孩子们有更多相处时间。因为他的工作非常繁忙，也有很多出差的机会。他也来过很多次中国，对中国格外的喜欢，曾经让自己年仅11岁的儿子在中国生活了一整年，这段经历对非常年轻的儿子来说，对他整个价值观和人生目标都产生了非常深远的影响。 在关于自己财产的继承上，他希望自己的财产可以保障自己的儿子们有足够的钱享受优质的医疗和教育，同时有一笔启动资金来支持自己就可以了。我们从中可以看到，他是一个很热衷慈善的人，他的大部分钱都会用于做一些慈善公益的项目，甚至会带动自己整个家庭去做慈善。通过这些大量的成长故事，我们认识到，他是一个非常充满好奇心，很有创造力，思维开放，勇于冒险，而且是一个充满温情的好丈夫和好父亲。 总结：家庭与事业同等重要，密不可分。 Ray Dalio的创业经历1975年，创建Bridgewater，主要业务是为公司客户提供汇率和利率的风险管理咨询以及出版名为 “Bridgewater 每日观察” 的每日市场评论； 1987年，Bridgewater 开始从事资产管理业务，当时的规模为 500 万美元； 1991年，桥水设立了旗下第一支旗舰基金——主动型Pure Alpha基金； 时至今日，不到三十年，桥水的资产管理规模增长到起初的接近 4 万倍。 生活原则概述学习自然Ray Dalio想法和老子的“人法地、地法天、天法道、道法自然”不谋而合。他认为我们可以通过理解自然规律，利用自然规律，从而促进我们自身的进化，实现我们的目标。 学习自然首先要去除小我。自然规律，不能站在一个人的角度去定义。而是应该跳出我们小我，站在自然的角度去俯瞰、去找到你，试图去理解整个自然运行的规律。他提供了两个角度，第一个角度是自上而下，自上而下是指采用一种宏观的视角去努力寻找我们身边接触到所有东西背后的唯一驱动原则；第二个角度是自下而上，采用一个微观的视角去研究每种具体情况背后有哪些运行的规则。 关于自然界，我们从自然界中有一些普世的规则，其中有一个给我们启发最大的规律是：整体优化，而不是个体优化。你可能会对发生在你身边或者是你关心的一些人不好的事情不会简单地说这是坏事情或不好的事情，因为它很有可能是对整体是有好处，是一个更好的选择，从时间的维度上也不会再纠结于自己当下一些小的挫败，因为这很有可能是对你将来有帮助的，在你的整个人生阶段它是一个很好的事情。 对很多创业者的启发是：就是不管你想做任何的项目都要考虑更为长远，而且更宏观一点，应该试图找一些能够促进整体进化的项目去做，任何产品组织或者个人都是一样的。曾经的辉煌可能毁于一旦。只有极少数在不断进化、不断适应的强者才能够存活下来，并且一步步地达到更高的高度。 这就告诉我们：要从自然的角度去俯瞰自身，做宇宙中微不足道的一员，然后又以某种非常微弱的方式为整体的进化做贡献。 管理自我首先需要了解自己的人生追求是什么？根据自己的人生追求去设定人生目标，这个时候就需要我们非常诚实的面对自己内心的需求，我们到底想要什么，什么才能使我们快乐呢？ Ray Dalio一生孜孜孜孜不倦追求的是有意义的工作和有意义的人际关系。什么让他快乐？金钱或者名利其实是不能让他快乐或者只能带来一个短期的小小满足，但实际上能持续让你快乐的东西：是净化、是自我提升，这样会让你保持一种兴奋感。 如果找到了什么东西是会让你感觉到快乐，就会知道你的人生目标是什么。设定了目标之后我们也要认识我们自己，要认清自己的优点和缺点，这个过程当中需要注意，人类或者大多数人会有一些大家都有的缺陷，人性的弱点，还会存在一定的思维盲点，很多时候我们可能没有意识到。推荐阅读《人性的弱点》和《思考·快与慢》。需要去直面缺点，而不是逃避缺点。只有突破这两点，才有可能突破自己的心理防线，理性对待自己的缺点，从而达到理性管理自己。 建议大家养成自己的习惯。Ray Dalio 推荐了《习惯的力量》这本书。通过频繁的、反复的练习，几乎是可以养成任何习惯，产生自控力的。我们大脑是具有可塑性的。大脑的可塑性远远超过我们对它的认知，面对一些新的知识新的技能，不要害怕去尝试，只要通过有一定技巧的刻意练习，甚至可以重装你的大脑，改变你的思维。 协调他人取长补短，有机合作 人人和人之间是有非常大的不同，不管是观念、思维、性格还是技能都有很多不同，我们只需要保持一个开放和包容的心态去理解和接纳这些不同，同时客观的看待自己和他人的不同，取长补短，有机合作，借助他人的力量来帮助我们实现自己的目标。 实施方案 对于我们个人不管是生活还是工作来说，可以把你设计成一部机器，在这个机器里它的目的就是为了帮你实现目标，在这个过程中你会设计你实施这个目标的方案，要实施方案需要做到三件事，第一个是尽量的发挥自己的优势；第二是通过养成一些好的习惯，或者是通过其他的方式来修正自己的缺点；第三个是协调他人，通过向他人求助来帮助自己完成目标。 实现目标的五个步骤 设定清楚的目标 发现错误，并面对问题 辨识问题的根本原因 拟订计划先于执行 彻底执行 目标-问题-原因-计划-执行 首先要设立一个非常明确的目标，要达到任何东西都要有一个清晰明确可以执行的目标，然后要发现错误，面对问题，在实现目标的过程中，总会碰到很多问题。比如你想创业有很多阻碍，想做成功一个事情肯定是有重重的困难，困难的可能是外界的也可能是内部的，但是内部的痛苦主要是来源于自己犯的错或者自己的缺点。Ray Dalio认为每个人要能做到非常冷静和非常精准的去分析、去诊断问题。我们要发现错误，并且能根本的、很精确的去诊断错误，而且不能对错误有恐惧感。 错误是对我们最宝贵的一个财富，因为越多的能认识到自己错误的时候，就能更多准确的找到问题，去帮助自己进步。第四步和第五步是拟定一个准确的计划执行。就像在健身房训练自己的肌肉一样，一步步用哑铃去锻炼自己的肌肉，增加哑铃的重量，最后达到个人的成长。最后一步是彻底执行。Ray Dalio强调五个步骤必须界限非常分明。比如首先必须有一个很明确的目标，才可能去找到自己的错误，然后找到自己的错误后才能辨别根本的原因，所以不是可以相互交叠的，必须是一个独立操作的五个步骤。 管理原则概述产生的背景管理原则是相当于桥水基金的一个手册，这个手册是十几年前的时候，每个员工都要发一本，在这个公司里面是大家都需要看的并执行的，大家都要遵守的一些规定。在2010年的时候，他觉得这个管理原则非常的好，想要把它分享给其他人。于是，他把所有的管理原则都放在自己公司网站上，当时大概已经有几百万下载量。 写书的原因Ray Dalio看到有特别多的人下载了他的管理原则，而且收到很多下载了他管理原则的人正面反馈，他觉得有这个责任去把他的原则写成书，让更多的人看到。 管理原则的构成Ray Dalio主要把管理原则分成了三个部分。第一点是强调了正确的企业文化对一个公司的影响；第二点是怎么能找到对的人去帮助形成这样对的企业文化，或者是怎怎么样能找到对的人去帮助推动公司的发展；第三点是建立并不断改进你的“机器”。 Bridgewater的文化： To produce excellent results, meaningful work, and meaningful relationships through radical truth and transparency. Eg：实时打分制； 圆桌派 本书启示&amp;争议 我的原则 本书启示 vs 争议 基于任何事件与问题都完全公开透明的的原则；公司内部人员进行＂球员计分卡＂的评估。Ray Dalio的做法会不会让员工觉得不受尊重以及被羞辱，严重打击公司的士气？ 李然结合实际环境 《原则》的作者，是基于它的文化，基于它的生长环境。这是一个非常西化，非常符合西方价值观的环境，有些原则，需要根据自己的环境来应用。例如我在经营公司的时候，当时我们准备学习Facebook还是Google，有一个AM的环境。在实施的过程中，由于信息带给大家各种差异，每个人认知不一样，对信息的前因后果也没有一个非常好的了解，每个人听到信息之后的反应是不同的。所以，我们在看这本书适用于哪些原则，或者看任何一本书、一些方法论或者哲学思想等，准备用于实践的时候，应该分析一下自己所处的环境在什么程度，非常重要，否则也会适得其反。 环境和沟通的方式 早期在海外工作的时候，跟欧洲、美国的朋友有过这样的工作经历。在中国也有这样的工作经历，我发现很大的不同，一个公司、一个组织或一个团体，有这样一个人，能让所有的人畅所欲言还是比较幸福，大家相信他能够掌握好这个尺度、掌握好这个原则，所以他才可以大胆提出自己的想法。我也观察到，虽然中国文化里大家不习惯当面提出别人的不好，其实在西方文化观念影响下，他们也不会说的很直接，有些话还是不会讲。如果有一个绝对的人，让大家放心，在他的鼓舞下，大家可以做到畅所欲言，对事不对人。因为他们相信有这个人能够平衡大家因此产生的摩擦。回归了到之前的一个观点：当我们的结果跟我们的大脑预期产生冲突的时候，人会产生一些情绪，小到压抑，大到压力，在这样的情绪影响下，他可能就不会表达真正的自我。 实事求是，合理匹配 任何事情要结合当时的环境。例如以前我在公司的时候，管理层有12个人，每周开会，提出了一个原则，可以在任何时间打断任何人的讲话，提出他的问题，以此来促进、提升彼此。我跟CEO在场的情况下，大家会提的比较热烈，因为大家会觉得没关系，我们会解决相关问题，就算财务经理指责供应链经理有问题，或供应链经理指责销售总监有问题，都会有人出面解决。但有时候，当我们不在场的情况下，大家完全不会和气讨论甚至相互攻击。不同认识之下造成信息的不确定性，是有一定风险的，需要酌情来使用。 不仅在我们工作当中，在影视作品中也有表现。最近我看了一部美剧是《迷失太空》，主人公在得知新区要灭亡的一些信息后，考虑是否需要告知大家，最后也没有告诉大家。原因是怕大家产生一些不必要的恐慌，而恐慌带来行为上的差异，就会面临失控状态。虽然这是一部影视作品，但它却真实的反映在我的管理经验中。在这个环境当中，能够掌控环境的发展，或者当环境走向最惨烈、最糟糕的情况，甚至在不能控制的情况下，可以最大限度追求公平公开的原则。如果做不到的话，可以分信息的等级来进行相应释放。在西方的哲学里也有类似体现，在什么样的层级，掌握什么样的信息。从这个角度来讲，看起来好像阶级森严，对人有不同的对待，但有什么样的能力匹配什么样的信息，是非常重要的一件事情。 回顾上周，我建议大家在做认知训练、认知提升的时候，需要一步一步来。如果跨越太大步骤，跳到终极原则，而终极原则是别人建立在他的认知、资源、能力基础之上，你可能没有这样的能力，没办法做出的相应的自我行为调整，就会带来极大的挑战，从而影响你对真正原则的体会和吸收。 关键字：实事求是，结合自己的实际环境去考虑和使用别人的原则或者方法论，让原则落地不能急于求成，要根据自己的认知水平进行判断，同时需要不断的提升自己的认知水平。 小分子自我评估 因为没有正式在公司工作过的经验，可以谈一下看到“球员积分卡”所能想到的事情。这应该是其他员工对自己进行了打分的情况。在我们学校里有「自我评估」，每个学期结束之后会让每个学生自己评估。有没有可能是在别人打分的同时，也让自己对自己有一个自我评价，结合双方结果，再做出一个最后的判断。 学会表达，避免尴尬 关于中美差异，会不会很介意别人指出自己哪个地方做的不好。在和美国人或者我日常环境来看，我们很欢迎别人指出错误，因为是在帮助你进步，很多人也希望别人指出错误。其次，他们指出错误的时候并不是非常直白，或者用伤人的口气说这事做的不对，不应该这么做，而是非常客气、非常有礼貌，会让你觉得很舒服的方式告诉你。例如，他们会先说非常喜欢你完成的部分，从中能学到很多东西，但是某些方面还不够好，如果能够完善一下会更好。他们的表达方式让人觉得容易接受，让人感觉很好，并不会有直接伤人的感觉。 关键字：在进行评判的时候，不仅仅需要给别人一个分数，也给自己实际一个分数，两者进行比较。表达的时候需要有沟通的艺术，学会表达，避免尴尬，给别人一个相对舒服的状态。 Darren我分享一些自己对打分制的看法，因为我是在一个基于项目制的课程中，平时就有很多小组合作的场景，每一门课基本上是一个小组合作完成，正在做一个类似于创业孵化的项目。在这过程中，每一个团队里面人特别少，应当保持一个合作的心态，要保持共赢的一个姿态，去相互交流。在这样一个场景下，实时打分，可能会不是特别好。因为规模比较小，每个人之间要必须要特别信任对方，有什么问题可以直接交流，所以对于小团队的场景达成这样原则可能不太适用。 关键字：小团队更多的是需要相互信任和合作，实时打分不太适合小团体。 对英雄的理解 小分子试炼之路遇到的四种人 英雄成长养成图是我印象非常深刻的一张图。Ray Dalio讲的英雄是他从最开始一个平凡人走上试炼之路过程。在我们日常生活中不管是工作还是学习，都会认为如果起步不够高的情况下，觉得一个平凡人受到一些事情的激励，例如你想达成什么目的，或者谁告诉你，怎么做之后可以达到你想要的东西，让我们受到某种激励去感召，去尝试、去走上一条试炼之路。 在这条路上可能会遇到四种不同的人，第一种是导师，他比你有经验，比你有见识，可以帮助你成长；第二种是盟友，他能和你站在一起成长；第三种是“晚辈”，他们在某个阶段还达不到你这种程度，需要你的帮助；第四种是敌人，他们会阻碍你的成长，会不断磨练你的战斗力。 回报社会，帮助他人 英雄可以缩小到我们每一个人在做任何一件事情都有可能会遇到的状况，在这条路上可能会有成功也会有失败，但是只要朝着一个相对正确的道路，朝着你的目标去走，利用好这四种人，很有可能会走上一个成功的道路。大多数情况下有可能失败，Ray Dalio认为大英雄都有可能会经历一场极大的失败，甚至是深渊。例如，Ray Dalio曾经几乎面临破产;苹果乔布斯有离开过苹果的时候，他们经过一场极大失败之后而成功。这对于我们普通人来说就很可能就再也爬不起来了，但是对于对于有特殊能力、特别坚定毅力或者品格上有异于常人的地方的人，他们会挺过来，从而导致他们韧性和智慧得到一个质的飞跃，整个人得到一种脱胎换骨的改变，就会爬上一个更高的高度。例如Ray Dalio特别强调一点，当他们功成名就的时候，很多人并不是止步不前，或者继续穷其一生往上走。Ray Dalio认为很多英雄到了一定功成名就的阶段，会觉得继续往上走不再是能够让他们兴奋的事情，而更多是想回报社会，回头想一下，在自己非常无助的时候是因为受别人的帮助或者自己的各种经历让自己学到很多，慢慢到了现在的位置，这时，他看到在他后面也有很多人也希望能够达到自己人生的一个高度，他会更想去帮助他们。英雄的循环图里面的后面一段就是回报社会，所以，Ray Dalio很热衷于做慈善，很热衷于给桥水培养新人。 关键字：一个人成功的道路是曲折的，但是成功后会主动回馈和感谢正在曲折道路上的人，帮助他们实现一个高度，也是在回报社会的表现。 李然东西方文化差异原因 造成东西方文化差异不仅是现代经济造成的，它是从人类迁徙开始，随着地理环境变迁，人文因素等造就了特定文化的差异。如果想最快的了解一下原因，可以听一下高晓松的解释。如果想深层次了解，可以读西方哲学和东方哲学，它是从人类迁移就开始叙述和分析的。换一句话说，我们今天形成东西方文化差异比较大的原因，是有它的自然条件以及人文条件，还有各种因素决定的事实。我们不应该去评价好与坏，如果站在时间维度上看的话，好坏并不那么重要。 英雄产生的背景 再回归到这个问题，对英雄的看法，英雄到底是什么？英雄到底是什么样的含义？为什么会有英雄？ 可以看到，从古至今，英雄多数都是从战争中或巨大事件中涌现出来的，中国有句话叫“时势造英雄”，为什么这么说？英雄都是在打仗时候产生的，比如刘备、孙权、刘邦等。包括我们喜欢的漫威电影里的英雄。 从这个角度来说，这个时代是没有所谓战争时代英雄的。因为你不会去领导人在战争中取胜，受大家歌颂；在企业中，有人被塑造成英雄，塑造英雄的是谁？是大众。因为大众心底或者大部分人的心里是期望有这样的英雄，这是一个心理问题。我们对未来都有一定焦虑或恐慌，如果有英雄，或有这样的英雄人物在，我们就会觉得他对我会有较大的帮助。 大家再看英雄的另一面：英雄的个人生活。无论是在影视作品还是人物传记中，英雄的真实生活并没有想象中那么好。换句话说，我们看到的是他非常光辉的一面，做出巨大努力、牺牲的一面。其实当一个普通人面临这样的事情，做出的选择会截然不同。这是为什么现在有一些言论、影视作品也在往这个方向引导。 每个英雄可能跟普通人一样，只是说某些情景造就了他们某些特定的行为，甚至那行为是一个冲动，一个不自知的、下意识的行为，成就了某个非常好的结果，那他可能就会被歌颂。所以，我们追求这样的英雄，其实并不重要，还是要明白自己心里的英雄到底是谁，是什么样子的，想要一个什么样的英雄。怎么成为一个你心里你自己的英雄，我觉得这是接下来要更多思考的，对我们个人比较有用。 关键字：尊重由于各种历史原因、地理因素、人文因素等造成的中西方文化差异；与其相信现有英雄不如搞明白自己的想要成为什么样的英雄并为之努力更为重要。 我的原则分享自己原则或者阅读了《原则》后有什么原则可以分享？ 小分子生活原则 我是一个会把生活当做一个整体的人，会尽可能平衡工作学习或者和朋友、家人的关系以及个人兴趣爱好。比如读书，会尽量的去平衡，把自己当作一个整体来推进，也不会因为是学生在学校除了学习就没有其他的事情可做。会尽力去做到平衡，这是我的第一个原则。 我很赞同一个观点：有意义的人际关系，我自己也是一直在追求这样的人际关系。虽然我们在生活中或者很多社交场合会遇到很多人，可能大家互通联系方式或者打招呼，但是对于我来说，比较看中的是能够深入交流的人，如果发现对方是一个不管关系走的多近，都是一个在表面或者没有敞开心扉交流的人，我不会花很多精力去刻意经营我们之间的关系，或者与你一起敞开心扉的聊生活，聊成长，或者聊对某些问题看法。比如，今晚我们大家一起分享同一本书，我会很认真，因为这是比较有内容、有意义的人际关系。 读书习惯 近几年来，我发现自己不知不觉地养成一些习惯。但我在养成这些习惯之前并没有读过类似于如何养成习惯的书，也没有意识到很多习惯其实是可以养成的。有一些事情是我想去做这件事的时候就开始做，坚持下去，慢慢就成了一种习惯。 例如，我的公众号（小分子简读），它是去年6月份才开始写，在这之前我只是断断续续的读了一些书，并没有形成一个系统化，更没有写读书笔记的动力，所以之前读过的书就容易忘记。于是，我想锻炼自己的写作能力，同时记录自己阅读的书籍、阅读笔记，于是，就开始写公众号。给自己设定了一个每一周都要写一篇文章的目标，慢慢地就养成了读书和写作的习惯。 从目前的效果来看，这个习惯给我带来了很多收获。不管是和大家分享一些书带给我更多视角，还是自己养成了一个写读书笔记的习惯，在这过程中，也认识了很多爱读书的朋友。 锻炼的习惯 我刚上大学的时候，没有规律锻炼的习惯，但是后面我发现，人需要多锻炼。在后面的生活里，我就养成规律锻炼的习惯。 目标总结 很多时候是我们可以想一想自己想做什么事情，在发现做一件事情的意义之后，就朝着想要做这件事情去认真做好，就不知不觉得成为你一个非常好的习惯。 李然自我对这个世界的认知。 有一个非常重要的部分一直驱动着我，从小我有一颗非常强大的好奇心。在《原则》这本书里，它前面讲他个人成就的部分。我不是一个特别喜欢或者经常看成功人物传记的人，因为创业久了之后，发现这些就像大家对英雄的塑造一样，都是因为成功之后来总结的经验，实际当中可能有一些不为人知且非常有价值的节点并没有释放出来，我们并不知道。读了《原则》前半部分后，前三分之一是作者关于他人生的一个描述，这是对我启迪或对我影响最大的一个部分，包括我认识的很多人，或者以我们人类的价值观来评论他是一个成功的人，或者他是一个成功政客，或者他是一个成功企业家，大家都具备一些类似的因素，只是在这样一个因素上，达到的层级可能不同。如果你达到一个小的层级，可能管理你现在的工作，你的家庭生活会比较好。如果把这个所谓的原则应用的好的话，你可能会到更广的一个平台。 大家都有一个共性，都有一颗非常强大的「好奇心」，好奇心会驱使着你去思考。在思考的过程中，会建立更多的认知，更加的独立思考。有一颗好奇心以及独立思考的能力，是一个非常强大的个人原则。支撑这个原则，一定要有一个道德或者价值的平台，好多成就大的人都会有的特质，比较谦逊、心胸开阔。例如Ray Dalio在《原则》开头说到“我是一个愚人”。当我看到这里的时候，我就把“愚人”划下来。我接触过得很多成功的企业家，跟他们有短暂交流后，发现他们都非常谦卑，而且他能够非常耐心地聆听你的讲述，给你一些非常有价值的体验。就像小分子讲到，他可能三言两语就能拨动你一个触动、一个感知。所以基于一颗谦卑跟这种open的心态，保持好奇心，保持独立思考，是比较重要的一个原则。 关键字：独立思考；保持开放清醒的头脑；寻找并发现适合你的事情，并能鼓起勇气这么做。 Darren个人原则是一种习惯、流程和方法 我们在用电脑工作的时候很容易被分散精力。比如收到新邮件通知，或者同学过来临时打扰一下，注意力就被跑偏了。另一个是当我看到别人有什么优点的时候，就想如何才能去学习并养成别人的优点，如何去分析他为什么有这样的优点，并把这个优点就是复制到我的身上。以前我经常总结，用了很简单的方法：用一个笔记本去记录和总结，觉得自己应该要改的习惯。后来发现经常用这个笔记本，很久以前的总结记录就永远被尘封了，从来就没有去看，长时间去写的心得，但是每次去决定要改一个习惯，发现还是做不到，改不了这个习惯。 原则落地 读完《原则》后，我把习惯写成自己生活的原则，当我们去说习惯的时候，可能对我们的这种约束力不是那么强，但是我们把它写成一个原则，在什么时候、什么条件下应该要做什么事情不应该要做什么事情的时候，必须坚持这是一个原则的话，会非常有助于我们克服自己人性的弱点，快速地养成一些优秀习惯，并除掉一些不良习惯。用这样的原则来克服自己人性的弱点，改正你的问题会特别快。例如8个月通过健身瘦47斤。另一个重要性的原因是它可以减少你自己个人决策的时间，可以让你注意力关注到最重要的问题上，减少自己的困惑。例如电脑电脑坏了购买电池的问题。 建立自己原则库 可以把一条条原则列到原则库里面，当下次再遇到类似的情况时可以参考。例如有些东西坏掉的时候，到底应不应该买？怎么样选择？它可以极大的减少决策时间，并做出最正确的决策。经常反思总结，把总结写成原则，可以非常快的修改不良习惯，养成优秀的习惯，减少决策时间。 关键字：个人原则是一种习惯、流程和方法，原则要落地还需要坚持执行。同时建立自己的原则库，需要的时候随时调用，不仅能帮助养成优秀的习惯，同时也能减少决策时间。 原书金句 拥抱现实并与之共存。 Dreams + Reality + Determination = A Successful Life 认清自己，并彻底的敞开心胸(Open-mindedness)。 Pain + Reflection = Progress 抛弃自我意识(ego)与找出盲点(blind spot)。 发现他人的优点与长处，结合并发挥组织的力量。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>BitTiger</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信使用小技巧]]></title>
    <url>%2Fposts%2F56894%2F</url>
    <content type="text"><![CDATA[小技巧，大实用。 微信日常小技巧00 朋友圈文字展示，7行不折叠。 01 査看群里已有哪些好友，通讯录-插 签-新建标签-从群里导入-选择群聊 査看关注同一个公众号的好友数，取消 关注-搜索该公众号。 02 批量査看是否好友，建30人以下群聊 不发消息，这29人不会收到提醒。 03 建单人群（发起群聊-面对面建群，拉两人删除）。 04 査看好友某个时间段朋友圈（搜索-朋 友圈-好友-蹄选）。 05 某条朋友圈互动不再提示 当已点赞或者评论某条朋友圈，朋友们也在下面互动，如果不想收到大量的提醒，iOS用户只要将这条消息向左划然 后选择不再通知就可以，安卓用户则是长按这个提醒，然后选择不再通知。 删除好友后再次添加不会提醒对方长按头像可在群聊里@该用户。 06 朋友圈长按头像可直接设置朋友圈权限 微信发送高清照片，聊天窗口-加号长按相册按钮。 07 微信拍照不自动保存，设置内关掉自动 存储的开关。设置-通用-照片和视频。 08 主页面添加好友，输入 [:recover] ,注意有冒号，就可以进行一些问题的排查修复。 09 长按朋友圈小视频，选择静音播放。 长按朋友圈图片可直接再次编辑朋友圈图片。 10 微信PG端可直接右键消息引用其他人。 11 在微信的拍摄页面，双击屏幕，可以切换前后摄像头 。 12 长按拍照按钮，然后上下滑动手指，可以调节焦距。 13 在手机上删除掉与某人的全部聊天记录 之后，再登陆网页版，还可以看到依据最后聊天时间排序的好友。 14 在二人对话栏里，长按对方的微信头像，对话框里会出现对方的微信昵称。 把gif动图发到微信网页版，可以自动转为动画表情。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[敏捷开发原则]]></title>
    <url>%2Fposts%2F23112333%2F</url>
    <content type="text"><![CDATA[原则只有十二条。 最优先要做的是尽早、持续地交付有价值的软件，让客户满意。 欣然面对需求变化，即使是在开发后期。敏捷过程利用变化为客户维持竞争优势。 频繁地交付可工作的软件，从数周到数月，交付周期越短越好。 在团队内外，面对面交谈是最有效、也是最高效的沟通方式。 在整个项目过程中，业务人员和开发人员必须每天都在一起工作。 以受激励的个体为核心构建项目。为他们提供所需的环境和支持，相信他们可以把工作做好。 可工作的软件是衡量进度的首要标准。 敏捷过程倡导可持续开发。赞助商、开发人员和用户要能够共同、长期维持其步调，稳定向前。 坚持不懈地追求技术卓越和良好的设计，以此增强敏捷的能力。 简单是尽最大可能减少不必要工作的艺术，是敏捷的根本。 最好的架构、需求和设计来自自组织的团队。 团队定期反思如何提升效率，并依此调整自己的行为。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[购买付费软件的一点感想]]></title>
    <url>%2Fposts%2F50238%2F</url>
    <content type="text"><![CDATA[使用付费还免费软件？ 是否应该付费？ 如何选择付费软件？ 付费还是免费？以前我使用Windows的时候，如果遇到付费的软件我都会选择注册机、注册码、破解工具等方式来解决，同时某盘还存了很多的破解的软件或者工具。现在我会逐步选择付费的软件，同时选择同类产品比较好的软件。因为我觉得付费购买是对人家的一种尊重和支持。同理，我是一个开发者，我希望我的作品别人也能够支持，支持别人其实自己也会得到支持。 如何付费？一般会根据自己的需求来判断自己是否需要这个软件的功能，是否能够解决我自己的问题？是否能够满足的我的需要？然后对比同类产品中付费和免费的相关的产品，如果免费的就足够就不需要考虑付费了。例如卸载软件AppCleaner，还有比它更加优秀的产品，但是我选择这个就可以了。同理，如果付费中我能够接受的价格能够满足就可以了，没有必要去选择最贵的活着最好的，主要是最适合自己的。例如剪切板工具有很多，我选择了iPaste，专注于剪切板功能。 选择付费是一种需要，也是一种支持，更是一种态度。 付费软件列表iPhone 软件名 价格(元) Price Tag 30 V2er 8 白描 1+6 熊猫吃短信 1 Picsew 1 凤凰新闻 Pro 1 Holo 0.00 小历 1 落格输入法 3 Piiic 1 iPaste 58.00 TextGrabber 30.00 X.cat Pro 40 Cosmos 0.00 Shu 12.00 鲨鱼记账Pro 1 Mac 软件名 价格(元) Clearview 78 MWeb 98 Yummy FTP Pro 198.00 iPaste 58 Xnip 12/年 Disk Drill 189.00 Total Video Converter 0.00 Folx pro 5 59.00 iStat Menus 6 14.00 暂时就想起来了这么点。。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新浪短地址 API 踩坑记]]></title>
    <url>%2Fposts%2F53970%2F</url>
    <content type="text"><![CDATA[关于 &amp; 符号的坑。 原因因业务需要，需要统计发送的短信中关于链接部分的点击信息。由于公司的域名较长，需要转换一下长地址，因此选择了新浪短地址 API 服务 。 在使用的过程中，发现了一个小问题： 我定义的url是 https://www.abcdefghi.com/event/detail/1488?app=2&amp;uid=131,但是请求完了新浪的 API 后，我的地址发生了变化，为：https://www.abcdefghi.com/event/detail/1488?app=2。实在没有搞明白，在保证代码不错的情况下，进行了排查。 看文档出现问题第一步找文档是我开发的必要原则。 根据文档的提示，对应的代码基本没有问题，细心的我在「请求参数」部分发现了一句话：需要转换的长链接，需要URLencoded。然后我就将URL 进行urlencode,即： 1$curlUrl = urlencode('https://www.abcdefghi.com/event/detail/1488?app=2&amp;uid=131'); 得到的结果就是： 1https%3A%2F%2Fwww.abcdefghi.com%2Fevent%2Fdetail%2F1488%3Fapp%3D2%26uid%3D131 然后发起请求后的结果是： 123456789&#123; "code":true, "msg":"请求成功！", "result":&#123; "error":"Error: Link Forbidden!", "error_code":21506, "request":"/2/sinaurl/public/shorten.json" &#125;&#125; 有点失望了。。但是绝不放弃。 再尝试我发现 API 将 &amp;后面的部分处理了，那我如果将其进行urlencode呢，也就是urlencode(&#39;&amp;&#39;)。说做就做，试试呗。 最后请求成功且转换成功。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>API</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《新生--七年就是一辈子》]]></title>
    <url>%2Fposts%2F15148%2F</url>
    <content type="text"><![CDATA[谁不想进步呢？什么进步不需要方法论呢？没有救世主，就只能自谋出路。哪怕不是路人甲，其实也一样要不断进步，不是吗？本文主要是学习《新生-七年就是一辈子》的阅读笔记。 人生最重要的概念：复利时代我们恰恰活在一个知识变现很容易、且越来越容易、且变现金额越来越大的时代。 践行最根本的学习与创作：践行。想到了，就去做，做到了，才算践行，做不到，没用。 行动想到了，就按照正确的想法做了 ，不管别人是否理解，这就是践行。想到了，学到了，就当真了；当真了，就当真做了，且真的做到了，这才是践行。 赚钱赚钱慢是一种罪，原罪。赚钱一定要快，要快到超越“第二宇宙速度”，不然你飞不出去。 商业计划你的商业计划就是你的赚钱计划。 衡量标准使得衡量商业计划的标准特别简单： 你可能赚到多少钱？你最快多久可能赚到那么多钱？ 主动选择 重生的关键选择衡量一个人是否真正活着的根本方法，就是看他是否有意愿、有能力做出主动的选择。 放纵自己停止嘲弄他人，忘记自己的优点，适当地放纵一下自己。 对比拿着现状与他人相互比较，必然总有这样那样的不足 —— 而比较带来的幸福感，通常也是虚妄的。即便是要比较，那被比较的对象也应该是“自己的现状”和“自己的未来”；而不是“自己的现状”与“别人的现状” 自信衡量一个人是否真正自信，就看他是否能真心为他人的成功而毫无芥蒂地感到高兴。 升级操作系统每个人的大脑里其实都有一个属于自己的操作系统，真的跟计算机一样！每个人都有一套属于自己的输入输出体系（IO 系统），有着一套属于自己的运行处理机制，这世上没有完美的操作系统，我们必须持续地主动升级我们自己。 方法论我们从计算机上可以学到的，其实是极少数极少数聪明人的思维方式和方法论。 类比思维在面对新事物的时候，我总是告诫自己，暂时先克制寻找类比的冲动，因为不恰当的类比还不如没有类比，甚至，不恰当的类比干脆相当于有毒，会麻醉我们的大脑，阻止我们有效地思考。好的、精妙的类比超级炫酷，可还是要小心为妙，因为类比真的影响思维。 应用场景学会任何一个概念、方法论之后，都要问自己：这个道理还能用在什么地方？ 概念概念是一切知识的基石，概念是一切知识架构的基石。 所谓的“独立思考” —— 少有人真正拥有的高级能力 —— 对其最朴素的描述无非是：能够独立地、正确地使用正确的概念。 非议、争论、鄙视链善恶其实是次要的所谓“人人心里有杆秤”——那秤称的其实是强弱。 让自己更强大面对非议的时候，真正要解决的问题不是去辩解，而是想办法让自己变得更强。 起点在起点上，每个人都一样，其实是没多少选择的，其实大多只能是被动状态麽，这很正常。 产品做出真正好的东西，销售就好像是不存在了一样，放在那里就行。 做好产品把东西做到真好，直至最好，其实是最省心、最省时的方法论。 说服别人说服他人有两个重要的终极诀窍：第一个，让对方自己得出结论，而不是把结论塞给对方；第二个，实际上是第一个的升级版：自己成为榜样，对方若是认同，自然就会追随。 解决问题的方法论有些问题是永远解决不了的解决不了的问题就（暂时）别去解决了罢，面对永存问题，尽力就好。 有些问题是不用解决的有些问题，看起来很重要，实际上却没那么重要（不是不重要），把时间花在解决它们身上，实际上是浪费的，效率低下的。 更多情况下，“细节很重要”是用来吓唬那些没做成过事儿甚至压根就没做过事儿的人的。主次不分，是绝大多数人的永存问题。我们不能这样。如果有问题非要解决不可，我们一定要分清楚那里面的主次，把最重要的先做好，这个做到了之后，再去关注细节，而这样的时候也确实有能力关注更细的细节，否则，本末倒置，一无所是。 有些问题可能会自动消失有一点问题就坐立不安的人，本质上只是天真。 有些问题是自己造成的基础很重要！这么朴素、简单、有效的建议，绝大多数人这一生都没听进去过 —— 然后，最令人啼笑皆非的是，一生都要为此付出巨大代价却又从不自知。 有些问题是其他人的问题为什么要坚持锻炼呢？答案是： 本金最重要。 有些问题是所有人的问题坏事发生在自己身上的时候，自己不吱声，希望有人替自己出头，却又完全不知道“替天行道”实际上是成本很高、风险很大的活动……说实话， 这从某个角度望过去，哪儿是天真啊？不仅是自私，还是深刻而隐秘的恶毒。 大多数问题需要特定的人解决所谓的“平和”只不过是认真思考的结果。 惊喜与创造惊喜的方法论你必须相信你自己会有好运的我真的相信惊喜是可以创造的，而且从一开始就笃信这事儿。乐观是一种需要时间、需要耐心才能生成的一种态度。 尽量不做可能倒霉的事情所谓“尽量不做可能倒霉的事情”，其实只不过是打磨自己的逻辑思考能力，使其完善，乃至于你不大可能去做未来可能产生恶果的事情。 保持开放开放就是可以创造好运和惊喜的，无论在哪个领域。 持续学习学习，从来都是创造惊喜、创造好运的最优路径。学习就是反复打磨概念与方法论，等着注定的惊喜注定地发生。 创造更多的连接只有节点多到一定程度，才可能有“意外的连接”出现。认识很多的人，其实是没用的，因为绝大多数人是没有操作系统的，或者即便有，也是过时的操作系统。认识他们没用，不仅没用，甚至是一种罪，因为你在耽误自己可能的效率。 要想办法认识很多真正拥有高效率的操作系统的人。长期以来，我发现外界的定义都是没用的，学历、身份、地位等各种标签，都是除了迷惑他人之外完全没用的东西。到最后，只有一种方式有用：交流。可能是坐下来喝茶，也可能是读对方的文字，更可能是长期观察。甄别出那些有属于自己的高效操作系统的人，甄别出那些愿意打磨自己的操作系统的人，遇到了，必须马上连接。 保留适当的随机在一些时候，在一定程度上，跨越因果思考与判断，在生活、工作、学习中添加一点随机性，就是创造惊喜的方法论。 多管齐下，齐头并进一定要想办法把自己打造成一个多任务操作系统。不要做一个低级的单任务操作系统。通过恰当的统筹，让自己多开几个进程，齐头并进地去做一些事情，永远是提高效率的基本手段。通过恰当的统筹，让自己多开几个进程，齐头并进地去做一些事情，永远是提高效率的基本手段。 而多管齐下，齐头并进，也是创造惊喜的好方法，理由很简单，效率高了，成果就多了，成果这东西，跟之前提到的“连接”啊、“节点”啊一样，越多越好，这些成果本身也是节点，它们之间也会产生连接，最终一样产生聚变，至于能够获得什么，我们还不知道，但我们知道一定会有所获得。 总结：逻辑很重要、概率学很重要、统筹学很重要 如何回避坏运气成功= 技能+运气所谓“运气”，是完全不可控的，它可能是好的，也可能是坏的，也可能是“0”，即，什么影响都没发生。我们不知道它什么时候发生，不知道它是好是坏，也不知道它好坏的程度到底如何；我们只知道最坏的情况下，坏运气可能导致“灭顶之灾”。 与之相对，技能却是可控的通过刻意练习，绝大多数技能都可以获得极大的提高。通过选择来回避坏运气。选择很重要。甚至可以不夸张地讲，人生就是选择。 在“技能-运气”的横轴上，尽量选择去做靠近左端的活动，就是那些更多依赖技能，更少依赖运气的活动。 调整焦点：有一个不可或缺的方法论 很多人输就输在，对于新兴事物，看不见、看不起、看不懂、来不及。把焦点放在大势自身上，而后开始思考，思考的结果常常是一样的：必须跨界 —— 自己手里正在做的事情，常常与那大势完全没有关系，也并不适合与那大势共存。 真正的大势，很少频繁出现，尤其对个体来说，能够感知的大势更少。 我们在自信这件事儿上，关注的焦点更多在于自己的未来 ，而不是，或者不仅仅是自己的过去或者现在。 不能容错的系统肯定是脆弱的容错机制任何一个在现实世界里运转的系统所面对的，必然是一个不完美的、不理想的、各种意外频繁发生的现实世界。我们最好给自己的操作系统设置一定的容错机制。 冗余设计没有冗余度设计的系统，通常不够健壮，不够可靠。冗余设计，就是为了能够让一个机器（或者系统）在非正常情况下也能运转，要把一些关键的组件安放一个以上…… 万一其中一个坏了，机器依然能够正常运转，甚至可以在机器的运转过程中修复或者替换那个坏掉的组件。我们人类自身就是个“冗余度”很好的设计 ，我们有很多重要器官都是有一个以上的，比如肺、肾、手、足等等。所以，摘掉一个肾、断了一只手、少了一条腿、瞎了一只眼、掉了一只耳朵、少了几根手指或者脚趾…… 这些本质上来看都不大影响一个人继续生活。 一切更为健壮的都要耗费更多的成本容错机制的收获有了容错机制之后，最重要的收获是：学习范围广了，思考更为深入了。 为什么一定要自学自学能力是靠积累增强的自学很简单，其实就是不断习得、积累、研究、打磨、升级那些概念和方法论。 融会贯通融会贯通：只有概念多到一定程度的时候，它们之间才有机会产生“意外的连接”。 自学态度自学这事儿， 方法并不首要，首要的是态度。 不同选手“表现型”选手做事常常不是为了自己的进步 ，“进取型”选手做事是为了自己的进步。 为啥人丑就要多读书？所谓的聪明，虽然可能也受先天条件限制，但聪明确实是可积累、可锻炼的。 人们的生活状态发生变化时，基因也会发生变化。 多读书罢，让自己更聪明一点，也为了下一代。 如何真正消化一本书？阅读功利性大多数情况下，阅读并没有功利性。完整性阅读，是没办法有功利性的，因为其实完全没办法知道所读、所学的东西究竟什么时候才能真正发挥它的核能量。 不可替代别人是不可能帮你吃饭的。同样的道理，别人其实是完全没办法帮你读书的。 阅读思路先大致浏览，知道大致的内容和别人对他的评价。拿来一本书，就好像要打一场仗，打仗之前最好先考察一下地形吧？ 同样的道理，拿来一本书，不应该是抓起来就从第一个字开始读起，一直读到最后……应该先看看目录，再看看附录，仔细读读前言，也不妨在网上先扫扫书评，要先大致对这本书有个了解，然后再开始行动比较好。 消化在读的过程中，不断整理这些概念与方法论之间的关系，其实是“消化”的必要过程。一定要用起来。 总结&amp;预期在阅读的过程中，要不断向后总结，向前预期。这是最基本的理解技巧。教是最好的学习方法。 分享的技巧很简单 真诚，只分享自己确实觉得好的东西；也是真诚，绝对不能居高临下地装蛋；还是真诚，对方完全有可能不理解你。这个概念、这个方法论、这个道理、这个知识，还可以用在什么地方？与喜欢学习的人泡在一起。 选书的基本原则出版社锁定领域知名出版社。 作者靠谱的人写的东西靠谱。 版次版次越高越好。 印次印数越大越好。 印数第一版第一次的首印数。 “编”与“著”优选“著作”。 参考文献更多经典书。 其他要点 索引；尽量不读译作；花时间读书评，亚马逊、豆瓣等；看看牛人在读什么？ 什么是更好的知识？有价值的信息才可以算作知识。知识分为两种，无繁殖能力的和有繁殖能力的。科学方法论，就是一种有繁殖能力的知识，也是迄今为止我觉得最有繁殖能力的知识。有繁殖能力的知识： 可以积累，因为它有积累效应必须应用，因为它有指导意义值得传播，因为它可造福大众 活在未来，而不是当下活在未来超越绝大多数人的窍门其实很简单，就是想办法活在未来。 如何活在未来？笃信逻辑。用逻辑去判断明天会发生什么。 凡事均可以预演做事之前常常要在脑子里预演至少一次 。 顺序4、应该是 学习、工作、生活。不是 生活 、工作、学习。 即:按照未来的你所需要的标准去学习、去工作，将会构建一个完全不同的生活。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《构建学习生态--让学习为企业创造价值》]]></title>
    <url>%2Fposts%2F54267%2F</url>
    <content type="text"><![CDATA[学习新生态：万物互联下企业构建的新价值、新物种、新元素；场域人性化：让学习自带势能和自带流量的奥秘；设计产品化：打造连接企业与员工的学习新物种；管理运营化：学习生态的化反及势能转化方法论；机制多样化：路径短但效率高的学习落地模式；IP化学习：定义学习的未来7个方面，重新定义了培训的功能和目的。 第一章 欢迎来到新的学习时代真正影响竞争力的，并不是企业的战略和定位，而是企业变革的速度和质量；并不是企业产品本身，而是产品背后的团队；并不是员工的数量，而是员工的工作状态。 针对这三点对症下药： 一是升级企业管理者的战略能力; 二是提升团队的执行力和战斗力； 三是调整员工的工作状态。以上就是学习为企业创造的价值所在。 何为生态？生态是创造新价值、新物种、新元素。平台：输出价值；连接：生态化反；生成：自动自发。 生态型的组织就需要引导员工认识到，每个部门或者个人不是和别的部门和人掠夺资源而是贡献价值，不会占人便宜而是输出价值，从而聚焦人和资源。 移动互联网时代我们需要的学习是：需要员工共创、自行演绎的运营机制，需要自产于企业、创新于企业、萃取于团队的组织智慧；需要员工之间互动式的社群化学习；需要改变一种学习的思维方式，改变学习的一种心态和心智模式。 第二章 学习生态的五大趋势721模型-以始为终，关注焦点的转换。 工作是创造价值和达成绩效的所在，学习是促进工作完成的因素之一。 学习是价值高且强度大的能力建设模式，培训只是一种方式。 培训是一种活动，方法。 课堂的四大功用：第一，学习知识和技能；第二，建立各种连接；第三，形成粉丝关系；第四，从已知进入为止。 人与人之间最强的关系就是粉丝关系。上课是一个吸粉粉过程。靠培训形成的铁粉往往行动力极强，不用号召自发行动。 动态知识管理的价值就是让知识在工商内部快速萃取，快速传播。 真正与企业内部最相关的知识在网上是找不到的，要将这些知识沉淀到公司内部的平台上。 提升全员整体到综合素质和综合素养，培养员工的整体作战能力。 要求培训工作者需要有产品经理思维模式和运营经理思维模式。 适应环境生存，是人的一种本能的能力。 这个时代需要三轮驱动，老板拼命努力，员工热火朝天，用户出谋划策。 创造连接➕保留人才，人只要能在组织中发挥其需要发挥的作用就可以了。 栽培员工，让他们强大到足以离开。对他们好，好到让他们想要留下来。 良好的用户体验感是培训成功的关键。自由的，协作的环境是相对有效的学习领域。 第三章 学习搭建人性化企业培训需要解决企业面临的问题、提高人的综合素质、解决面向未来的问题。 激活员工， 成为企业战略的奋斗者；激活用户，为企业战略出谋划策；企业内部的学员社群运营非常重要。 企业培训的核心是助力企业经营。 如何激活个体？关键在于管理者要相信高手在民间，员工自己也要相信自己就是那个高手。 一个企业是否有活力就看员工敢不敢在领导面前表达尚不成熟的想法。 第四章 培训设计产品化培训管理=培训产品开发+产品运营。 培训领域的产品经理应该开发出具有产品经理思维的课程、学习平台的产品经理的培养。 产品是场景的解决方案。通过鬼细分人群工作方式的观察，识别出这些具有价值点的场景并提出解决方案。 最有效的获取员工痛点的方式就是想办法深入到业务的一线。 第五章 培训管理运营化带好培训团队的三个阶段。第一阶段：让培训部的同事多干一些脏活和累活。此阶段为树立服务口碑阶段。第二阶段：打造精品品牌。此阶段为精品品牌阶段。第三阶段：一年做20-50精品项目，让相应的业务部门的老大表示感谢。此阶段为“推手”阶段。 第六章 培训机制多样化学习游戏化不是在培训中增加游戏环境，而是丰富学习模式和体验，淡化培训和课堂的概念，让学习者在各种有趣不一样的体验中完成学习。 游戏化学习面临两大挑战(概念认识和游戏认识的心魔)，实现需要四个关键(体验，机制，设计，数据)。 四个关键。体验之美：无障碍，交互性，空间感。机制之美：反馈机制，渐进机制，社交机制，经济机制。设计之美：学习设计方法，设计工具，艺术设计。数据之美：连接数据，呈现数据，评估价值。 学习碎片化。实现方式有：APP，微信，O2O，微课程。 知识基于应用场景实现构建，学与用不再割裂，而是同步进行。 从多平台的分散查找到一句话获得解决方案。 第七章 定义学习到未来二十年来一直有四股力量（IT技术，学习技术，学员习惯，社会学习储备）在影响学习的现在和未来。 跨界学院的目标和宗旨就是把这些主角推动单位，让生态的秩序重构。 企业大学是一个以企业价值为主线，促进可以对内又可以对外的角色，一切目的都是推进企业和业务的发展。 一个好的社群需要注意拉新，活跃，铁粉等四个方面。 培训领域十大发展趋势。UVCA时代重新审视高管培训组织能力需要被重新定义学习文化建设和自驱学习规模化开发QA式学习内容培训管理的垂直细分培训的泛娱乐化和价值化只能时代开启培训新时代培训师向死而生的IP转型培训即将迎来高频组织变革开启培训界的工匠精神 用未来定义未来。进入到未来视角，用未来定义现在。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《正能量--职业经理人的养成》]]></title>
    <url>%2Fposts%2F3923%2F</url>
    <content type="text"><![CDATA[本书是前思科中国区总裁林正刚先生以自己35年职业经历和心得为基础，为职场人倾力打造的一堂职场能量课。 当人们埋头钻研各种职场潜规则、办公室读心术，作者告诉我们最简单最实用的职场能量法则：「能力=心态×沟通×知识」；当人们的脑海渐渐被权力、金钱和欲望占领，作者提醒我们被众多职业经理人遗忘的品格：professional是一种态度。 第1章 我能成为职业经理人吗林正刚是前思科全球副总裁、中国区总裁，现在是企业教练、刚逸领导力公司CEO。这是我第二遍读这本书了，第一次是因为在某平台上听了林老师分享了一节课，有一句话触动了我：「能力=心态x沟通x知识」。然后就买了《正能量》，15年出版了《创能量》，也剁手了。今天我找了和两本书的mobi格式（纸质在家）继续重读。我觉得职业的发展，不同的阶段一定有不同的感悟，不断重复、回头去学习，也应该有不同的收获。所以今天决定在奇遇重读且分享。 职业经理人这个词来自英文中的professional manager一词，其中最重要的是professional，而不是manager。professional对我来说是一种做事的态度，一种做事的原则，一种可以信赖的做人方式。换句话说，不要等成为manager才professional，而是做什么事情都要professional，有了这种心态，才有机会成为manager。所以职业经理人不是一个岗位，不是一种专业认证，是一种态度，关键要看你对工作的态度、对职业的操守以及你是否尊重这个职业。 职业经理人的责任「帮助企业完成它的使命」。 职业经理人必备的基础素质：“可靠”(合格的跟进能力)。 职业经理人必备的重要的工作态度：主动了解自己可以做什么来帮助公司达到目标，具有事事主动精神。 职业经理人基本守则：对企业忠诚。 能力=能力=心态x沟通x知识。 员工入职后不断找新公司的缺点，提旧公司的好处，这样的心态不正是不可取的。 公司属于团队作战，能力不错，知识面广，但是沟通成本高，会直接影响工作表现。 一个人的知识没有“够了”一说，要有终身学习的态度。 没有正确的心态，你就无法学到东西，没有一定的沟通技巧，就无法把能力发挥出来。能够运用你懂得的知识给公司创造价值，才是真正的能力。 第2章 心态：职业经理人的内功我认为做人要争取主动，心态是主动的，情绪则是被动的。心态是思维习惯的结果，要培养健康的心态，就要养成健康的思维习惯。一切从自己的思维习惯开始，如果我们的思维习惯是消极的，凡事从负面的角度去想，行为也会表现得很消极，对一切事物都不感兴趣，觉得一切事情都没有希望；反过来，如果你是一个心态很积极的人，你的行为也一定充满活力，给人带来很阳光的感觉。 成长心态的人相信聪明才智是可以积累的，通过努力，人的能力是可以不断提升的。 改变的过程真不容易，面临的考验包括你的耐性、包容、信任、聆听和授权等。 求同存异是一种合力。内耗是不可以接受的浪费。我们每个人都需要抱着求同存异的心态跟其他人合作，才能将我们的生产力发挥到最大化。 心态决定职场环境。无论是什么岗位，我第一件事就是搞清楚公司对我的要求，然后将这个要求转化成我自己的工作理想。这就解决了“我为什么要做”这个问题，因为是我自己的理想，所以就很有动力，很快就进入“怎样去做”的思考阶段，然后就去“执行”。 把“需要”的事变成“喜欢”的事。你喜欢做的事却不是需要做的事。在分配时间的时候，很多人都会先做喜欢做的事，需要做的事却会排到最后，到了非做不可的时候才做。所以最后该做的事情都没做好，更加没机会做自己喜欢的事了。如果一件事情你能做得很好，你就会喜欢做，有点像良性循环，感觉越好你就越想做。但如果一件事你总是做不好，你一定不会喜欢做。所以关键就是努力将你需要做的事做好，慢慢地你就会爱上需要做的事。 当你把客户的成功当成自己的成功，真心帮助你的客户成功，那就一定能赢得客户的心。赢得客户的心，就是你个人的起点。 世界上没有绝对做不到的事，只不过还没找到正确的方法。与其抱怨指标太高，不如想想如何达到，这种心态会让你收获更多。 任何一个岗位都要做销售。企业有必要将销售意识推广到每个部门、每个岗位，因为每个部门、每个岗位都是改善客户整体体验的一部分。 后勤应该跑到最前线。每个部门都是企业价值链的一部分，没有前后之分。如果能多用主动的心态去做事，相信会给企业带来不少惊喜，员工也会有更多满足感。 沟通不仅仅是说话。一次完整的沟通当中，有70%是语气和肢体语言，实际的说话内容只占30%。换句话说，如果你的语气、肢体语言引起对方的反感，那你说话的内容就没有什么意义了。不论穿着也好，动作也好，都是无声的语言，稍不注意就会“胡说八道”，导致沟通失败。 尊重没有贵贱之分。真正有修养的人对待别人的方式，不会因为对方的高低贵贱而不同，对待基层工作人员更要表现你的尊重。 讲话不是艺术史沟通。语言是用来沟通的，听懂是基本要求，如果你讲话连对方听懂都做不到，就是“沟而不通”，等于浪费时间。 负责的问问题。问题的答案是否有质量，要看问题问得是否到位，一个没有质量的问题必然会得到一个没有质量的答案。一个有质量的问题是经过自己思考、用心去问的结果。问题应该是具体的，要让对方听懂，也能回答，出发点是将自己存疑的地方搞清楚。善于提问是学会聆听的一部分，也是让沟通持续下去的良好开端。 多说好话不是虚伪。跟人沟通的时候，要多注意对方的优点，不要整天注意别人的缺点，因为没有一个人愿意听你说他的缺点。如果你总是说别人的缺点，你会不讨人喜欢。如果大家都讨厌你、避开你，最后就没办法和别人沟通。 会讲故事更有说服力。我们要习惯通过讲故事的形式来传达信息。面试的过程也一样，面试最重要的就是建立双方面的互信，所以讲话不能吹牛，不要泛泛而谈，要用细节来说明你是亲身经历过的，如果在回答问题时用具体案例（亲历的简短故事）作说明，就更具说服力。 第3章 沟通：职业经理人的基本功没意见才是最大的风险。一个公司如果没有人敢提出不同意见，其实是有很大风险的。所以，虽然最后的结果可能是一样的，但是你多听了一两个意见，这对你以后的决定会有很大的帮助。 不再惧怕打cold call。打cold call是一种很好的锻炼沟通能力和心理素质的方法，因为通常你不认识对方，不知道他的脾气，不知道他会如何回答你。压力的确很大，但最坏又能怎样，最多就是对方挂电话而已。道理大家都知道，但每次想到cold call，电话就会突然变成千斤之物，所以我对打cold call的业务员特别同情。但是如果你积累了很多次打cold call的经验，以后就不会再害怕了，你的沟通能力和心理素质都会有很大提升。 零反馈是沟通杀手。零反馈是沟通的第一大杀手，每个人都希望得到别人的倾听和肯定。当然，给予反馈并不局限于用语言来表达，别忘了，沟通当中有70%是语气和肢体语言的沟通。别人说话的时候，我们应该学着通过肢体语言来告诉对方你已经听到，而且有兴趣听下去，比如身体前倾、适时地点头和微笑，最关键是要让对方感觉到你在用心聆听。如果对方有很多话要说，你只需要用肢体语言来鼓励他，适当的时候用简单的语言总结一下，确保他不会跑题，但千万不要随意打断对方。 别拿亲近的人出气。每个人都会有心情不好的时候，你可以将心里的不愉快说出来，但是不要骂别人、拿别人出气。最亲近的人不是你出气的对象，你可以跟他分享心里的郁闷，但不能用迁怒的方式来表达，直接说出心中的烦恼或许是更好的方式。 批评要用正面的表达。批评是一种效率很低的沟通手段，它只能做到： 令对方从冷静变为情绪化； 发泄情绪，通过批评别人来证明你高人一等； 将一个很理性的讨论变为情绪的碰撞。 沟通就是执行力。团队成员之间的默契是企业获得成功的基础，而良好的沟通机制则是建立默契的关键。而且，要将沟通机制运用于从基层到高层的所有员工，建立开放而双向的沟通环境，才能使企业具备强有力的执行力。 一个部门里面我会跟数位员工沟通，将听到的情况做个总结，然后与部门的直接领导沟通，要求他对员工提出的意见做出一个判断，并做出一个行动计划来满足一部分合理要求，与员工沟通并执行到底。 和高管沟通时，要说清楚三点：第一，你想和他沟通的问题是什么，要描述清楚，要具体；第二，你的解决方案是什么，不要将问题扔过去，如果你有足够的时间，最好提出一两个具体方案供他选择；第三，你需要他怎么帮忙。 管理层、策略层需要有一个沟通的平台、沟通的工具，让决策者将他们的意见充分地交流，然后得出一个最适当的、在当时是最优的策略。 表扬对方时，人越多的地方越好，但要批评的话，一定要关起门来，否则即便出发点再正确，对方也会认为你是有意让他下不了台。 第4章 知识：职业经理人的套路摆正学习的心态“雷达”。心态就像一个人的“雷达”。同样一句话，如果你心态很正，就能学到很多东西；如果心态没有摆正，听再多的话也得不到好处。 宁做学生，不做老师。我很喜欢无知的感觉，无知让我们对很多事情产生兴趣、保持学习的欲望，是一件很愉快的事情。 “敢”思考比正确答案更重要。 学习的四个阶段：吸收-消化-时间-反馈。 什么是吸收？就是当你看了一本书，或听了一堂课，你认为你听懂了，那就是吸收。 什么是消化？就是能够将你听懂或看懂的东西与过去的人生经验联系起来，并有所启发。 什么是实践？这个就很明显了，就是将你得到的新知识付诸行动。 什么是反馈？在实践的过程中，你会不断修正自己对这个新知识的理解。 没有实践等于零。如果不自己动过手、动过脑，你永远都学不会。讲十遍不如体验一遍。 实践与反馈的良性循环。通过实践提出问题，让别人做你的镜子，以便你调整做事情的方法，最后再去实践，检验新的方法是否可行，这就形成一个良性循环，也只有这样才会不断进步。 有目标的阅读。先看它的定义，将它和我过去的经历联系在一起，我觉得这个定义我可以接受，也可以用。但是最重要的不光是接受一个定义，而是思考这个东西在企业运营中怎么用，在什么时候用。 写在纸上的想法更有力量。要将问题清晰化，可以分为四个步骤： 将收集到的事实写下来； 分析事实，你的问题是到底什么； 根据清晰的问题定义来拟定解决方案； 选择最优解决方案，然后执行。 改变环境就能改变行为。例如买kindle，不带 ipad。强迫自己。 找准自己的思维特点。管理者的沟通方式和思维方法往往会影响到他的整个管理风格。 第5章 管理：和员工一起成功管理事情，领导心态。领导力最重要的表现就是，能够让别人做出跟随自己的行动。 管理就是做人，先管好自己。领导者跟管理者最大的区别就在于注意力，管理者是将注意力放在对方身上，领导者是将注意力放在自己身上。 做管理不能有明星心态。基层员工和管理者最大的区别就在于心态。作为一名基层员工，你赢了就是赢了，功劳是你的，你就是明星。但是作为管理者，千万不能有明星心态，而是要推举幕后的人，也就是你的下属，他们每一个人都是你的明星。 管理的三个层面：策略、计划与执行。第一个就是策略层，也就是拟定公司的发展方向。第二个就是计划层。公司有了方向之后，需要一个具体的计划来实现目标。第三个就是执行层了。有了计划之后不去执行，还是等于白说。 老板不应该给下属压力。压力其实来自于一个人对工作负责任的态度，如果这个人对工作不负责，给他施加压力效果也不大。如果是一个负责任的员工，老板基本上不需要给他压力，而应该给他鼓励。因为他在外面面对的各种压力已经够大的了，回到公司还要承受来自老板的压力，实在没有必要。 鼓励一定比惩罚好。不要光是建立惩罚的机制，更重要的是建立一些鼓励的机制。你要找出一些积极的、你希望发生在员工身上的行为，然后通过绩效评估去鼓励这些行为。大部分情况下都应该鼓励员工，惩罚只是在需要的时候才拿出来用，绝对不能成为唯一的方法。我希望每一位职业经理人都记住，在企业管理中，鼓励一定比惩罚好。 不做没有结果的计划。第一，年度计划只是我们市场部的一个重点任务，公司并没有将它纳入到管理机制里。举个例子，我做出来的市场计划跟销售部门的计划完全不挂钩，没有任何关系。因此我想做什么市场活动，没有销售去跟进，也没有销售去配合，这不是浪费时间吗？第二，年度计划不涉及绩效评估。就是说，我做出来的计划没有人去执行，因为没有人需要它，它不在任何人的绩效评估里面，所以这个计划是没有用的。第三，做年度计划只是出于一种习惯，而不是真的需要。当时做计划的时候，完全就是为了做计划而做计划，是一种工作习惯，就像交作业一样，从来没问过这个计划到底有什么用。 给你认为对的人一个机会。 员工犯错不一定是坏事。员工犯错，管理者应该正确地引导，如果你总是破口大骂，以后员工只会将错误藏起来，那么你就永远没有机会真正意识到并解决这些问题。不要忘记，你最终的目的是解决问题，而不是惩罚犯错的员工，因为惩罚本身对改善业务流程没有任何帮助。 有用的销售指标。 第6章 职场 营造理想的工作环境领导第一件事：与员工分享愿景。就是愿景分享，就是将他的愿景、目标与他的团队分享。很多企业家都有宏大的企业愿景，可惜没有好好地跟员工分享。企业激励员工最好的方法就是让员工看到企业的发展前景，企业的机会就是员工的发展机会，只要他们看到这个方向，就会成为他们的动力。所以愿景分享很重要，企业家就是传教者，企业管理的第一个问题就是愿景分享，关键词是分享（shared）。 打造企业文化要亲力亲为。企业文化是一个企业的灵魂，企业文化支配着企业的行为，企业家的一个很重要的工作就是弘扬企业文化。建立企业文化是一把手工程，不能交给别人，所以要求管理者必须亲力亲为。 说出来是口号，体验到才是文化。 No Wrong Answer。没有答案只是说明你连思考问题的精力也不愿意投入，如果用心去思考问题，不可能一个答案都拿不出来。 写一个大大的“诚”字。我们在宣传企业文化的时候，一定要很清晰地将抽象的词汇用具体的行为描述出来，这样才能统一企业的“语言”，达到应有的效果。 小心规范化变官僚化。企业管理要提防一点，规范化是好事，但是如果不注意定期检视和修正，慢慢地就会形成官僚的体系。 如何避免“上有政策，下有对策”。 如果有这种问题，领导要负起责任。因为出现这种情况是因为员工没有机会，或者没有渠道指出公司的做法有不合理之处，所以才出此“下策”。要避免这种情况，就要建立一个宽松的环境，和团队一起讨论、研究，然后再做出计划，这样大家就能齐心协力地去执行了。 游戏规则是减少矛盾的基础。管理者一定要将游戏规则定好。 不合理行为往往源自不合理的机制。如果企业里面有些员工的行为令你不太满意，在你责问、批评员工之前，要先看一下他的绩效评估，了解他的绩效评估机制以及激励机制是怎么定的。看完之后，你再分析为什么会出现问题，90%的情况下，你都可以从中找到答案，不合理的激励机制通常就是这些不合理行为的成因。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web API 的确认清单]]></title>
    <url>%2Fposts%2F44375%2F</url>
    <content type="text"><![CDATA[阅读《Web API 设计与开发》笔记。 清单列表 URI 是否短小且容易输入 URI 是否能让人一眼看懂 URI 是否只有小写字母组成 URI 是否容易修改 URI 是否反映了服务器端的架构 URI 规则是否统一 有没有使用合适的 HTTP 方法 URI 里用到的单词所表示的意思是否和大部分API相同 URI 里用到的名词是否采用了复数形式 URI 里有没有空格符及需要编码的字符 URI 里的单词和单词之间有没有使用连接符 分页的设计是否恰当 登录有没有使用 OAuth2.0 响应数据格式有没有使用JSON 作为默认格式 是否支持通过查询参数来指定数据格式 是否支持不必要的 JSONP 响应数据的内容能不能从客户端指定 响应数据中是否存在不必要的封装 响应数据的结构有没有尽量做到扁平化 响应数据有没有用对象来描述，而不是用数组 响应数据的名称所选用的单词的意思是否和大部分API 相同 响应数据的名称有没有用尽可能少的单词来描述 响应数据的名称由多个单词连接而成时，连接方法在整个 API 里是否一致 响应数据的名称有没有使用奇怪的缩写形式 响应数据的名称的单复数形式是否和数据内容相一致 出错时响应数据中是否包含有助于客户端剖析原因的信息 出错时有没有返回 HTML 数据 有没有返回合适的状态码 服务器端在维护时有没有返回503状态码 有没有返回合适的媒体类型 必要时能不能支持 CORS 有没有返回 Cache-Control、ETag、Last- Modified、Vary 等首部以便客户端采用合适的缓存策略 不想缓存的数据有没有添加 Cache-Control:no -cache 首部信息 有没有对API进行版本管理 API版本的命名有没有遵循语义化版本控制规范 有没有在URI里嵌入主版本编号，并且能够让人一目了然 有没有考虑API终止提供时的相关事项 有没有在文档里明确注明API的最低提供期限 有没有使用 HTTPS 来提供 API 有没有认真执行JSON 转义 能不能识别 X-Requested-With 首部，让浏览器无法通过SCRIPT 元素读取JSON 数据 通过浏览器访问的 API 有没有使用 XSRF token API在接收参数时有没有仔细检查非法的参数（负数等） 有没有做到即使请求重复发送，数据也不会多次更新 有没有在响应消息里添加各种增强安全性的首部 有没有实施访问限速 对预想的用例来说限速的次数有没有设置得过少]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础篇|PHP如何解决网站大流量和高并发]]></title>
    <url>%2Fposts%2F16446%2F</url>
    <content type="text"><![CDATA[基础篇 高并发架构基础概念和优化思路 高并发架构相关概念并发，在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在处理机上运行 通常我们所定义的高并发并非上述解释，简单的来说就是在某个时间点、有多少个访问同时到来。 高并发：通常如果一个日PV在千万以上，就有可能是一个高并发的系统 QPS:每秒钟请求或查询的数量，在互联网领域，指每秒响应请求数（HTTP请求） 吞吐量：单位时间内处理的请求数量（通常由QPS和并发数决定） 响应时间：从请求发出到收到响应花费的时间。例如系统处理一个HTTP请求需要10s，这个10s就是响应时间 PV：综合浏览量（Page View）,即页面浏览量或者点击量，一个访客在24小时内访问的页面数量 UV：独立访客（UniQue Visitor），即一定时间范围内相同访客多次访问网站，只计算为1个独立访客 带宽：计算带宽大小需关注两个指标，峰值流量和页面的平均大小 日网站带宽 = PV / 统计时间（秒）x 平均页面大小（KB） x 8 峰值是平均值的倍数，根据实际情况来定 QPS VS 并发连接数 QPS 不等于并发连接数 QPS 是每秒 HTTP 请求数量，并发连接数是系统同时处理的请求数量 （总 PV 数 x 80%)1 (6 小时秒数 x 20%) = 峰值每秒请求数（QPS) 80%的访问量主要集中在20%的时间 压力测试目的：测试能承受的最大并发 和 测试最大承受的QPS 常用性能测试工具 ab、wrk、http_ load. Web Bench、Siege、Apache JMeter Ab 全称是 apache benchmark，是 apache 官方推出的工具 创建多个并发访问线程，模拟多个访问者同时对某一 URL 地址进行访问。它的测试目标是基于 URL 的，因此，它既可以用来测试 apache 的负载压力，也可以测试 nginx、lighthttp、 Tomcat、IIS 等其它 Web 服务器的压力。 Ab的使用 模拟并发请求 100 次，总共请求 5000 次 ；Ab-c 100 -n 5000 待测试网站 注意事项 测试机器与被测试机器分开;不要对线上服务做压力测试;观察(top)测试工具 ab 所在机器以及被测试的前端机的 CPU，内存，网络等都不超过最高限度的75%。 QPS 达到极限的解决方案随着 QPS 的增长，每个阶段需要根据实际情况来进行优化，优化的方案也与硬件条件、网络带宽息息相关。 QPS达到50基本不需要优化。 QPS 达到 100假设关系型数据库的每次请求在 0.01 秒完成 假设单页面只有一个 SQL 查询，那么 100 QPS 意味着 1 秒钟完成 100 次请求，但是此时我们并不能保证数据库查询能完成 100 次。 方案：数据库缓存层、数据库的负载均衡 QPS 达到 800假设我们使用百兆带宽，意味着网站出口的实际带宽是 8 M 左右 假设每个页面只有 10 K，在这个并发条件下，百兆带宽已经吃完方案：CDN 加速、负载均衡 QPS 达到 1000假设使用 Memcache 绶存数据库查询数据，每个页面对 Memcache 的请求远大于直接对 DB 的请求 Memcache 的悲观并发数在 2 w 左右，但有可能在之前内网带宽已经吃光，表现出不稳定 方案：静态 HTML 缓存 QPS 达到 2000这个级别下，文件系统访向锁都成为了灾难 方案：做业务分离，分布式存储 高并发解决方案案例流量优化 防盗链处理 前端优化 减少HTTP请求；例如合并CSS js，图片添加异步请求；延迟加载暂时不需要的内容启用浏览器缓存和文件压缩；CDN加速；建立独立的图片服务器； 服务端优化 页面静态化；并发处理；队列处理 数据库优化 数据库缓存；分库分表、分区操作；读写分离；负载均衡 Web服务器优化 负载均衡 本文的学习笔记来自于在imooc学习。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>高并发</tag>
        <tag>大流量</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据之用爬虫测试网站|第11天]]></title>
    <url>%2Fposts%2F62394%2F</url>
    <content type="text"><![CDATA[测试的简介； Selenium单元测试和Python单元测试; 测试简介运行一套测试方法能够保证你的代码按照既定的目标运行，不仅可以节约你的时间，减少你对bug 的忧虑，还可以让新版本升级变得更加简单。 单元测试的特点： 每个单元测试用于测试一个零件(component)功能的一个方面。 每个单元测试都可以完全独立地运行，一个单元测试需要的所有启动(setup)和卸载 (teardown)都必须通过这单元测试本身去处理。单元测试不能对其他测试造成干扰，而且不论按何种顺序排列，它们都必须能够正常地运行。 每个单元测试通常至少包含一个断言(assertion)。 单元测试与生产代码是分离的。 Python单元测试Python的单元测试模块unittest，所有标准版Python安装后都有。例如： 123456789101112import unittestclass TestAddition(unittest.TestCase): def setUp(self): print("Setting up the test") def tearDown(self): print("Tearing down the test") def test_twoPlusTwo(self): total = 2+2 self.assertEqual(4, total)if __name__ == '__main__': unittest.main() setUp()和tearDown()在每个测试的开始和结束都会运行一次，而不是把类中所有测试作为一个整体在开始或结束时各运行一次。 Selenium单元测试Selenium 不要求单元测试必须是类的一个函数，它的 “断言”语句也不需要括号，而且测试通过的话不会有提示，只有当测试失败时才会产生信息提示: 1234driver = webdriver.PhantomJS()driver.get("http://en.wikipedia.org/wiki/Monty_Python")assert "Monty Python" in driver.titledriver.close() 写 Selenium 单元测试的时候需要比写 Python 单元测试更加随意，断言语句甚至可以整合到生产代码中，非常适合某些条件不能满足就中断代码的需求。 Python单元测试与Selenium单元测试的选择Selenium 可以轻易地获取网站的信息，而单元测试可以评估这些信息是否满足通过测试的条件。因此，你没有理由拒绝把 Selenium 导入 Python的单元测试，两者组合是最佳拍档。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据采集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之图像识别与文字处理|第10天]]></title>
    <url>%2Fposts%2F55181%2F</url>
    <content type="text"><![CDATA[图像识别与文字处理； 使用Pillow库和Tesseract。 图像识别与文字处理将图像翻译成文字一般被称为光学文字识别(Optical Character Recognition，OCR)。可以实现 OCR 的底层库并不多，目前很多库都是使用共同的几个底层 OCR 库，或者是在上面进行定制。 OCR库概述Python常用的OCR库有两个：Pillow 和 Tesseract。每个库都可以从它们的网站上下载并安装(http://pillow.readthedocs.org/installation.html 和https://pypi.python.org/pypi/pytesseract)，或者用第三方管理器(像 pip)通过“pillow”和 “pytesseract”进行安装。 PillowPillow 是从 Python 2.x版本的 Python图像库(Python Imaging Library，PIL)分出来的，支持Python 3.x版本。和PIL一样，Pillow也可以轻松地导入代码，并通过大量的过滤、修饰甚至像素级的变换操作处理图片: 123456from PIL import Image,ImageFilterkitten = Image.open("demo.jpg")#打开图片blurryKitten = kitten.filter(Imagefilter.GaussianBlur)blurryKitten.save("demo_two.jpg")#另存为blurryKitten.show() TesseractTesseract 是目前公认最优秀、最精确的开源 OCR 系统。Tesseract 也具有很高的灵活性。它可以通过训练识别出任何字体，也可以识别出任何Unicode字符。 Tesseract 是一个 Python的命令行工具，不是通过 import语句导入的库。安装之后，要用 tesseract 命令在Python的外面运行。 安装 Tesseract Windows:点击下载安装 Linux:sudo apt-get tessertact-ocr Mac: brew install tesseract;也可以下载源码安装 NumPyNumPy 是一个非常强大的库，具有大量线性代数 以及大规模科学计算的方法。因为NumPy可以用数学方法把图片表示成巨大的像素数组，所以它可以流畅地配合 Tesseract 完成任务。 NumPy 可以通过第三方包管理器(比如 pip)来安装:pip install numpy 处理格式规范的文字例如通过运行Tesseract，读取文件并把结果写到一个文本文件中: 1tesseract text.tif textoutput | cat test.txt Tesseract 最大的缺点是对渐变背景色的处理。利用Pillow 库，我们可以创建一个阈值过滤器来去掉渐变的背景色，只把文字留下来，从而让图片更加清晰，便于 Tesseract 读取: 123456789101112131415from PIL import Imageimport subprocessdef cleanFile(filePath, newFilePath): image = Image.open(filePath) # 对图片进行阈值过滤，然后保存 image = image.point(lambda x: 0 if x&lt;143 else 255) image.save(newFilePath) # 调用系统的tesseract命令对图片进行OCR识别 subprocess.call(["tesseract", newFilePath, "output"]) # 打开文件读取结果 outputFile = open("output.txt", 'r') print(outputFile.read()) outputFile.close()cleanFile("text_2.jpg", "text_2_clean.png") 在提交给 Tesseract 处理之前，那些带标题的、带有大片空白的图片，或者有其他问题的图 片，都应该做预处理。 今天的内容没有特别难，我写的比较简单，爬取网络的图片和验证码识别还没写，先从简单的消化。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据采集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之采集JavaScript|第09天]]></title>
    <url>%2Fposts%2F12496%2F</url>
    <content type="text"><![CDATA[了解JavaScript； 使用selenium库和phantomjs。 采集JavaScript客户端脚本语言是运行在浏览器而非服务器上的语言。客户端语言成功的前提是浏览器拥有正确地解释和执行这类语言的能力。 到目前为止，JavaScript 是网络上最常用也是支持者最多的客户端脚本语言。它可以收集 用户的跟踪数据，不需要重载页面直接提交表单，在页面嵌入多媒体文件，甚至运行网页游戏。那些看起来非常简单的页面背后通常使用了许多 JavaScript 文件。 例如： 123&lt;script type="text/javascript" &gt; alert("这是一个JavaScript的文件！")&lt;script&gt; JavaScript简介几个关键字了解一下：弱类型语言，其他语言有的基本都有。JavaScript里所有的变量都用 var关键词字进行定义，可以把函数作为变量使用。 1234567891011121314&lt;script&gt; var fibonacci = function() &#123; var a = 1; var b = 1; return function() &#123; var temp = b; b = a + b; a = temp; return b; &#125; &#125;var fibInstance = fibonacci();console.log(fibInstance()+" is in the Fibonacci sequence");console.log(fibInstance()+" is in the Fibonacci sequence");console.log(fibInstance()+" is in the Fibonacci sequence"); &lt;/script&gt; 上面的例子看一下就好，熟悉一下就可以，就是这么简单。 常用的JavaScript库有很多。例如jQuery,Google Analytics,React等等，了解一下。 Ajax和动态HTML与网站服务器通信的唯一方式，就是发出HTTP请求获取新页面,如果提交表单之后，或从服务器获取信息之后，网站的页面不需要重新刷新，那么你访问的网站就在用Ajax 技术。 Ajax全称是Asynchronous JavaScript and XML(异步 JavaScript和 XML)，网站不需要使用单独的页面请求就可以和网络服务器进行交互 (收发信息)。 在Python中用Selenium执行JavaScriptSelenium是一个强大的网络数据采集工具，其最初是为网站自动化测试而开发的。近几年，它还被广泛用于获取精确的网站快照，因为它们可以直接运行在浏览器上。Selenium可以让浏览器自动加载页面，获取需要的数据，甚至页面截屏，或者判断网站上某些动作是否发生。Selenium 自己不带浏览器，它需要与第三方浏览器结合在一起使用。 我们可以用一个叫PhantomJS的工具代替真实的浏览器。PhantomJS 是一个“无头”(headless)浏览器。它会把网站加载到内存并执行页面上的 JavaScript，但是它不会向用户展示网页的图形界面。把 Selenium和 PhantomJS 结合在一 起，就可以运行一个非常强大的网络爬虫了，可以处理 cookie、JavaScrip、header，以及任何你需要做的事情。 安装Selenium可以去其官网下载安装，也可以直接pip来安装这个库，非常简单。但是PhantomJS不是库，不能直接用pip安装，可以直接去官网下载页面下载安装，同时如果你是Mac的用户可以通过homebrew安装： 1brew install phantomjs Selenium 库是一个在 WebDriver 上调用的 API。WebDriver 有点儿像可以加载网站的浏览器，但是它也可以像 BeautifulSoup 对象一样用来查找页面元素，与页面上的元素进行交互 (发送文本、点击等)，以及执行其他动作来运行网络爬虫。 12345678from selenium import webdriverimport timedriver = webdriver.PhantomJS(executable_path='/usr/local/Cellar/phantomjs/2.1.1/bin/phantomjs') #创建了一个新的Selenium WebDriver，需要指定自己的phantomjs路径driver.get("http://pythonscraping.com/pages/javascript/ajaxDemo.html") #用WebDriver加载页面time.sleep(3) #暂停3秒执行print(driver.find_element_by_id('content').text) #查看页面内容driver.close() 处理重定向客户端重定向是在服务器将页面内容发送到浏览器之前，由浏览器执行 JavaScript 完成的 页面跳转，而不是服务器完成的跳转。当使用浏览器访问页面的时候，有时很难区分这两种重定向。由于客户端重定向执行很快，加载页面时你甚至感觉不到任何延迟，所以会让你觉得这个重定向就是一个服务器端重定向。 服务端重定向可以通过urllib库来解决，但是客户端的重定向不能这样处理。Selenium 可以执行这种 JavaScript 重定向，和它处理其他 JavaScript 的方式一样;但是这类重定向的主要问题是什么时候停止页面监控，也就是说，怎么识别一个页面已经完成重定向。 我们可以用一种智能的方法来检测客户端重定向是否完成，首先从页面开始加载 时就“监视”DOM 中的一个元素，然后重复调用这个元素直到 Selenium 抛出一个StaleElementReferenceException 异常;也就是说，元素不在页面的 DOM 里了，说明这时网站已经跳转: 1234567891011121314151617181920212223from selenium import webdriverimport timefrom selenium.webdriver.remote.webelement import WebElementfrom selenium.common.exceptions import StaleElementReferenceExceptiondef waitForLoad(driver): elem = driver.find_element_by_tag_name("html") count = 0 while True: count += 1 if count &gt; 20: print("Timing out after 10 seconds and returning") return time.sleep(.5) try: elem == driver.find_element_by_tag_name("html") except StaleElementReferenceException: returndriver = webdriver.PhantomJS(executable_path='drivers/phantomjs/phantomjs-2.1.1-macosx/bin/phantomjs')driver.get("http://pythonscraping.com/pages/javascript/redirectDemo1.html")waitForLoad(driver)print(driver.page_source)]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>数据采集</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之登录窗口采集处理|第08天]]></title>
    <url>%2Fposts%2F64604%2F</url>
    <content type="text"><![CDATA[利用Requests库处理Cookie、session等方式的登录。 登录窗口采集处理如果我们采集的网站需要我们登录后才能获取我们想要的数据，这就需要进一步处理登录这个问题。 登录的原理很简单，即前台向服务器传输数据进行验证。传输的方式有很多种，例如GET、POST；页面表单基本上可以看成是一种用户提交 POST请求的方式，且这种请求方式是服务器能够理解和使用的。 Python Requests库除了Python的标准库urllib库，还有第三方库可以选择，例如：Requests。主要擅长处理那些复杂的 HTTP 请求、cookie、header(响应头和请求头)等内容的 Python第三方库。 项目地址：https://github.com/kennethreitz/requests/ 安装的方式也很简单。例如pip安装，或者下载源码安装。 源码地址：https://github.com/kennethreitz/requests/tarball/master 提交表单提交表单一般是HTML的方式可以实现，且大多也采用这样的方式进行提交。例如： 12345&lt;form method="post" action="processing.php"&gt;Nickename: &lt;input type="text" name="nickename"&gt;&lt;br&gt; username: &lt;input type="text" name="username"&gt;&lt;br&gt; &lt;input type="submit" value="Submit"&gt;&lt;/form&gt; 我们Python的用Requests库来提交十分简单。 1234import requestsparams = &#123;'name': 'Ryan', 'username': 'Mitchell'&#125;r = requests.post("http://pythonscraping.com/files/processing.php", data=params)print(r.text) 单选按钮、复选框等输入无论表单的字段看起来多么复杂，仍然只有两件事是需要关注的:字段名称和值。字段名称可以通过查看源代码寻找name 属性轻易获得。而字段的值有时会比较复杂，有可能是在表单提交之前通过 JavaScript 生成的。 我们可以通过抓包或者浏览器的网络请求信息来判断，例如： 1https:chensenlin.cn?c=hello&amp;m=senlin Python需要理解为： 1&#123;'c':'hello','m':'senlin'&#125; 具体查看方法可以参考下图所示： 提交文件或者图像HTML提交文件的时候，需要添加一个参数enctype=&quot;multipart/form-data&quot;,声明这是文件上传的类型。同时input的type为file。 1234&lt;from action="uploadFile.php" metoh="post" enctype="multipart/form-data"&gt;uploadFile:&lt;input type="file" name="filename"&gt;提交：&lt;input type="submit" value="上传"&gt;&lt;/from&gt; 同理，Python Requests 库对这种表单的处理方式如下： 12345import requests files = &#123;'uploadFile': open('../files/Python-logo.png', 'rb')&#125; r = requests.post("https:chensenlin.cn?c=filename&amp;m=upload",files=files)print(r.text) 处理登录和Cookie网站大多都用 cookie 跟踪用户是否已登录的状态信息。一旦网站验证了你的登录权证，它就会将它们保存在你的浏览器的 cookie 中，里面通常包含一个服务器生成的令牌、登录有效时限和状态跟踪信息。网站会把这个cookie当作信息验证的证据，在你浏览网站的每个页面时出示给服务器。 根据我们上面的逻辑用Requests库跟踪cookie的代码示例也比较简单： 1234567891011import requestsparams = &#123;'username': 'demochen', 'password': 'password'&#125;r = requests.post("http://pythonscraping.com/pages/cookies/welcome.php", params)print("Cookie is set to:")print(r.cookies.get_dict())print("-----------")print("Going to profile page...")r = requests.get("http://pythonscraping.com/pages/cookies/profile.php",cookies=r.cookies)print(r.text) 不过也有session的方式进行登录,但是Requests库的session函数处理也很方便。具体和cookie类似，不过多阐述,或者查看文档了解也可以。 12345678910import requestssession = requests.Session()params = &#123;'username': 'username', 'password': 'password'&#125;s = session.post("http://pythonscraping.com/pages/cookies/welcome.php", params)print("Cookie is set to:")print(s.cookies.get_dict())print("-----------")print("Going to profile page...")s = session.get("http://pythonscraping.com/pages/cookies/profile.php") print(s.text) 值得注意的是，登录还有一种是用HTTP基本接入认证的方式。Requests库有一个 auth模块专门用来处理 HTTP 认证: 1234567import requestsfrom requests.auth import AuthBasefrom requests.auth import HTTPBasicAuth auth = HTTPBasicAuth('ryan', 'password') r = requests.post(url="http://pythonscraping.com/pages/auth/login.php", auth=auth)print(r.text)]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>数据采集</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之处理自然语言|第07天]]></title>
    <url>%2Fposts%2F54692%2F</url>
    <content type="text"><![CDATA[处理自然语言包括自然语言工具包和数据概括。 处理自然语言概括数据在之前我们了解了如何把文本内容分解成 n-gram 模型，或者说是n个单词长度的词组。从最基本的功能上说，这个集合可以用来确定这段文字中最常用的单词和短语。另外，还可以提取原文中那些最常用的短语周围的句子，对原文进行看似合理的概括。 例如我们根据威廉 ·亨利 ·哈里森的就职演全文进行分析。文章地址 123456789101112131415161718192021222324252627282930313233343536373839404142from urllib.request import urlopenfrom bs4 import BeautifulSoupimport reimport stringfrom collections import Counterdef cleanSentence(sentence): sentence = sentence.split(' ') sentence = [word.strip(string.punctuation+string.whitespace) for word in sentence] sentence = [word for word in sentence if len(word) &gt; 1 or (word.lower() == 'a' or word.lower() == 'i')] return sentencedef cleanInput(content): content = content.upper() content = re.sub('\n', ' ', content) content = bytes(content, 'UTF-8') content = content.decode('ascii', 'ignore') sentences = content.split('. ') return [cleanSentence(sentence) for sentence in sentences]def getNgramsFromSentence(content, n): output = [] for i in range(len(content)-n+1): output.append(content[i:i+n]) return outputdef getNgrams(content, n): content = cleanInput(content) ngrams = Counter() ngrams_list = [] for sentence in content: newNgrams = [' '.join(ngram) for ngram in getNgramsFromSentence(sentence, n)] ngrams_list.extend(newNgrams) ngrams.update(newNgrams) return(ngrams)content = str( urlopen('http://pythonscraping.com/files/inaugurationSpeech.txt').read(), 'utf-8')ngrams = getNgrams(content, 3)print(ngrams) 自然语言工具包自然语言工具包(Natural Language Toolkit，NLTK)就是这样一个 Python库，用于识别和标记英语文本中各个词的词性(parts of speech)。 安装与配置NLTK网站(http://www.nltk.org/install.html)。安装软件比较简单，例如pip安装。 123456789101112➜ psysh git:(master) pip install nltkCollecting nltk Using cached nltk-3.2.5.tar.gzRequirement already satisfied: six in /usr/local/lib/python3.6/site-packages (from nltk)Building wheels for collected packages: nltk Running setup.py bdist_wheel for nltk ... done Stored in directory: /Users/demo/Library/Caches/pip/wheels/18/9c/1f/276bc3f421614062468cb1c9d695e6086d0c73d67ea363c501Successfully built nltkInstalling collected packages: nltkSuccessfully installed nltk-3.2.5You are using pip version 9.0.1, however version 9.0.3 is available.You should consider upgrading via the 'pip install --upgrade pip' command. 检测一下就OK 123456➜ psysh git:(master) pythonPython 3.6.4 (default, Mar 1 2018, 18:36:50)[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwinType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import nltk&gt;&gt;&gt; 输入nltk.download()就可以看到NLTK下载器。 默认下载全部的包，新手减少排除的相关的麻烦。 用NLTK做统计分析用NLTK做统计分析一般是从Text对象开始的。Text对象可以通过下面的方法用简单的 Python字符串来创建: 12345from nltk import word_tokenize from nltk import Texttokens = word_tokenize("哈哈哈哈哈")text = Text(tokens) word_tokenize函数的参数可以是任何Python字符串。如果你手边没有任何长字符串，但是还想尝试一些功能，在NLTK库里已经内置了几本书，可以用import函数导入: 1from nltk.book import * 统计文本中不重复的单词，然后与总单词数据进行比较:&gt;&gt;&gt; len(text6)/len(words)。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>数据采集</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之数据清洗|第06天]]></title>
    <url>%2Fposts%2F48792%2F</url>
    <content type="text"><![CDATA[主要内容：数据清洗。 昨天有朋友在微信问我怎么没有更新，昨天回家整理了一些相关的东西，没来得及写文章。今天一个朋友听说我在简书分享，也和我一同加入了简书，很喜欢这样的感觉。之前军哥跟我说过，慢慢尝试去写，然后会有一部分人会被你影响，我发现是真的，真的能够影响到一部分人。闲话少说，开始今天的内容。 数据清洗 从本章开始，内容稍微复杂一点，但也不是那么难。 记得之前我在爬去boss网站的招聘信息的时候，抓取的数据并非我们所理想的样式，后面经过处理后，成为一个自己想要的样子，这个过程可以理解为数据清洗。这里的处理是在代码处理的，不是手工完成。 编写代码清洗数据在此之前需要了解一下n-gram模型，它表示文字或语言中的n 个连续的单词组成的序列。在进行自然语言分析时，使用 n-gram或者寻找常用词组，可以很容易地把一句话分解成若干个文字片段。更多详情可以去维基查看一下，或者自行搜索。 下面通过代码将返回维基百科词条“Python programming language”的2-gram列表: 12345678910111213141516from urllib.request import urlopenfrom bs4 import BeautifulSoupdef getNgrams(content, n): content = content.split(' ') output = [] for i in range(len(content)-n+1): output.append(content[i:i+n]) return outputhtml = urlopen('http://en.wikipedia.org/wiki/Python_(programming_language)')bs = BeautifulSoup(html, 'html.parser')content = bs.find('div', &#123;'id':'mw-content-text'&#125;).get_text()ngrams = getNgrams(content, 2)print(ngrams)print('2-grams count is: '+str(len(ngrams))) ngrams 函数把一个待处理的字符串分成单词序列(假设所有单词按照空格分开)，然后增加到 n-gram 模型(本例中是 2-gram)里形成以每个单词开始的二元数组。 我们得到的数据部分如下： 1[['\nPython\n\n\n\n\nParadigm\nObject-oriented,', 'imperative,'], ['imperative,', 'functional,'], ['functional,', 'procedural,'], ['procedural,', 'reflective\n\n\nDesigned\xa0by\nGuido'], 显然，是需要处理的。 首选处理通过正则移除\n，再把 Unicode 字符过滤掉。先把内容中的换行符(或者多个换行符)替换成空格，然后把连续的多个空格替换成一个空格，确保所有单词之间只有一个空格。最后，把内容转换成 UTF-8 格式以消除转义字符。函数初步如下： 1234567891011def ngrams(input, n): content = re.sub('\n+', " ", content) content = re.sub(' +', " ", content) content = bytes(content, "UTF-8") content = content.decode("ascii", "ignore") print(content) input = input.split(' ') output = [] for i in range(len(input)-n+1): output.append(input[i:i+n]) return output Python获取所有的标点符号： 1234567➜ url pythonPython 3.6.4 (default, Mar 1 2018, 18:36:50)[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwinType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import string&gt;&gt;&gt; string.punctuation'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~' 我们还要去除一些维基引用的标记、标点符号等；进一步进行清洗的函数： 1234567891011121314151617181920212223from urllib.request import urlopen from bs4 import BeautifulSoup import reimport stringdef cleanInput(input): input = re.sub('\n+', " ", input) input = re.sub('\[[0-9]*\]', "", input) input = re.sub(' +', " ", input) input = bytes(input, "UTF-8") input = input.decode("ascii", "ignore") cleanInput = [] input = input.split(' ') for item in input: item = item.strip(string.punctuation) if len(item) &gt; 1 or (item.lower() == 'a' or item.lower() == 'i'): cleanInput.append(item) return cleanInput def ngrams(input, n): input = cleanInput(input) output = [] for i in range(len(input)-n+1): output.append(input[i:i+n]) return output 这样处理后，我们的结果就稍微好点。 123['Linux', 'Foundation'], ['Foundation', 'Mozilla'], ['Mozilla', 'Foundation'], [ 'Foundation', 'Open'], ['Open', 'Knowledge'], ['Knowledge', 'Foundation'], ['Fou ndation', 'Open'], ['Open', 'Source'] 数据存储后再清洗对于编写代码清洗数据，你能做或想做的事情只有这些。除此之外，你可能还需要处理一些别人创建的数据库，或者要对一个之前没接触过的数据库进行清洗。 主要额方法有编写脚本或者第三方工具。例如OpenRefine。本小节主要是介绍一下该软件的安装和使用。也可以理解为一个图形化的应用，对于工具类的东西我一直有一个观点：点点点，就会了；何况还是图形化的。所以我不做介绍，看一下官网的三个视频就会了。 官网地址：http://openrefine.org/]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>数据采集</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之读取文档|第05天]]></title>
    <url>%2Fposts%2F34041%2F</url>
    <content type="text"><![CDATA[主要内容： 文档编码和类型的介绍； 读取CSV、PDF等格式的文件。 读取文档文档编码文档编码的方式通常可以根据文件的扩展名进行判断，虽然文件扩展名并不是由编码确定的，而是由开发者确定的。从最底层的角度看，所有文档都是由 0和 1 编码而成的。例如我我们将一个后缀为png的图片后缀改为.py。用编辑器打打开就完全不对了。 只要安装了合适的库， Python 就可以帮你处理任意类型的文档。纯文本文件、视频文件和图像文件的唯一区别，就是它们的 0和1 面向用户的转换方式不同。 纯文本对于纯文本的文件获取的方式很简单，用 urlopen 获取了网页之后，我们会把它转变成 BeautifulSoup对象。 123456from urllib.request import urlopen textPage = urlopen("http://www.pythonscraping.com/pages/warandpeace/chapter1.txt") print(textPage.read()) CSV 文件Python有一个标准库对CSV文件的处理特别的友好，可以处理各类的CSV文件。文档地址 读取CSV文件Python 的csv 库主要是面向本地文件，就是说你的 CSV 文件得存储在你的电脑上。而进行网络数据采集的时候，很多文件都是在线的。有几个参考解决办法： 手动把CSV文件下载到本机，然后用Python定位文件位置; 写Python程序下载文件，读取之后再把源文件删除; 从网上直接把文件读成一个字符串，然后转换成一个StringIO对象，使它具有文件的属性。 例如获取网上的CSV文件，然后输出命令行。 1234567891011from urllib.request import urlopenfrom io import StringIOimport csvdata = urlopen("http://pythonscraping.com/files/MontyPythonAlbums.csv").read().decode('ASCII','ignore')dataFile = StringIO(data)csvReader = csv.reader(dataFile)for row in csvReader: print(row) 输出的结果： 12345678910111213141516['Name', 'Year']["Monty Python's Flying Circus", '1970']['Another Monty Python Record', '1971']["Monty Python's Previous Record", '1972']['The Monty Python Matching Tie and Handkerchief', '1973']['Monty Python Live at Drury Lane', '1974']['An Album of the Soundtrack of the Trailer of the Film of Monty Python and the Holy Grail', '1975']['Monty Python Live at City Center', '1977']['The Monty Python Instant Record Collection', '1977']["Monty Python's Life of Brian", '1979']["Monty Python's Cotractual Obligation Album", '1980']["Monty Python's The Meaning of Life", '1983']['The Final Rip Off', '1987']['Monty Python Sings', '1989']['The Ultimate Monty Python Rip Off', '1994']['Monty Python Sings Again', '2014'] PDF 文件PDFMiner3K是一个非常好用的库(是PDFMiner的Python 3.x移植版)。它非常灵活，可以通过命令行使用，也可以整合到代码中。它还可以处理不同的语言编码，而且对网络文件的处理也非常方便。 下载解压后用python setup.py install完成安装。 模块的源文件下载地址： https://pypi.python.org/pypi/pdfminer3k 例如可以把任意 PDF 读成字符串，然后用 StringIO转换成文件对象。 123456789101112131415161718192021from urllib.request import urlopenfrom pdfminer.pdfinterp import PDFResourceManager, process_pdffrom pdfminer.converter import TextConverterfrom pdfminer.layout import LAParamsfrom io import StringIOfrom io import opendef readPDF(pdfFile): rsrcmgr = PDFResourceManager() retstr = StringIO() laparams = LAParams() device = TextConverter(rsrcmgr, retstr, laparams=laparams) process_pdf(rsrcmgr, device, pdfFile) device.close() content = retstr.getvalue() retstr.close() return content pdfFile = urlopen("http://pythonscraping.com/pages/warandpeace/chapter1.pdf")outputString = readPDF(pdfFile)print(outputString)pdfFile.close() readPDF 函数最大的好处是，如果PDF文件在电脑里，就可以直接把 urlopen返回的对象 pdfFile 替换成普通的 open() 文件对象: 1pdfFile = open("./chapter1.pdf", 'rb')]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>数据采集</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之存储数据|第04天]]></title>
    <url>%2Fposts%2F60544%2F</url>
    <content type="text"><![CDATA[主要内容： 下载文件，存储数据； MySQL的基本使用，发送邮件。 存储数据网络数据的采集，最本质的东西还是数据，我们爬取的数据是需要存储的。 媒体文件存储媒体文件有两种主要的方式:只获取文件 URL 链接，或者直接把源文件下载下来。 可以通过媒体文件所在的URL 链接直接引用它。这样做的优点如下: 爬虫运行得更快，耗费的流量更少，因为只要链接，不需要下载文件; 可以节省很多存储空间，因为只需要存储URL链接就可以; 存储URL的代码更容易写，也不需要实现文件下载代码; 不下载文件能够降低目标主机服务器的负载。 于此同时还会有一些缺点： 网站防盗链的问题，会带来很多的麻烦； 自主性较差，因为文件在别人的服务器上，可支配性差； 链接可能是会变化的，失效的链接数增加。 …. 下载文件的方法也很简单，在Python 3.x 版本中,urllib.request.urlretrieve可以根据文件的 URL 下载文件; 例如我们从http://pythonscraping.com 下载 logo图片，然后在程序运行的文件夹里保存为 logo.jpg 文件。 12345678from urllib.request import urlretrievefrom urllib.request import urlopenfrom bs4 import BeautifulSouphtml = urlopen('http://www.pythonscraping.com')bs = BeautifulSoup(html, 'html.parser')imageLocation = bs.find('a', &#123;'id': 'logo'&#125;).find('img')['src']urlretrieve (imageLocation, 'logo.jpg') 下载文件需要注意exe的文件，木马文件等。不要在硬盘存储敏感信息，不要用管理员权限运行他。 把数据存储到CSVCSV(Comma-Separated Values，逗号分隔值)是存储表格数据的常用文件格式。关于CSV格式的文件不做过多的介绍，自行去了解一下。 Python的csv库可以创建或者修改CSV文件。 1234567891011import csv csvFile = open("./demo.csv","我+")try: writer = csv.writer(csvFile) writer.writerow(('number', 'number plus 2', 'number times 2')) for i in rang(10): writer.writerow((i,i+2,I*2))finally: csvFile.close() 如果文件不存在就会创建demo.csv。 MySQLMySQL是目前最受欢迎的开源关系型数据库管理系统。因为它受众广泛，免费，开箱即用，所以它也是网络数据采集项目中常用的数据库。 我采用的是Mac的平台，可以直接下载安装安装也可以通过包管理器(例如homebrew)安装。 官网下载地址：http://dev.mysql.com/downloads/mysql/ 其他的平台可以去官网查看安装详情，作为一个改变世界的程序猿，安装软件应该不是问题。 基本命令创建数据库: 1CREATE DATABASE demo; 使用数据库： 1USE demo; 创建表： 1234567CREATE TABLE user( id BIGINT(7) NOT NULL AUTO_INCREMENT, name VARCHAR(10), sex tinyint(1), creatime TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(id)); 和数据库不同，MySQL 数据表必须至少有一列，否则不能创建。为了在 MySQL 里定义字段(数据列)，你必须在 CREATE TABLE &lt;tablename&gt; 语句后面，把字段的定义放进一个带括号的、内部由逗号分隔的列表。 插入数据： 1INSERT INTO user (name, sex) VALUES ("name", "1"); 查询数据： 1SELECT * FROM user 模糊查询： 12SELECT id FROM user LIKE "%chensenlin.cn%" 删除数据： 1DELELT FROM user WHERE id = 1 更新数据： 1UPDATE user SET name = 'chensenlin' WHERE id = 66 特别强调：更新或者删除一定要加条件！否则就说灾难，哈哈哈 与Python整合Python没有内置的MySQL 支持工具。不过，有很多开源的库可以用来与 MySQL做交互，Python 2.x和Python 3.x版本都支持。最有名的一个库就是PyMySQL(https://github.com/PyMySQL/PyMySQL)。 安装： 1pip install PyMySQL 基本使用： 12345678import pymysqlconn = pymysql.connect(host='127.0.0.1', unix_socket='/tmp/mysql.sock',user='root', passwd=root, db='mysql')cur.execute("USE demo")cur.execute("SELECT * FROM user WHERE id = 1") print(cur.fetchone())cur.close()conn.close() EmailPython发送一封邮件： 12345678910import smtplibfrom email.mime.text import MIMETextmsg = MIMEText("邮件正文内容")msg['Subject'] = "这是一个测试有奖主题"msg['From'] = "fore@gmail.com"msg['To'] = "hellosenlin@sina.cn"s = smtplib.SMTP('localhost')s.send_message(msg)s.quit() 与网页通过HTTP协议传输一样，邮件是通过SMTP(Simple Mail Transfer Protocol，简单邮件传输协议)传输的。而且,和网络服务器的客户端(浏览器)处理那些通过 HTTP 协议传输的网页一样。 可以将其封装成函数作为发送邮件定时使用等。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>数据采集</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之使用API|第03天]]></title>
    <url>%2Fposts%2F37773%2F</url>
    <content type="text"><![CDATA[本节比较简单，有开发经验可以跳过。 使用APIAPI概述百度百科关于API的解释：API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。 说明这就是接口，不受其语言的限制都可以调用。 API通用规则API用一套非常标准的规则生成数据，而且生成的数据也是按照非常标准的方式组织的。 方法利用HTTP请求网络服务器信息的方法有很多种，这里举例常用的四种：GET：从服务器获取数据的方法；POST：向服务器发送数据。例如提交表单到服务器处理的逻辑；PUT：主要用来更新一个对象或信息，一般很少用到；DELETE：从服务器删除一个对象。 验证API并不是随时或者谁都可以调用的。为了保证服务器上的安全或者减少资源等目的，我们会对请求的方法或者次数有限制。通常情况会对接口进行验证，一般的验证方法是令牌（token），这个令牌一般是用户登录或者注册的时候从服务器生成然后给用户。令牌可以是可变的，也可以是不可变的。令牌除了在 URL链接中传递，还会通过请求头里的 cookie 把用户信息传递给服务器。简单示例： 123token = "&lt;your api key&gt;"webRequest = urllib.request.Request("http://myapi.com", headers=&#123;"token":token&#125;)html = urlopen(webRequest) 服务器响应服务器响应的数据格式一般是JSON或者XML。目前JSON比较多，原因有很多，其中一点就是JSON 文件比完整的 XML 格式小；加上网络技术的改变，后端的语言越来越多，基本上都可以实现接口。 API调用的语法也有不同，但也有约定俗成的准则。例如，当使用 GET请求获取数据时，用URL 路径描述你要获取的数据范围，查询参数可以作为过滤器或附加请求使用;也有许多 API 会通过文件路径(path)的形式指定 API 版本、数据格式和其他属性；还有一些 API会通过请求参数(request parameter)的形式指定数据格式和 API 版本: 市面上比较多的公司或者网站都有自己的公开的接口，例如推特，Google等。 解析JSON数据例如我们采用GET的方式请求http://freegeoip.net/json/50.78.253.58,查看返回的数据。返回为： 1&#123;"ip":"50.78.253.58","country_code":"US","country_name":"United States","region_code":"MA","region_name":"Massachusetts","city":"Boston","zip_code":"02116","time_zone":"America/New_York","latitude":42.3496,"longitude":-71.0746,"metro_code":506&#125; 现在我们采用Python来解析。JSON是Python的标准库，不需要额外安装。代码如下： 123456789import jsonfrom urllib.request import urlopendef getCountry(ipAddress): res = urlopen("http://freegeoip.net/json/"+ipAddress).read().decode('utf-8') resJson = json.loads(res) return resJson.get('country_code')print(getCountry("22.18.53.22")) Python 使用了一种更加灵活的方式，把 JSON 转换成字典，JSON 数组转换成列表,JSON 字符串转换成 Python 字符串。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>数据采集</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之创建爬虫|第02天]]></title>
    <url>%2Fposts%2F38026%2F</url>
    <content type="text"><![CDATA[主要内容： 单个域名和网站的采集； 互联网采集和用Scrapy采集初步介绍。 开始采集网络爬虫是可以根据递归方式。为了找到URL 链接，它们必须首先获取网页内容，检查这个页面的内容，再寻找另一个 URL，然后获取 URL对应的网页内容，不断循环这一过程。 遍历单个域名以抓取维基百科的Kevin Baco为例，实现简单的数据爬取。代码如下： 12345678from urllib.request import urlopenfrom bs4 import BeautifulSoup html = urlopen('http://en.wikipedia.org/wiki/Kevin_Bacon')bs = BeautifulSoup(html, 'html.parser')for link in bs.find_all('a'): if 'href' in link.attrs: print(link.attrs['href']) 上述代码就获取维基百科网站的任何页面并提取页面链接。去掉我们不需要的词条，进行改进获取词条链接。代码如下： 12345678910from urllib.request import urlopen from bs4 import BeautifulSoup import rehtml = urlopen('http://en.wikipedia.org/wiki/Kevin_Bacon')bs = BeautifulSoup(html, 'html.parser')for link in bs.find('div', &#123;'id':'bodyContent'&#125;).find_all( 'a', href=re.compile('^(/wiki/)((?!:).)*$')): if 'href' in link.attrs: print(link.attrs['href']) 如果我们要做到一个函数getLinks，可以用维基百科词条/wiki/&lt;词条名称&gt;形式的URL链接作为参数，然后以同样的形式返回一个列表，里面包含所有的词条 URL 链接。一个主函数，以某个起始词条为参数调用getLinks，再从返回的URL列表里随机选择一个词条链接，再调用 getLinks，直到我们主动停止，或者在新的页面上没有词条链接了，程序才停止运行。完善后代码如下： 1234567891011121314151617from urllib.request import urlopenfrom bs4 import BeautifulSoupimport datetimeimport randomimport rerandom.seed(datetime.datetime.now())def getLinks(articleUrl): html = urlopen('http://en.wikipedia.org&#123;&#125;'.format(articleUrl)) bs = BeautifulSoup(html, 'html.parser') return bs.find('div', &#123;'id':'bodyContent'&#125;).find_all('a', href=re.compile('^(/wiki/)((?!:).)*$'))links = getLinks('/wiki/Kevin_Bacon')while len(links) &gt; 0: newArticle = links[random.randint(0, len(links)-1)].attrs['href'] print(newArticle) links = getLinks(newArticle) 遍历整个网络采集整个网站，那是非常耗费内存资源的过程，尤其是处理大型网站时，最合适的工具就是用一个数据库来储存采集的资源。 遍历整个网络的数据好处：可以生产网站地图，收集网站数据等。但是一般不会消耗大量的内存资源去做采集，本节的意义不大。 通过互联网采集建立网络地图，需要从一个链接跳转到另一个链接，逐步建立网站的地图信息，从而达到一个合适的网站地图，于此同时我们也不能忽略外链，从一个链接跳转到另一个链接的场景也会时有发生。相比之前的单域名采集，互联网采集的难度要高很多，所以，要求我们的寻找信息的方式和采集信息的方式都应该极具灵活性，以此达到理想的采集效果。 在做数据采集之前最好能够确定自己采集的内容，明确目标，然后根据目标的展示形式去分析，该网站是否会跳转其他的链接，是否需要继续采集等各个因素。 如果采集一个网站，有时候也会考虑到网络重定向的问题，例如我的个人博客原来链接是：https://forestfdemo.github.io,但是我做了一个网络的重定向，我将https://chensenlin.cn，重定向到原来的链接，这样无论是访问哪一个链接其本质都跳转到原来的链接，此时需要了解的是网络重定向的时候，我们采集的URL地址会发生变化，在Python3.X的版本中，我们的urllib会帮我完成重定向的功能。 用Scrapy采集Scrapy就是一个可以大幅度降低我们对网页链接查找和识别工作复杂度的Python 库，它可以让你轻松地采集一个或多个域名的信息。 目前Scrapy仅支持Python 2.7，还不支持 Python 3.x。 利用Scrapy进行爬虫项目还是有一些设置，我们可以采用官网下载，也可以采用pip进行安装，检验安装的方法在之前的Python基础系列的文章有提到过。这里不做过多的阐述。 创建一个项目： 1234567➜ python scrapy startproject demourlNew Scrapy project 'demourl', using template directory '/usr/local/lib/python3.6/site-packages/scrapy/templates/project', created in: /Users/demo/Project/python/demourlYou can start your first spider with: cd demourl scrapy genspider example example.com 我们查看一下目录结构： 123456789101112131415➜ demourl tree ././├── [drwxr-xr-x] demourl│ ├── [-rw-r--r--] __init__.py│ ├── [drwxr-xr-x] __pycache__│ ├── [-rw-r--r--] items.py│ ├── [-rw-r--r--] middlewares.py│ ├── [-rw-r--r--] pipelines.py│ ├── [-rw-r--r--] settings.py│ └── [drwxr-xr-x] spiders│ ├── [-rw-r--r--] __init__.py│ └── [drwxr-xr-x] __pycache__└── [-rw-r--r--] scrapy.cfg4 directories, 7 files 关于Scrapy的内容我们后续逐一介绍，大家可以点击关注，及时收到后续更新。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>数据采集</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之HTML解析|第01天]]></title>
    <url>%2Fposts%2F40836%2F</url>
    <content type="text"><![CDATA[主要内容： BeautifulSoup使用和find()和find_all()； 正则表达式和BeautifulSoup结合使用； Lambda表达式介绍。 复杂的HTML解析思考后确定获取目标假如我们确定一个我们需要采集的目标信息，可能是一组统计数据、或者一个 title等，但是此时这个目标可能藏的比较深，可能在第20层的标签里面，你可能会用下面的方式去抓取： 1bsObj.findAll("table")[4].findAll("tr")[2].find("td").findAll("div")[1].find("a") 同时还有一个问题，加入网站发生细微的变化。我们的代码不仅影响美观还回影响整个爬虫网络。这样的情况我们应该怎么做呢？ 尝试“打印此页”的链接，或者看看该网页的移动版是够更加友好，请求的时候将请求头设置为移动端的状态。 寻找隐藏在JavaScript文件里的信息。网站的某些数据可能隐藏在JavaScript文件中。 可以试试其他的网站资源。 BeautifulSoup使用上一篇我们学会了如何安装和运行BeautifulSoup,现在我们逐步深入，学习通过属性查找标签的方法、标签组、标签解析树的导航过程。 每个网站都有层叠样式表(也就是我们说的CSS)，它对于爬虫而言有一个最大的好处就是能够让HTML元素表现出差异化。 例如某些标签是下面这样的： 1&lt;span class="green"&gt;&lt;/span&gt; 或者这样的： 1&lt;span class="red"&gt;&lt;/span&gt; 爬虫可以根据class的属性值去区分不同的标签。例如：我们可以只抓取红色的字。 下面我们以这个网站为例来创建一个网络爬虫。 通过上图可以知道红色的为对话正文部分，绿色为姓名的信息。现在可以创建一个简单的BeautifulSoup对象。 1234from urllib.request import urlopenfrom bs4 import BeautifulSouphtml = urlopen(" http://www.pythonscraping.com/pages/warandpeace.html")bsObj = BeautifulSoup(html,'lxml') # 获取了html的所有信息 通过BeautifulSoup对象，我们可以用findAll函数抽取只包含在&lt;span class=&quot;green&quot;&gt;&lt;/ span&gt;标签里的文字，这样就会得到一个人物名称的 Python列表。 1234nameList = bsObj.find_all('span',&#123;"class":"green"&#125;) #获取span标签的class为green的所有姓名for name in nameList:# 遍历取值 print(name.get_text()) 然后运行得到的就是所有的姓名列表。 get_text()使用场景主要是处理一个包含许多超链接、段落和标 签的大段源代码，它就会吧这些超链接和段落以及标签都清理掉。也就是说它会把你正在处理的 HTML文档中所有的标签都清除，然后返回一个只包含文字的字符串。 BeautifulSoup的find()和find_all()BeautifulSoup里的find()和find_all()可能是你最常用的两个函数。借助它们，你可以通过标签的不同属性轻松地过滤HTML页面,查找需要的标签组或单个标签。 BeautifulSoup文档地址：http://beautifulsoup.readthedocs.io find()函数语法： 1find( name , attrs , recursive , string , **kwargs ) find_all()函数语法： 1find_all( name , attrs , recursive , string , **kwargs ) 搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件。 name参数可以查找所有名字为name的tag,字符串对象会被自动忽略掉。搜索 name参数的值可以使任一类型的过滤器,字符串,正则表达式,列表,方法等。 attrs参数定义一个字典参数来搜索包含特殊属性的tag。 通过string参数可以搜搜文档中的字符串内容,与name参数的可选值一样。 keywork参数：如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字tag的属性来搜索。 find_all()方法返回全部的搜索结构,如果文档树很大那么搜索会很慢。如果我们不需要全部结果,可以使用 limit参数限制返回结果的数量.效果与SQL中的limit关键字类似,当搜索到的结果数量达到limit的限制时,就停止搜索返回结果。 find 等价于 find_all 的 limit 等于 1 ; 调用tag的 find_all()方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 recursive=False。 其他BeautifulSoup对象NavigableString对象：表示标签里面的文字；Comment对象：用来查找HTML文档的注释标签。例如：&lt;!-- 注释 --&gt; 导航树导航树解决的问题是通过标签在文档中的位置来查找标签。以该网站为例。 第一类，处理子标签和其他后代标签。 子标签就是一个父标签的下一级，而后代标签是指一个父标签下面所有级别的标签。所有的子标签都是后代标签，但不是所有的后代标签都是子标签。例如：tr标签是tabel标签的子标签，而 tr、th、td、img和 span标签都是 tabel 标签的后代标签。 一般情况下，BeautifulSoup函数总是处理当前标签的后代标签。 例如根据示例网站我们需要找到文档中第一个div标签，然后获取这个div后代里面所有的img标签。 12345678from urllib.request import urlopenfrom bs4 import BeautifulSouphtml = urlopen('http://www.pythonscraping.com/pages/page3.html')bs = BeautifulSoup(html, 'html.parser')for child in bs.find('table',&#123;'id':'giftList'&#125;).children: print(child) 输出的结果就是打印 giftList 表格中所有产品的数据行。 第二类，处理兄弟标签。 BeautifulSoup的next_siblings()函数可以让收集表格数据成为简单的事情，尤其是处理带标题行的表格: 12345678from urllib.request import urlopenfrom bs4 import BeautifulSouphtml = urlopen('http://www.pythonscraping.com/pages/page3.html')bs = BeautifulSoup(html, 'html.parser')for sibling in bs.find('table', &#123;'id':'giftList'&#125;).tr.next_siblings: print(sibling) 输出的结果是打印产品列表里的所有行的产品，第一行表格标题除外。 第三类，父标签处理。 抓取网页的时候我们抓取父标签的情况比较少，但是不排除有这样的情况存在。例如，我们要观察网页的内容。这里就需要连个两个函数parent 和 parents。 12345678from urllib.requesturllib. import urlopenfrom bs4 import BeautifulSouphtml = urlopen('http://www.pythonscraping.com/pages/page3.html')bs = BeautifulSoup(html, 'html.parser')print(bs.find('img',&#123;'src':'../img/gifts/img1.jpg'&#125;).parent.previous_sibling.get_text()) 上述代码的结果是img1图片的价格。 正则表达式正则表达式个人认为比较简单，就跟学习英语一样，只要不断的去用就了解了。贴上原图可查阅即可。关于正则的相关基础知识可以看看我推荐的网站了解一下，或者可以关注我，后续专门写一个正则表达式入门的文章。 正则表达式30分钟入门教程：https://deerchao.net/tutorials/regex/regex.htm正则表达式书籍：https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/ 或者用下面的这张图，然后跟着去套一些例子。 正则表达式和BeautifulSoup结合正则表达式，来实现一下具体的例子，可能更容易理解一些。我们获取刚刚网站的所有图片，首先打开源码分析一下页面。 我们发现所有的图片都是以../img/gifts/img开头，以.jpg 结尾。那么就用正则去匹配一下。匹配规则如下： 1\.\.\/img\/gifts/img.*\.jpg 结合BeautifulSoup对象我们可以尝试用代码试一下： 123456789from urllib.request import urlopenfrom bs4 import BeautifulSoupimport rehtml = urlopen('http://www.pythonscraping.com/pages/page3.html')bs = BeautifulSoup(html, 'html.parser')images = bs.find_all('img', &#123;'src':re.compile('\.\.\/img\/gifts/img.*\.jpg')&#125;)for image in images: print(image['src']) 运行的结果： 123456➜ url python pareten2.py../img/gifts/img1.jpg../img/gifts/img2.jpg../img/gifts/img3.jpg../img/gifts/img4.jpg../img/gifts/img6.jpg 这就是网站的所有图片的相对路径，以后可以用这样的方法去匹配视频网站的路径，然后下载啦。 获取属性在网络数据采集时你经常不需要查找标签的内容，而是需要查找标签属性。比如标签 &lt;a&gt;指向 的 URL 链接包含在 href属性中，或者 &lt;img&gt;标签的图片文件包含在 src 属性中。 对于一个标签对象，可以用myTag.attrs获取它的全部属性,要注意这行代码返回的是一个 Python 字典对象，可以获取和操作这些属性。例如要获取图片的资源位置 src，可以用myImgTag.attrs[&quot;src&quot;]获取。 Lambda表达式Lambda表达式本质上是一个函数，可以作为其他函数的变量使用;也就是说，一个函数不是定义成 f(x, y)，而是定义成 f(g(x), y)，或 f(g(x), h(x)) 的形式。 BeautifulSoup 允许我们把特定函数类型当作 findAll 函数的参数。唯一的限制条件是这些函数必须把一个标签作为参数且返回结果是布尔类型。BeautifulSoup用这个函数来评估它遇到的每个标签对象，最后把评估结果为“真”的标签保留，把其他标签剔除。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据采集</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python网络数据采集之创建爬虫|第00天]]></title>
    <url>%2Fposts%2F26519%2F</url>
    <content type="text"><![CDATA[主要内容： 网络相关知识； BeautifulSoup介绍和使用。 说明开始本系列的文章时，可能你需要了解一下Python的基础知识，熟悉Python的基本编程，了解一些网络知识等。如果不是特别了解，可以看看我的Python基础系列文章。 创建爬虫网络链接网络浏览器是一个非常有用的应用，它创建信息的数据包，发送它们，然后把你获取的数据解释成漂亮的图像、声音、视频和文字。但是，网络浏览器就是代码，而代码是可以分解的，可以分解成许多基本组件，可重写、重用，以及做成我们想要的任何东西。网络浏览器可以让服务器发送一些数据，到那些对接无线(或有线)网络接口的应用上， 但是许多语言也都有实现这些功能的库文件。关于浏览器的相关介绍，可以参考维基关于浏览器的官方介绍。 Python实现抓取网页。新建文件为urllib_request.py。 1234# 查找 Python 的 request 模块(在 urllib 库里面)，并导入 urlopen 函数from urllib.request import urlopenhtml = urlopen("http://www.baidu.cn")print(html.read()) 执行： 1python urllib_request.py 在进行数据抓取时需要保证能够与该网页的连通性，可以尝试用ping的方式进行测试。这里我采用的是抓取百度的首页数据。返回的是百度首页的全部HTML代码。 urllib 是Python的标准库，包含了从网络请求数据，处理cookie，甚至改变像请求头和用户代理这些元数据的函数。urlopen用来打开并读取一个从网络获取的远程对象。urlib的文档地址。 标准库：不用额外安装的库就可以直接运行。 BeautifulSoup简介BeautifulSoup通过定位HTML标签来格式化和组织复杂的网络信息，用简单易用的Python对象为我们展现XML结构信息。 安装BeautifulSoupBeautifulSoup并不是标准库，所以需要通过安装后来使用。本人采用Mac的系统，同时已经安装了pip，所以直接可以采用pip来安装即可，不过需要注意版本问题。 Mac安装BeautifulSoup方法： 1pip install beautifulsoup4 如果没有报错可以验证一下是否安装成功。验证的方式有很多。这里我举例两种最常用的验证方式。 第一种验证方式：终端直接查看包是否存在。 1pip freeze | grep beautifulsoup4 如果输出：beautifulsoup4==4.6.0,表示已经有了，只不过版本可能会不一致，但是模块名是一致的。 第二种验证方式：进入python界面，然后倒入某一个函数看看是否报错，或者直接写代码执行一下。 123456➜ day0 pythonPython 3.6.4 (default, Mar 1 2018, 18:36:50)[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwinType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; from bs4 import BeautifulSoup&gt;&gt;&gt; exit(); 综上所述，两种验证方式都通过了，说明现在已经安装完成且可以使用了。 这里的安装是全局安装，如果在实际开发中不同的项目可能会有不同的环境或者版本要求，甚至会产生冲突，现在就就需要的能够支持多种的环境的需求，可以用虚拟环境保存库文件。安装一个Python虚拟环境来分而治之。具体的使用方法这里不做过多阐述，后续会有对应的更新，你可以关注我就可以收到更新提示。 运行BeautifulSoup结合之前抓取百度首页的代码，现在针对某网站的某文件进行抓取。如下： 12345from urllib.request import urlopenfrom bs4 import BeautifulSouphtml = urlopen("http://www.pythonscraping.com/pages/page1.html") bsObj = BeautifulSoup(html.read(),'lxml')print(bsObj.h1) 运行后就得到了该网页的标题。如下： 12➜ day0 python request.py&lt;h1&gt;An Interesting Title&lt;/h1&gt; 这就是根据网页的源码得到了该网页的标题。未来可以通过正则等方式获取。 可靠的网络连接数据采集的问题在于保证程序与目标网站的服务器一直保持通信，否则的话爬虫就不会继续工作了。这个时候就需要进行网络异常处理。 例如我们上一节的代码中有下面一行代码： 1html = urlopen("http://www.pythonscraping.com/pages/page1.html") 这里面会出现两个问题，服务器不存在或者这个页面不存在。也就是要么404,要么500。 12345678try: html = urlopen("http://www.pythonscraping.com/pages/page1.html")except HTTPError as e: print(e) # 返回空值，中断程序，或者执行另一个方案 else: # 程序继续。注意:如果你已经在上面异常捕捉那一段代码里返回或中断(break)， # 那么就不需要使用else语句了，这段代码也不会执行 也有可能获取的时候，该html页面就是一个空的，是不是又需要增加判断呢？ 1234if html is None: print("URL is not found")else: # 程序继续 获取到了内容，是不是需要继续判断一下该内容是否为我们所需要的内容呢？所以需要增加一个检查标签是否存在判断。 最后我们的判断是不是看起来代码特别的累赘，我们简单整理一下后，代码如下： 1234567891011121314151617181920from urllib.request import urlopenfrom urllib.error import HTTPErrorfrom bs4 import BeautifulSoup def getTitle(url): try: html = urlopen(url) except HTTPError as e: return None try: bsObj = BeautifulSoup(html.read()) title = bsObj.body.h1 except AttributeError as e: return None return title title = getTitle("http://www.pythonscraping.com/pages/page1.html") if title == None: print("Title could not be found")else: print(title)]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>数据采集</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python常用函数整理]]></title>
    <url>%2Fposts%2F26518%2F</url>
    <content type="text"><![CDATA[主要内容： 字符串函数、集合函数、列表函数和字典函数。 Python常用函数字符串函数 方法 说明 capitalize() 返回首字母的大写副本 find(string) 返回字符串中首次出现参数string的索引，如果字符串中没有参数string则返回-1 find(s,beg) 返回字符串中索引beg之后首次出现参数s的索引，如果字符串中索引beg之后没有参数s则返回-1 find(s,beg,end) 返回字符串中索引beg与end之间首次出现参数s的索引，如果字符串中索引beg和end之间没有参数s则返回-1 islower() 测试所有字符是否均为小写形式 isupper() 测试所有字符是否均为大写形式 lower() 将所有字符穿华为小写形式并返回 replace(old,new) 将字符串中所有子串old替换为new并返回 split() 将空格分隔的单词以列表的形式返回 split(del) 将del分隔的子串以列表的形式返回 strip() 删除字符串两端的空白符并返回 strip(string) 删除字符串中的string并返回 upper() 将所有字符串转化为大写形式并返回 列表函数 方法 说明 len(L) 返回列表L中的元素数量 max(L) 返回列表L中的最大值 min(L) 返回列表L中的最小值 sum(L) 返回列表L中所有元素的和 集合函数 方法 运算符 说明 add 往集合中添加一个元素 clear 移除集合中的所有元素 difference - 根据一个集合中不存在于另一个集合中的元素，创建中一个新的集合 intersection &amp; 根据两个集合中共有的元素，创建出一个新的集合 issubset &lt;= 判断一个集合的所有元素是否都包含于另一个集合 issuperset &gt;= 判断一个集合是否包含了另一个集合中的所有元素 remove 移除集合中的一个元素 symmetric_difference ^ 根据两个集合中所有不存在于对方的元素，创建出一个新的集合 union 根据两个集合中所有的元素，创建出一个新的集合 字典函数 方法 说明 clear 清空字典内容 get 返回关键字所关联的值，如果指定键不存在，则返回默认值 keys 以列表的形式返回字典中的所有键。所得列表中的每个条目肯定是唯一的 items 返回（key,value）列表 values 以列表的形式返回字典中的所有值。所得列表中的每个条目不一定是唯一的 update 用另一个字典的内容对当前字典进行更新]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习09天]]></title>
    <url>%2Fposts%2F1508%2F</url>
    <content type="text"><![CDATA[主要内容： 文件处理相关，读取文件和写入文件等。 异常处理和捕获异常。 文件和异常处理从文件中读取数据要使用文本文件中的信息，首先需要将信息读取到内存中。为此，我们可以一次性读取文件的 全部内容，也可以以每次一行的方式逐步读取。 读取整个文件要读取文件，需要一个包含几行文本的文件。新建一个圆周率后30位的文件为例，保存为pi_digits.txt，同时小数点后是为换行。如下： 1233.1415926535 8979323846 2643383279 读取该文件的Python文件，file_reader.py。代码如下： 123with open('pi_digits.txt') as file_object: contents = file_object.read() print(rstrip(contents)) open()函数是任何方式使用文件，哪怕仅仅是打印其内容，都得先打开文件。它接受一个参数: 要打开的文件的名称。Python在当前执行的文件所在的目录中查找指定的文件。 close()函数是关闭文件。 关键字with在不再需要访问文件后将其关闭。Python方法rstrip()删除字符串末尾的空白。 运行结果： 1233.1415926535 8979323846 2643383279 文件路径当你将类似pi_digits.txt这样的简单文件名传递给函数open()时，Python将在当前执行的文件 (即.py程序文件)所在的目录中查找文件。 语法格式： 1with open('text_files/filename.txt') as file_object: 通过使用绝对路径，可读取系统任何地方的文件。注意区分相对路径和绝对路径。 逐行读取读取文件时，常常需要检查其中的每一行:你可能要在文件中查找特定的信息，或者要以 某种方式修改文件中的文本。逐行读取可以理解为遍历、循环等逻辑。所以在读取文件时，可以采用for语句来实现。代码示例： 12345filename = 'pi_digits.txt'with open(filename) as file_object: for line in file_object: print(line.rstrip()) 创建一个包含文件各行内容的列表使用关键字with时，open()返回的文件对象只在with代码块内可用。如果要在with代码块外 访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表:你可以立即处理文件的各个部分，也可推迟到程序后面再处理。 1234567filename = 'pi_digits.txt'with open(filename) as file_object: lines = file_object.readlines()#从文件中读取每一行，并将其存储在一个列表中#使用一个简单 的for循环来打印lines中的各行for line in lines: print(line.rstrip()) 使用文件的内容将文件读取到内存中后，就可以以任何方式使用这些数据了。 12345678910filename = 'pi_digits.txt'with open(filename) as file_object: lines = file_object.readlines()#从文件中读取每一行，并将其存储在一个列表中pi_string = '' #创建一个变量存贮圆周率的值for line in lines: #使用一个循环将各行都加入pi_string，并删除每行末尾的换行符 pi_string += line.strip()print(pi_string) #打印这个字符串print(len(pi_string)) # 长度 读取文本文件时，Python将其中的所有文本都解读为字符串。如果你读取的是数字，并 要将其作为数值使用，就必须使用函数int()将其转换为整数，或使用函数float()将其转 换为浮点数。 包含一百万位的大型文件对于你可处理的数据量，Python没有任何限制;只要系统的内存足够多，想处理多少数据都可以。 写入文件保存数据的最简单的方式之一是将其写入到文件中。通过将输出写入文件，即便关闭包含程序输出的终端窗口，这些输出也依然存在:可以在程序结束运行后查看这些输出，可与别人分享输出文件，还可编写程序来将这些输出读取到内存中并进行处理。 写入空文件要将文本写入文件，你在调用open()时需要提供另一个实参，告诉Python你要写入打开的文件。 代码示例： 1234filename = 'programming.txt'with open(filename, 'w') as file_object: file_object.write("I love programming.") 打开文件时，可指定读取模 式(&#39;r&#39;)、写入模式(&#39;w&#39;)、附加模式(&#39;a&#39;)或让你能够读取和写入文件的模式(&#39;r+&#39;)。如果 你省略了模式实参，Python将以默认的只读模式打开文件。 以写入(‘w’)模式打开文件时,如果指定的文件已经存在，Python将在返回文件对象前清空该文件。 Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数str()将其转换为字符串格式。 写入多行函数write()不会在你写入的文本末尾添加换行符,如果需要写入多行就需要在每行的后面添加换行符：\n 。 12345filename = 'programming.txt'with open(filename, 'w') as file_object: file_object.write("I love programming.") file_object.write("I love Python.") 输入结果： 1I love programming.I love Python. 附加到文件附加到文件可以理解为不清空当前的文件内容，在文件内容后面追加即可。如果以附加的形式打开，如果文件不存在就会被创建。具体实现只需要在使用open()函数的时候指定打开方式为a即可，其余类似。 异常Python使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生让Python不知 所措的错误时，它都会创建一个异常对象。 异常是使用try-except代码块处理的。try-except代码块让Python执行指定的操作，同时告诉Python发生异常时怎么办。使用了try-except代码块时，即便出现异常，程序也将继续运行: 显示你编写的友好的错误消息，而不是令用户迷惑的traceback。 处理ZeroDivisionError异常例如我们让Python运行8/0的代码报错信息。 1234&gt;&gt;&gt; 7/0Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;ZeroDivisionError: division by zero 此时程序停止运行。 使用try-except代码块12345try: print(7/0) except ZeroDivisionError: print("You can't divide by zero!") # 其他的代码块将继续运行 使用异常避免崩溃发生错误时，如果程序还有工作没有完成，妥善地处理错误就尤其重要。这种情况经常会出 现在要求用户提供输入的程序中;如果程序能够妥善地处理无效输入，就能再提示用户提供有效输入，而不至于崩溃。 else代码块try-except-else代码块的工作原理:Python尝试执行try代码块中的代码;只有可 能引发异常的代码才需要放在try语句中。 代码示例： 123456try: answer = int(first_number) / int(second_number)except ZeroDivisionError: print("You can't divide by 0!")else: print(answer) 处理FileNotFoundError异常产生的背景：要查找的文件可能在其他地方、文件名可能 不正确或者这个文件根本就不存在。机会产生FileNotFoundError异常。同理可以给用户一个友好的消息提示。 拆分字符串方法split()以空格为分隔符将字符串分拆成多个部分，并将这些部分都存储到一个列表中。 代码示例： 123&gt;&gt;&gt; title = "Alice in Wonderland" &gt;&gt;&gt; title.split()['Alice', 'in', 'Wonderland'] 使用多个文件使用多个文件和单个文件逻辑一致，只不过把逻辑处理部分封装为方法，多个文件就循环处理即可。 1234567891011121314151617def count_words(filename): #计算一个文件大致包含多少个单词 try: with open(filename) as f_obj: contents = f_obj.read() except FileNotFoundError: msg = "Sorry, the file " + filename + " does not exist." print(msg) else: # 计算文件大致包含多少个单词 words = contents.split() num_words = len(words) print("The file " + filename + " has about " + str(num_words) +" words.")filename = 'alice.txt' count_words(filename) 存储数据模块json让你能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件 中的数据。你还可以使用json在Python程序之间分享数据。更重要的是，JSON数据格式并非Python专用的，这让你能够将以JSON格式存储的数据与使用其他编程语言的人分享。 使用json.dump()和json.load()函数json.dump()接受两个实参:要存储的数据以及可用于存储数据的文件对象。 编写一个存储一组数字的简短程序，再编写一个将这些数字读取到内存中的程序 (json.load())。 代码示例： 12345678910import jsonnum = [1,2,3,4,5,6]filename = 'num.json'with open(filename,'w') as f_obj: json.dump(num,f_obj)#写入文件 num = json.load(f_obj) #读到内存，可以打印 print(num) 运行后文件的内容和打印的内容一致。 1[1, 2, 3, 4, 5, 6] 保存和读取用户生成的数据用户输入的信息我们可以通过写入文件的方式写在文件内，再次输入的时候可以打开文件查询判断是否存在。其实就是把写入和读取文件两个逻辑合成一个。 代码如下： 12345678910111213import jsonfilename = 'username.json'try: with open(filename) as f_obj: username = json.load(f_obj)except FileNotFoundError: username = input("What is your name? ") with open(filename, 'w') as f_obj: json.dump(username, f_obj) print("We'll remember you when you come back, " + username + "!")else: print("Welcome back, " + username + "!")]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习08天]]></title>
    <url>%2Fposts%2F63973%2F</url>
    <content type="text"><![CDATA[主要内容： 类的基本介绍、创建和使用； 实例化类，设置属性和和修改等。 创建和使用类创建Dog类根据约定，在Python中，首字母大写的名称指的是类。 这个类定义中的括号是空的，因为我们要从空白创建这个类。类中的函数称为方法。 代码如下: 123456789101112class dog(): # 创建一个小狗的类 def _init_(self,name,age): # 初始化属性name和age self.name = name self.age = age def sit(self): # 模拟小狗被命令时蹲下 print(self.name.title() + " is now sitting !") def roll_over(self): # 打滚 print(self.name.title() + " rolled over!") __init__方法 __init__()是一个特殊的方法，每当你根据Dog类创建新实例时，Python都会自动运行它。在这个方法的名称中，开头和末尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突。它包含了三个形参：self、name和age，在这个方法的定义中，形 参self必不可少，还必须位于其他形参的前面。 根据类创建实例可将类视为有关如何创建实例的说明。 代码示例: 123my_dog = Dog('demo',18)print(my_dog.name.title())print(my_dog.age) 访问属性 要访问实例的属性，可使用句点表示法。例如my_dog.name 调用方法 要调用方法，可指定实例的名称和要调用的方法，并用句点分隔它们。 代码示例： 123my_dog = Dog('demo', 6)my_dog.sit()my_dog.roll_over() 创建多个实例 12my_dog = Dog('demo', 6)you_dog = Dog('demo_go', 6) 使用类和实例类编写好后，你的大部分时间都将花在使用根据类创建的实例上。你需要执行的一个重要任务是修改实例的属性。你可以直接修改实例的属性，也可以编写方法以特定的方式进行修改。 Car类12345678910111213141516class Car(): # Car类 def __init__(self,name,model,year): # 初始化 self.name = name self.model = model self.year = year def get_descript(self): # 返回描述信息 long_name = str(self.year) + '---' + self.name + '---' + self.model return long_name.title() # 示例化my_car = Car('audi','A4','2016')print(my_car.get_descript()) 处理的结果是: 12016---Audi---A4 给属性设置默认值类中的每个属性都必须有初始值，哪怕这个值是0或空字符串。在有些情况下，如设置默认值时，在方法__init__()内指定这种初始值是可行的;如果你对某个属性这样做了，就无需包含为它提供初始值的形参。 在car类在__init__的方法新增属性self.odometer_reading = 0，同时新增一个方法read_odometer()： 123def read_odometer(self): # 打印一条指出汽车里程的消息 print("汽车的里程有：" + str(self.odometer_reading)) 调用该方法: 123my_car = Car('audi','A4','2016')print(my_car.get_descript())my_car.read_odometer() 修改属性的值可以以三种不同的方式修改属性的值：直接通过实例进行修改;通过方法进行设置;通过方法进行递增(增加特定的值)。 直接修改属性的值 代码如下： 1my_new_car.odometer_reading = 23 my_new_car.read_odometer() 有时候需要像这样直接访问属性，但其他时候需要编写对属性进行更新的方法。 通过方法修改属性的值 在Car类新增一个update_odometer()的方法，专门用来修改属性的值。 代码如下： 123def update_odometer(self,update_value): # 修改里程值 self.odometer_reading = update_value 在调用的时候就很简单了: 12my_new_car.update_odometer(66)my_new_car.read_odometer() 通过方法对属性的值进行递增 递增的逻辑其实很简单，只有将之前的记录保存并且和后面传入的值进行相加操作即可。 代码如下： 123def update_odometer(self,update_value): # 修改里程值 self.odometer_reading += update_value 调用方法： 1234my_new_car.update_odometer(6)my_new_car.read_odometer()my_new_car.update_odometer(1)my_new_car.read_odometer() 继承编写类时，并非总是要从空白开始。如果你要编写的类是另一个现成类的特殊版本，可使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法;原有的类称为父类，而新类称为子类。子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法。 子类的方法__init__()创建子类的实例时，Python首先需要完成的任务是给父类的所有属性赋值。我们直接在上一节的汽车类基础上添加一个ElectricCar类，让它继承Car类。 123456789class ElectricCar(Car): # 电动汽车 def __init__(self,name,model,year): # 初始化父类的属性 super().__init__(name,model,year) # 示例化my_car = ElectricCar('dian', 'models', 2019)print(my_tesla.get_descriptive()) super()是一个特殊函数，帮助Python将父类和子类关联起来。这行代码让Python调用ElectricCar的父类的方法__init__()，让ElectricCar实例包含父类的所有属性。父类也称为超 类(superclass)，super因此而得名。 给子类定义属性和方法 让一个类继承另一个类后，可添加区分子类和父类所需的新属性和方法。和之前的定义属性和方法的逻辑类似，不做过多的阐述。可以理解为在子类里面可以自定义一些自己需要的方法或者属性。 重写父类的方法对于父类的方法，只要它不符合子类模拟的实物的行为，都可对其进行重写。为此，可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样，Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。或者可以理解为在子类里面可以重写一个新的方法，重新赋值一个新的属性等。通俗的理解为：“取其精华，去其糟粕”。 将实例用作属性使用代码模拟实物时，你可能会发现自己给类添加的细节越来越多:属性和方法清单以及文 件都越来越长。在这种情况下，可能需要将类的一部分作为一个独立的类提取出来。你可以将大 型类拆分成多个协同工作的小类。 导入类导入单个类为了使项目代码的可读性更加高，使用该模块的程序都必须使用更具体的文件名。例如my_car.py。导入的方法和之前类似，具体语法结构如下： 1from model_name import Class_name 采用improt语句让Python打开模块car，并导入其中的Car类，剩下的就可以使用了。 导入类是一种有效的编程方式。如果在这个程序中包含了整个Car类，它该有多长呀!通过 将这个类移到一个模块中，并导入该模块，你依然可以使用其所有功能，但主程序文件变得整洁而易于阅读。 在一个模块中存储多个类也就是一个模块中可以有多个类，例如父类和子类。假设my_car.py有两个类，一个是父类Car，另一个是子类ElectricCar，那么在导入该模块时，可以选择导入某一个类。 代码示例： 1from model_name import Class_name 现在就可以进行示例化或者其他的操作了。 从一个模块中导入多个类和我们之前导入函数的时候原理一样，我们可以导入任意数量的类。导入模块多个类的时候，采用逗号拼接即可。语法如下： 1from model_name import Class_name0, Class_name1 导入之后，就可根据需要创建每个类的任意数量的实例。 导入整个模块导入整个模块的语法也特别的简单，具体如下： 1import model_name 这样就可以使用整个模块的任意类。 导入模块中的所有类导入多个就用逗号一个个区分，然后倒入所有的就用*代替。所以语法如下： 1from model_name import * 引用原文。 不推荐使用这种导入方式，其原因有二。首先，如果只要看一下文件开头的import语句，就能清楚地知道程序使用了哪些类，将大有裨益;但这种导入方式没有明确地指出你使用了模块中的哪些类。这种导入方式还可能引发名称方面的困惑。如果你不小心导入了一个与程序文件中其 他东西同名的类，将引发难以诊断的错误。这里之所以介绍这种导入方式，是因为虽然不推荐使 用这种方式，但你可能会在别人编写的代码中见到它。 需要从一个模块中导入很多类时，最好导入整个模块，并使用module_name.class_name语法来访问类。这样做时，虽然文件开头并没有列出用到的所有类，但你清楚地知道在程序的哪些地方使用了导入的模块;你还避免了导入模块中的每个类可能引发的名称冲突。 在一个模块中导入另一个模块有时候，需要将类分散到多个模块中，以免模块太大，或在同一个模块中存储不相关的类。将类存储在多个模块中时，你可能会发现一个模块中的类依赖于另一个模块中的类。在这种情况下，可在前一个模块中导入必要的类。 这部分的笔记实在是比较简单，没有过多的代码，逻辑上的问题基本在之前都涉及过了。如果不是特别了解，可以看看之前的文章，或者可以关注我，后续将继续更新。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习07天]]></title>
    <url>%2Fposts%2F60902%2F</url>
    <content type="text"><![CDATA[主要内容： 函数的定义和使用； 传递实参和返回值； 模块的导入、使用和函数导入、使用。 函数函数是带名字的代码块，用于完 成具体的工作。要执行函数定义的特定任务，可调用该函数。需要在程序中多次 执行同一项任务时，你无需反复编写完成该任务的代码，而只需调用 执行该任务的函数，让Python运行其中的代码。 定义函数定义函数的关键字：def，由此来告诉Python这是一个函数。 代码示例： 123456def hello_user(): "函数体说明部分" mes = "你好我是森林" print(mes) hello_user() def关键字定义函数；hello_user()是该函数的函数名；冒号定义结尾；冒号后面到缩进结尾表示该函数的函数体，也就是函数需要做什么。上述函数就是打印一个变量。执行结果为：你好我是森林。而最后一行表示调用函数名为hello_user()的函数。 向函数传递信息在函数名后面的括号可以进行传参操作，例如传入简单的用户名。 代码示例： 12345def get_user(username): """用户信息""" print("我的名字叫: " + username) get_user("你好我是森林") 执行结果： 1我的名字叫：你好我是森林 实参和形参方法在定义的时候的参数称为形参，函数完成其工作所需的一项信 息；函数在调用的时候传入的参数称为实参。 例如在上面的代码中，get_user(username)的username未形参，而调用的时候输入你好我是森林`为实际参数。 传递实参鉴于函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式很多，可使用位置实参，这要求实参的顺序与形参的顺序相同;也可使用关键字实参，其中每个实参都由变量名和值组成;还可使用列表和字典。 位置实参调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序。这种关联方式被称为位置实参。 12345def get_user(type,value): """用户信息""" print("我的" + type + "是: " + value) get_user("年龄",'18') 根据type的类型传入的值，输入不一样的结果。传入的年龄就存入函数的type变量中，88就存入value变量中。这样就能够完整的输出。结果为：我的年龄是: 88。 根据这个结果可以推出，该函数可以被多次调用。例如： 12345678def get_user(type,value): """用户信息""" print("我的" + type + "是: " + value) get_user("年龄",'18')get_user("体重",'100')get_user("身高",'180')get_user("性别",'男') 输出的结果是： 1234我的年龄是: 18我的体重是: 100我的身高是: 180我的性别是: 男 需要注意的是传参的位置很重要。如果传参顺序出错，就容易出现笑话。 例如: 12345678def get_user(type,value): """用户信息""" print("我的" + type + "是: " + value) get_user("年龄",'18')get_user("100",'体重')get_user("100",'身高')get_user("男",'性别') 运行的结果： 1234我的年龄是: 18我的100是: 体重我的100是: 身高我的男是: 性别 关键字实参关键字实参是传递给函数的名称—值对。直接在实参中将名称和值关联起来了，因此向函数传递实参时不会混淆。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。 代码示例： 123456def get_user(type,value): """用户信息""" print("我的" + type + "是: " + value) get_user("年龄",'18')get_user(value="18",type = 'age') 运行结果 12我的年龄是: 18我的age是: 18 默认值编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用 指定的实参值;否则，将使用形参的默认值。因此，给形参指定默认值后，可在函数调用中省略相应的实参。使用默认值可简化函数调用，还可清楚地指出函数的典型用法。 代码示例： 123456def get_user(type,value = '19'): """用户信息""" print("我的" + type + "是: " + value) get_user("年龄",'18')get_user("年龄") #没有传值 运行结果： 12我的年龄是: 18我的年龄是: 19 使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参。 这让Python依然能够正确地解读位置实参。 等效的函数调用鉴于可混合使用位置实参、关键字实参和默认值，通常有多种等效的函数调用方式。基于这种定义，在任何情况下都必须给函数提供实参;指定该实参时可以使用位置方式，也可以使用关键字方式。同样，指定该实参时可以使用位置方式，也可以使用关键字方式。 返回值函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回 的值被称为返回值。在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。 返回简单值代码示例： 1234567def get_user_info(type,info): """返回用户信息""" user_info = "我的" + type + "是: " + info return user_info.title()user_info = get_user_info('身高','190')print(user_info) 运行结果： 1我的身高是: 190 返回一条字符串类型的用户的信息，然后赋值给变量user_info，最后打印输出。 让实参变成可选的在某些时候我们的参数可能不是必选，但是需要设置默认值就可以决定是否需要传参。 返回字典将用户的信息存储在字典中。 1234567def build_person(first_name, last_name): """返回一个字典，其中包含有关一个人的信息""" person = &#123;'first': first_name, 'last': last_name&#125; return personmusician = build_person('jimi', 'hendrix')print(musician) 同时该字典还可以不断的增加。例如新增返回年龄。 调用函数： 123456789def build_person(first_name, last_name,age=''): """返回一个字典，其中包含有关一个人的信息""" person = &#123;'first': first_name, 'last': last_name&#125; if age: person['age'] = age return person musician = build_person('jimi', 'hendrix',age=19)print(musician) 返回结果： 1&#123;'first': 'jimi', 'last': 'hendrix', 'age': 19&#125; 传递列表向函数传递列表很有用，这种列表包含的可能是名字、数字或更复杂的对象(如字典)。将列表传递给函数后，函数就能直接访问其内容。 代码示例： 1234567def greet_users(names): """向列表中的每位用户都发出简单的问候""" for name in names: msg = "Hello, " + name + "!" print(msg)usernames = ['Hannah', 'Ty', 'Margot'] greet_users(usernames) 传入一个列表，进行循环遍历打印，然后得到如下结果。 运行结果： 123Hello, Hannah!Hello, Ty!Hello, Margot! 在函数中修改列表由上面的例子可以得出，函数在遍历的过程中是可以通过一些函数进行修改的。例如将传入的值全部变为大写。代码如下： 1234567def greet_users(names): """向列表中的每位用户都发出简单的问候""" for name in names: msg = "Hello, " + name.upper() + "!" print(msg)usernames = ['hannah', 'ty', 'margot'] greet_users(usernames) 当然，也可以进行复杂的修改操作。例如把传入的列表复制给第二个列表；同样，我们也可以紧致修改列表。 禁止函数修改列表将列表的副本传递给函数就可以实现没有修改列表。切片表示法[:]创建列表的副本。语法如下： 1function_name(list_name[:]) 传递任意数量的实参利用*定义为一个空元组就可以将所有传入的实参都进行打印。例如： 123456def make_pizza(*toppings): """打印顾客点的所有配料""" print(toppings) make_pizza('pepperoni')make_pizza('mushrooms', 'green peppers', 'extra cheese') 无论传入多少值都可以被打印出来。 结合使用位置实参和任意数量实参如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。`Python·先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。 12345678def make_pizza(size, *toppings): """概述要制作的比萨""" print("\nMaking a " + str(size) + "-inch pizza with the following toppings:") for topping in toppings: print("- " + topping) make_pizza(16, 'pepperoni')make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese') 使用任意数量的关键字实参有时候，需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量的键—值对——调用语句提供了多少就接受多少。只要坚持一个原则，无论用户输入的实参有多少信息，采用遍历的方式将其逐步返回，然后打印就可以实现无论用户输入什么信息就返回。 将函数存储在模块中函数的优点之一是，使用它们可将代码块与主程序分离。通过给函数指定描述性名称，可让 主程序容易理解得多。你还可以更进一步，将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。import语句允许在当前运行的程序文件中使用模块中的代码。 导入整个模块要让函数是可导入的，得先创建模块。模块是扩展名为.py的文件，包含要导入到程序中的代码。创建模块代码示例： 123456def make_pizza(size, *toppings): """概述要制作的比萨""" print("\nMaking a " + str(size) + "-inch pizza with the following toppings:") for topping in toppings: print("- " + topping) 保存为make_pizza.py的文件，然后创建一个新的文件make.py。代码如下： 123import make_pizzamake_pizza.make_pizza(16, 'pepperoni') 运行后结果如下： 123➜ day8 python make.pyMaking a 16-inch pizza with the following toppings:- pepperoni 导入模块的某些函数既然可以导入整个模块，说明是能完全读取整个模块的信息，同理，可以推出，我们导入文件的时候是不是可以将某些函数导入进入使用呢？具体的语法如下： 导入某一个函数： 1from module_name import function_name 导入某些函数，也就是多个函数： 1from module_name import function_0, function_1, function_2 具体的使用方法同理，相当于该函数就可以被调用，和函数调用一致，没有什么区别。即： 123from pizz import make_pizzmake_pizz(12,'demo_pizz') 使用as给函数指定别名某些业务的需求，函数名可能有特别长，但是在新的模块文件中，我们不需要这样的函数名，一来影响代码的美观；二来对开发人员不太友好，于是采用关键字as可以给函数取一个在新的模块中的别名。具体的语法如下： 1from module_name import function_name as fun_name 在这里可以看到fun_name就是起的别名，在调用的时候就可以直接采用fun_name进行调用。具体调用方法如下： 123from pizz import make_install_pizz_div as mpipmpip(14,'pizz_name') 具体的调用和实际导入的函数没有什么区别，同样的使用。但是为了提高代码的可读性，建议最好将别名取的有意义。 使用as给模块指定别名由使用as给函数指定别名可以推出，同样可以为模块取一个更有意义或者更适合自己的别名。在日常的Python开发中，常用的库或模块有很多，我们同样可以进行别名的方式来实现。具体语法如下： 1import module_name as mn 使用方式不再阐述，和没有指定别名的方式是一样的。 导入模块中的所有函数在日常开发中*通常是通配符的意思，所以我们要实现一个导入模块的所有函数可以用*来实现。具体语法如下： 1from module_name import * 调用对应函数的方法和上面类似，不做过多的阐述。 函数编写指南 原文内容。 编写函数时，需要牢记几个细节。应给函数指定描述性名称，且只在其中使用小写字母和下划线。描述性名称可帮助你和别人明白代码想要做什么。给模块命名时也应遵循上述约定。 每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式。文档良好的函数让其他程序员只需阅读文档字符串中的描述就能够使用它:他们完全可以相信代码如描述的那样运行;只要知道函数的名称、需要的实参以及返回值的类型，就能在自己的程序中使用它。 给形参指定默认值时，等号两边不要有空格。PEP 8建议代码行的长度不要超过79字符，这样 只要编辑器窗口适中，就能看到整行代码。如果形参很多，导致函数定义的长度超过了79字符，可在函数定义中输入左括号后按回车键，并在下一行按两次Tab键，从而将形参列表和只缩进一层的函数体区分开来。大多数编辑器都会自动对齐后续参数列表行，使其缩进程度与你给第一个参数列表行指定的 缩进程度相同: 如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开，这样将更容易知道前一个函数在什么地方结束，下一个函数从什么地方开始。所有的import语句都应放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习06天]]></title>
    <url>%2Fposts%2F4583%2F</url>
    <content type="text"><![CDATA[主要内容： 用户输入和while循环； 利用while处理列表和字典。 用户输入和while循环函数input()的工作原理函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在 一个变量中，以方便你使用。 代码示例: 12input_res = input("输入你最喜欢的食物:")print(input_res) 编写清晰的程序有时候，提示可能超过一行，例如，你可能需要指出获取特定输入的原因。在这种情况下， 可将提示存储在一个变量中，再将该变量传递给函数input()。 代码示例: 1234prompt = "If you tell us who you are, we can personalize the messages you see."prompt += "\nWhat is your first name? "name = input(prompt)print("\nHello, " + name + "!") 第1行将消息的前半部分存储在变量prompt中; 在第2行中，运算符+=在存储在prompt中的字符串末尾附加一个字符串。 使用int()来获取数值输入使用函数input()时，Python将用户输入解读为字符串。如果用户输入的值需要进行和数字比较，就会发生错误，这个时候就需要转换一下。可以采用int()来进行字符串和整型之间的转换 代码示例:1234567age = input("请输入你的年龄: ")age = int(age)if age &gt;= 18: print("你已经成年")else: print("你还未成年") 运行示例: 123456➜ day6 python int.py请输入你的年龄: 12你还未成年➜ day6 python int.py请输入你的年龄: 18你已经成年 求模运算符处理数值信息时，求模运算符(%)是一个很有用的工具，它将两个数相除并返回余数。求模运算符不会指出一个数是另一个数的多少倍，而只指出余数是多少。如果一个数可被另一个数整除，余数就为0，因此求模运算符将返回0。 代码示例: 123456&gt;&gt;&gt; 4 % 31&gt;&gt;&gt; 5 % 10&gt;&gt;&gt; 4 % 20 利用这一点来判 断一个数是奇数还是偶数: 123456number = input("Enter a number, and I'll tell you if it's even or odd: ") 13 number = int(number) if number % 2 == 0: print("\nThe number " + str(number) + " is even.")else: print("\nThe number " + str(number) + " is odd.") while 循环简介for循环用于针对集合中的每个元素都一个代码块，而while循环不断地运行，直到指定的条 件不满足为止。 使用while循环1234current_number = 1while current_number &lt;= 5: print(current_number) current_number += 1 在第1行，我们将current_number设置为1，从而指定从1开始数。接下来的while循环被设置 成这样:只要current_number小于或等于5，就接着运行这个循环。循环中的代码打印 current_number的值，再使用代码current_number += 1(代码current_number = current_number + 1的简写)将其值加1。只要满足条件current_number &lt;= 5，Python就接着运行这个循环。 让用户选择何时退出123456prompt = "\nTell me something, and I will repeat it back to you:"prompt += "\nEnter 'quit' to end the program. "message = "" while message != 'quit': message = input(prompt) print(message) 只有当用户输入quit的时候才能推出，否者一直不能退出。 采用标志在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量被称为标志，充当了程序的交通信号灯。你可让程序在标志为True时继续运 行，并在任何事件导致标志的值为False时让程序停止运行。这样，在while语句中就只需检查一 个条件——标志的当前值是否为True，并将所有测试(是否发生了应将标志设置为False的事件) 都放在其他地方，从而让程序变得更为整洁。 使用break退出循环要立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break语句。break语句用于控制程序流程，可使用它来控制哪些代码行将执行，哪些代码行不执行，从而让程序按你的要求执行你要执行的代码。 在循环中使用continue要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它 不像break语句那样不再执行余下的代码并退出整个循环。 避免无限循环每个while循环都必须有停止运行的途径，这样才不会没完没了地执行下去。每一个循环必须要有一个可结束的条件。 使用while循环来处理列表和字典for循环是一种遍历列表的有效方式，但在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。通过将while循环同列表和字典结合起来使用，可收集、存储并组织大量输入，供以后查看和显示。主要的处理有：在列表之间移动元素；删除包含特定值的所有列表元素；使用用户输入来填充字典等。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习05天]]></title>
    <url>%2Fposts%2F21991%2F</url>
    <content type="text"><![CDATA[主要内容： 字典的介绍和基本使用； 遍历字典和字典嵌套相关知识； 字典及其使用在Python中，字典是一系列键—值对。每个键都与一个值相关联，你可以使用键来访问与之 相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何Python对 象用作字典中的值。在Python中，字典用放在花括号{}中的一系列键—值对表示。键—值对是两个相关联的值。指定键时，Python将返回与之相关联的值。键和值之间用冒号 分隔，而键—值对之间用逗号分隔。在字典中，你想存储多少个键—值对都可以。最简单的字典只有一个键—值对。 123alien_0 = &#123;'color': 'green', 'points': 5&#125;print(alien_0['color']) print(alien_0['points']) 访问字典的值要获取与键相关联的值，可依次指定字典名和放在方括号内的键。 12alien_0 = &#123;'color': 'green'&#125;print(alien_0['color']) 字典中可包含任意数量的键—值对。 1alien_0 = &#123;'color': 'green', 'points': 5&#125; 添加键-值对字典是一种动态结构，可随时在其中添加键—值对。要添加键—值对，可依次指定字典名、用 方括号括起的键和相关联的值。 1234alien_0 = &#123;'color': 'green', 'points': 5&#125;print(alien_0)alien_0['y_position'] = 25print(alien_0) 运行结果: 12&#123;'color': 'green', 'points': 5&#125; 13&#123;'color': 'green', 'points': 5, 'y_position': 25&#125; 注意，键—值对的排列顺序与添加顺序不同。Python不关心键—值对的添加顺序， 而只关心键和值之间的关联关系。 创建一个空字典方法：用一对空的花括号定义一个字典，再分行添加各个键—值对。使用字典来存储用户提供的数据或在编写能自动生成大量键—值对的代码时，通常都需要先 定义一个空字典。 代码: 123alien_0 = &#123;&#125;alien_0['color'] = 'green' alien_0['points'] = 5print(alien_0) 结果: 1&#123;'color': 'green', 'points': 5&#125; 修改字典中的值要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。 代码示例: 1234alien_0 = &#123;'color': 'green'&#125;print("The alien is " + alien_0['color'] + ".")alien_0['color'] = 'yellow'print("The alien is now " + alien_0['color'] + ".") 运行结果: 12The alien is green.The alien is now yellow. 删除键—值对对于字典中不再需要的信息，可使用del语句将相应的键—值对彻底删除。使用del语句时， 必须指定字典名和要删除的键。 123alien_0 = &#123;'color': 'green', 'points': 5&#125;print(alien_0)del alien_0['points'] print(alien_0) 遍历字典一个Python字典可能只包含几个键—值对，也可能包含数百万个键—值对。鉴于字典可能包含 大量的数据，Python支持对字典遍历。字典可用于以各种方式存储信息，因此有多种遍历字典的 方式:可遍历字典的所有键—值对、键或值。 遍历所有的键-值对123456789user_0 = &#123; 'username': 'efermi', 'first': 'enrico', 'last': 'fermi',&#125;for key, value in user_0.items(): print("\nKey: " + key) print("Value: " + value) for语句的第二部分包含字典名和方法items()，它返回一个键—值对列表。 遍历字典中的所有键keys()获取字典的所有值。 代码示例: 12345678favorite_languages = &#123; 'jen': 'python', 'sarah': 'c', 'edward': 'ruby', 'phil': 'python', &#125;for name in favorite_languages.keys(): print(name) 运行结果: 1234jensarahedwardphil 遍历字典中的所有值values()获取字典的所有值。set()可以去除重复的值。 代码示例: 123456789101112favorite_languages = &#123; 'jen': 'python', 'sarah': 'c', 'edward': 'ruby', 'phil': 'python', &#125;for name in favorite_languages.values(): print(name)print("去重复的值")for name in set(favorite_languages.values()): print(name) 运行结果: 12345678pythoncrubypython去重复的值pythoncruby 嵌套有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典。 字典列表代码示例: 12345678alien_0 = &#123;'color': 'green', 'points': 5&#125;alien_1 = &#123;'color': 'yellow', 'points': 10&#125;alien_2 = &#123;'color': 'red', 'points': 15&#125;aliens = [alien_0, alien_1, alien_2]for alien in aliens: print(alien) 运行结果: 123&#123;'color': 'green', 'points': 5&#125;&#123;'color': 'yellow', 'points': 10&#125;&#123;'color': 'red', 'points': 15&#125; 在字典中存储列表每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表。 代码示例: 1234pizza = &#123; 'crust': 'thick', 'toppings': ['mushrooms', 'extra cheese'], &#125; 列表和字典的嵌套层级不应太多。如果嵌套层级比前面的示例多得多，很可能有更简单 的解决问题的方案。 在字典中存储字典代码示例: 1234567891011users = &#123; 'aeinstein': &#123; 'first': 'albert', 'last': 'einstein', 'location': 'princeton', &#125;, 'mcurie': &#123; 'first': 'marie', 'last': 'curie', 'location': 'paris', &#125;,&#125; 首先定义了一个名为users的字典，其中包含两个键:用户名&#39;aeinstein&#39;和&#39;mcurie&#39;; 与每个键相关联的值都是一个字典，其中包含用户的名、姓和居住地。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习04天]]></title>
    <url>%2Fposts%2F43494%2F</url>
    <content type="text"><![CDATA[主要内容：条件判断和if语句的使用； 认识条件判断在日常开发中需要用到如果怎么样就怎么样，否则就怎么样的逻辑。主要采用if语句来实现的。 例如：假设你有一个汽车 列表，并想将其中每辆汽车的名称打印出来。对于大多数汽车，都应以首字母大写的方式打印其 名称，但对于汽车名&#39;bmw&#39;，应以全大写的方式打印。下面的代码遍历一个列表，并以首字母大 写的方式打印其中的汽车名，但对于汽车名&#39;bmw&#39;，以全大写的方式打印: 123456cars = ['audi', 'bmw', 'subaru', 'toyota']for car in cars: if car == 'bmw': print(car.upper()) else: print(car.title()) 运行结果: 1234AudiBMWSubaruToyota 条件测试每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。 判断是否相等相等的语句是:==，赋值的语句是:=，两者需要作区分。 12c = 'like'print(c == 'Like') 运行结果:False 如果需要或略大小写可以采用将其转化为小写的方式，函数为:lower()。其余的逻辑同理。 判断是否不相等语句:!=，其余的逻辑类似，不过多阐述。 比较数字 条件语句中可包含各种数学比较，如小于、小于等于、大于、大于等于。 代码示例： 123456&gt;&gt;&gt; num = 29&gt;&gt;&gt; num &lt; 21False&gt;&gt;&gt; num &gt;= 4True&gt;&gt;&gt; 多个条件判断多个条件判断将条件采用关键字and连接，只有全部为true才能满足，否则整体条件就为false。如果是或者的关系采用关键字or，只要满足其中的一个整体条件就为true。如果不确定优先级(或者可读性)的问题，可以采用括号就没个单个条件括起来。 代码示例： 1234567891011121314&gt;&gt;&gt; age_0 = 22 &gt;&gt;&gt; age_1 = 18&gt;&gt;&gt; age_0 &gt;= 21 and age_1 &gt;= 21 False&gt;&gt;&gt; age_1 = 22&gt;&gt;&gt; age_0 &gt;= 21 and age_1 &gt;= 21 True&gt;&gt;&gt; age_0 = 22 &gt;&gt;&gt; age_1 = 18&gt;&gt;&gt; age_0 &gt;= 21 or age_1 &gt;= 21 True&gt;&gt;&gt; age_0 = 18&gt;&gt;&gt; age_0 &gt;= 21 or age_1 &gt;= 21 &gt;&gt;&gt; False 采用括号的形式提高可读性和解决优先级的问题。 1(age_0 &gt;= 21) and (age_1 &gt;= 21) 检查特定的值是否包含在列表中要判断特定的值是否已包含在列表中，可使用关键字in。 代码示例： 12345&gt;&gt;&gt; requested_toppings = ['mushrooms', 'onions', 'pineapple']&gt;&gt;&gt; 'mushrooms' in requested_toppingsTrue&gt;&gt;&gt; 'pepperoni' in requested_toppingsFalse 检查特定的值是否不包含在列表中确定特定的值未包含在列表中，可使用关键字not in。 使用方法和上面判断是否在列表中一致。 布尔表达式布尔表达式的结果要么为True，要么为False,布尔值通常用于记录条件。 if语句简单的if语句代码示例: 123num = 34if num &gt;= 18: print("恭喜，您已经成年") if-else语句代码示例: 12345num = 16if num &gt;= 18: print("恭喜，您已经成年")else: print("你好，你未成年呢") if-elif-else 结构1234567num = 16if num &gt;= 18: print("恭喜，您已经成年")elif num &gt; 15: print("你好，还差3年就成年")else: print("122") elif可以连续多次使用，多加判断即可。同时在某些时候可以省略else的部分。 使用if语句处理列表检查特殊元素1234567requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']for requested_topping in requested_toppings: if requested_topping == 'green peppers': print("Sorry, we are out of green peppers right now.") else: print("Adding " + requested_topping + ".")print("\nFinished making your pizza!") 循环的时候可以进行判断，然后即可，同时还可以判断是否为空列表。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习03天]]></title>
    <url>%2Fposts%2F56807%2F</url>
    <content type="text"><![CDATA[主要内容： 使用列表：切片，遍历切片，复制切片； 元组的定义，遍历元组，修改元组变量； 使用列表切片要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range()一样，Python 在到达你指定的第二个索引前面的元素后停止。要输出列表中的前三个元素，需要指定索引0~3， 这将输出分别为0、1和2的元素。 代码示例: 123456players = ['charles', 'martina', 'michael', 'florence', 'eli']print(players[0:3]) # 取从索引0开始到第三个结束，最后输出前三个print(players[0:3]) # 输出从索引1到4结束，print(players[:4]) # 没有索引就从列表开头开始，到指定的索引值结束print(players[2:]) # 没有结束索引就知道最后结束print(players[-3:]) # 倒数第三个 运行结果: 12345['charles', 'martina', 'michael']['charles', 'martina', 'michael']['charles', 'martina', 'michael', 'florence']['michael', 'florence', 'eli']['michael', 'florence', 'eli'] 遍历切片前面我们遍历列表的时候采用for语句来实现的，同理，切片同样可以采用for语句来实现。 代码示例: 1234players = ['charles', 'martina', 'michael', 'florence', 'eli']print("Here are the first three players on my team:")for player in players[:3]: print(player.title()) 运行结果: 1234Here are the first three players on my team:CharlesMartinaMichael 复制切片要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引([:])。 这让Python创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表。复制的过程中可以进行赋值或者修改操作。例如新增一个元素。 代码示例: 12345678my_foods = ['pizza', 'falafel', 'carrot cake']friend_foods = my_foods[:]my_foods.append('cannoli')friend_foods.append('ice cream')print("My favorite foods are:")print(my_foods)print("\nMy friend's favorite foods are:")print(friend_foods) 代码结果: 12345My favorite foods are:['pizza', 'falafel', 'carrot cake', 'cannoli']My friend's favorite foods are:['pizza', 'falafel', 'carrot cake', 'ice cream'] 元组定义元组列表是可以修改的，主要适合存储程序在运行期间可能会变化的数据。如果需要创建不可修改的值就需要用元组，所以元组可以理解为:不可被修改的列表。但是元组采用的是方括号来标识。和列表同理，均可采用索引来访问元素。 代码示例: 123change_list = ('one','two','three','four') #定义一个元组 print(change_list[0]) #取元组索引为0 的值change_list[1] = 'hello' #修改元组中索引为1的值 会被报错，因为元组不可以被修改。 遍历元组遍历元组和遍历列表一样，采用for 来实现。 代码如下: 123change_list = (1,2,3,4)for number in change_list: print(number) 运行结果: 12341234 修改元组变量修改元组的变量不等于修改元组的元素，也就是给存储元组的变量赋值。 代码示例: 1234567change_list = (1,2,3,4)for number in change_list: print(number) change_list = (11,22,33,444)for number in change_list: print(number) 运行结果: 123456781234112233444]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习02天]]></title>
    <url>%2Fposts%2F3226%2F</url>
    <content type="text"><![CDATA[主要内容： 遍历列表，创建列表，range()函数使用； 统计列表数值，列表解析； 通过循环的方式遍历列表通常情况下，我们需要对列表的所有元素进行操作，这个时候就需要遍历整个列表。循环采用for。 语法: 12for change_name in list_name: print(change_name) 代码示例: 123magicians = ['alice', 'david', 'carolina']for magician in magicians: print(magician) 运行结果: 123alicedavidcarolina 循环的含义其实是将列表的值逐一取出，然后进行其他操作。例如拼接、赋值、运算等。 代码示例: 123magicians = ['alice', 'david', 'carolina']for magician in magicians: print(magician.upper() + ", that was a great trick!") 运行结果: 123ALICE, that was a great trick!DAVID, that was a great trick!CAROLINA, that was a great trick! 注意事项: python中语法需要注意的主要是忘记缩进和不必要的缩进; 列表后面的:不能遗漏; 对于位于for语句后面且属于循环组成部分的代码行，一定要缩进。 例如: 123magicians = ['alice', 'david', 'carolina']for magiciand in magicians:print(magiciand) 错误提示: 1234 File "for.py", line 3 print(magiciand) ^IndentationError: expected an indented block 创建数值列表range()函数认识range()函数产生指定范围的随机值。 代码示例: 12for value in range(1,7): print(value) 运行结果: 1234567➜ day2 python range.py123456 需要注意的是这是函数的使用，可以理解为[1,7); range()函数创建数字列表要创建数字列表，可使用函数list()将range()的结果直接转换为列表。如果将range()作为list()的参数，输出将为一个数字列表。同时还可以指定步长。 代码示例: 1234range_num = list(range(1,4))print(range_num)range_num_two = list(range(1,20,2))#指定步长print(range_num_two) 运行结果: 12[1, 2, 3][1, 3, 5, 7, 9, 11, 13, 15, 17, 19] 统计数字列表的值min() :找出列表的最小值;max() :找出列表的最大值;sum() :求和; 代码示例: 1234list = [1,2,3,4,5,6,7]print(min(list))print(max(list))print(sum(list)) 运行结果: 1231728 列表解析代码示例: 12squares = [value**2 for value in range(1,11)]print(squares) 要使用这种语法，首先指定一个描述性的列表名，如squares;然后，指定一个左方括号， 并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为value**2，它计 算平方值。接下来，编写一个for循环，用于给表达式提供值，再加上右方括号。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习01天]]></title>
    <url>%2Fposts%2F7874%2F</url>
    <content type="text"><![CDATA[主要内容： 列表概念，访问列表元素，修改列表元素; 删除列表元素，添加列表元素，组织列表; 列表概念列表由一系列按特定顺序排列的元素组成。可以创建包含字母表中所有字母、数字0~9或 所有家庭成员姓名的列表;也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。鉴于列表通常包含多个元素，给列表指定一个表示复数的名称(如letters、digits或names)是 个不错的主意。 语法用方括号([])来表示列表，并用逗号来分隔其中的元素。 12bicycles = ['demo', 'chen', 'sen', 'lin']print(bicycles) 访问列表元素访问列表中的元素是通过索引获取的，而索引是从0开始的。 12345bicycles = ['demo', 'chen', 'sen', 'lin']print(bicycles)print("取第0个索引:" + bicycles[0])print("取第1个索引:" + bicycles[1])print("取第最后一个索引的值:" + bicycles[-1]) 运行结果： 12345➜day1 python dsc.py['demo', 'chen', 'sen', 'lin']取第0个索引:demo取第1个索引:chen取第-1个索引:lin 结合第0天的知识，我们现在对列表元素进行拼接的操作。 123bicycles = ['demo', 'chen', 'sen', 'lin']res = "My name is " + bicycles[0] + "!";print(res) 运行结果： 1My name is demo! 修改列表元素修改元素的值可以理解为通过索引获取需要修改的值，然后重新赋值。 代码示例: 1234bicycles = ['demo', 'chen', 'sen', 'lin']print(bicycles)bicycles[1] = 'Name';print(bicycles) 可以理解为: 123456bicycles = ['demo', 'chen', 'sen', 'lin']print(bicycles)change_res = bicycles[1];change_res = 'Name';bicycles[1] = change_res;print(bicycles) 运行结果: 12['demo', 'chen', 'sen', 'lin']['demo', 'Name', 'sen', 'lin'] 添加列表元素添加元素主要有两种方式：列表末尾添加元素，列表中插入元素(包含开头)。其中不能影响其他的元素。 代码示例: 1234bicycles = ['demo', 'chen', 'sen', 'lin']print(bicycles)bicycles.append('good')print(bicycles) 运行结果： 12['demo', 'chen', 'sen', 'lin']['demo', 'chen', 'sen', 'lin', 'good'] 甚至可以创建一个没有任何的元素空的列表，然后不断的追加元素。或者可以从开头或者中间插入元素。 代码示例: 12345null_list = []null_list.append('hello')null_list.append('senlin')null_list.append('chen')print(null_list) 运行结果: 1['hello', 'senlin', 'chen'] insert()可以在任意位置添加元素。 代码示例: 123in_list = ['hello', 'senlin', 'chen']in_list.insert(1, 'name')print(in_list) 运行结果: 1['hello', 'name', 'senlin', 'chen'] 删除列表元素删除元素的方法有:del删除、pop()弹出删除、根据值删除。 代码示例: 12345678list = ['on','list','time','man','like','goods']del list[0]print("删除第0个元素的值",list)print("弹出删除第最后一个元素的值",list.pop())print("弹出删除第一个元素的值",list.pop(1))print(list)print("根据值删除",list.remove('man'))print(list) 运行结果: 123456删除第0个元素的值 ['list', 'time', 'man', 'like', 'goods']弹出删除第最后一个元素的值 goods弹出删除第一个元素的值 time['list', 'man', 'like']根据值删除 None['list', 'man'] 组织列表组织列表中主要是针对列表进行排序等操作。排序分为临时排序(sorted())和永久排序(sort())。reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排 列顺序:reverse()永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。 代码示例: 123456789cars = ['bmw', 'audi', 'toyota', 'subaru']cars.sort()print(cars) #根据字母永久排序cars = ['bmw', 'audi', 'toyota', 'subaru']cars.sort(reverse=True)print(cars) #根据字母相反方向永久排序cars = ['bmw', 'audi', 'toyota', 'subaru']cars.reverse()print(cars) #倒着打印列表 运行结果: 1234['audi', 'bmw', 'subaru', 'toyota']['audi', 'bmw', 'subaru', 'toyota']['toyota', 'subaru', 'bmwmw', 'audi']['subaru', 'toyota', 'audi', 'bmw'] 获取元素长度代码示例: 123cars = ['bmw', 'audi', 'toyota', 'subaru']res = len(cars)print(res) 运行结果为：4 至此，第三章的列表已经学习完毕，本章的函数不是特别多。主要的知识点有概念，获取值，修改和排序等操作。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习00天]]></title>
    <url>%2Fposts%2F39399%2F</url>
    <content type="text"><![CDATA[主要内容： Python安装运行，变量； 数据类型：字符串，数字，空白，注释； 安装和准备主要查询官网文档即可解决。官网地址：https://www.python.org Hello World终端运行 命令行运行新建以.py结尾的文件，例如hello.py;打开该文件，输入：print(&quot;Hello World&quot;);,最后运行：python hello.py ; 数据类型变量基本使用变量就是保存一个值的信息，将其存储起来，随着程序后面的不断赋值（要求存储一个新的值），该变量的值也会随着改变。如下图所示，change变量就是被重新赋值了。 运行结果如下： 123➜day0 python hello.pyHello SenLin Chen!Hello Python SenLin! 语法和规则语法：变量名=赋值的值，例如change是变量名，Hello SenLin Chen!是赋值的值。这样变量change的值就是:Hello SenLin Chen!; 规则： 变量名只能包含字母、下划线和数字。数字不能开头。不能包含空格。例如:12_name;合格写法：user_name； 不能用python的关键字和函数名作为变量名，因为已经被用了，这么想就没事了。 变量名应该见名知意，尽可能简短。 字符串含义用引号括起来就是字符串。其中有单引号和双引号。例如：&#39;string&#39;,&quot;user_name&quot;等。 修改字符串大小写常用方法: title():将字符串的首字母设置为大写; upper():将字符串全部设置为大写; lower():将字符串全部设置为小写; 代码示例: 1234change = 'hello,my name is demo chen!'print(change.title())print(change.upper())print(change.lower()) 运行结果: 1234➜ day0 python hello.pyHello ,My Name Is Demo Chen!HELLO ,MY NAME IS DEMO CHEN!hello ,my name is demo chen! 拼接字符串使用场景:多个字符串合并为一个字符串形式。 使用方法:采用+的形式来拼接。 代码示例: 123user = 'hello'name = 'senlin'user_name = user + '_' + name 运行结果: 12➜day0 python user_name.pyhello_senlinenlin 添加空白制表符:\t;换行:\n ;可以组合使用。 删除空白&#39;demo &#39;不等于‘demo’;所以需要去除空白。 相关函数: rstrip():去除末尾的空白;lstrip():去除开头的空白;strip():去除开头和末尾的空白; 数字数字主要有整数和浮点数。主要的运算有:加(+)、减(-)、乘(*)、除(/)、乘方(**)等 代码示例: str():将非字符串表示为字符串。 注释#为Python注释的语法。 代码示例:]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
        <tag>Python从入门到实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大流量网站该如何配置优化]]></title>
    <url>%2Fposts%2F60091%2F</url>
    <content type="text"><![CDATA[服务器、静态化、数据库优化、负载均衡应多管齐下。 初步的优化方案： 1、服务器环境的选择，建议采用Linux服务器。选择理由：毕竟Linux现在的市场主要是服务器领域，其次开源的，如果网站发展到一定的水平，选择开源与否决定了网站以后的命运。 2、采用Nginx作为HTTP服务器，是由俄罗斯人开发的，俄罗斯人在计算机软件方面是很出色的，包括像世界第一杀毒软件卡巴斯基就是俄罗斯出品。 3、页面纯静态化，不要使用伪静态，如果是非静态页面，都需要服务器端利用一定的CPU资源进行编译之后才能显示出来，而静态页面则直接显示，另外千万不能使用伪静态，伪静态实际上只是为了迎合搜索引擎而产生的一门技术，在使用过程中，会加大服务器的资源消耗，当访问量大的时候要慎用。 4、负载均衡技术，通俗点讲就是将网页上的元素分开放置到不同的服务器上来分担单台服务器的压力，如：数据库单独一台服务器，静态页面一台服务器，图片单独一台服务器等等，具体应该视情况而定，流量越大，就越应该分得越细，像国内的门户网站就是这样做的，看看他们的图片就能知道，图片都是用子域名或者其他域名引用在其他图片服务器的。 5、数据库优化，很多大型网站应用的时候大部分世界都花在这个上面，当网站数据变大，访问量上升，数据库首当其冲成为第一个需要解决的瓶颈。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>网站优化</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之礼貌地回避问题]]></title>
    <url>%2Fposts%2F27069%2F</url>
    <content type="text"><![CDATA[转移话题不如转移角度，从大方面回答，直接反问原因。 礼貌地回避问题第一步 转移角度把话题重点转移到对方身上，把对方淡谈话主角自己当配角。回家长辈问婚事相关，反问阿姨请教一下阿姨你们家某某好像挺幸福地，阿姨说说呗。 第二步 提升层次隐私上升大问题，把隐私换成科普，解释机制。从大方面去解释问题背后地机制，而不直接回答具体细节；绕过个人工资细节去科普行业情况。 第三步 追问原因追问对方问这个问题地原因，让提问的人自觉无趣。例如：您为什么这么关心我的事，你是这方面有问题？？]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之在分答上提问]]></title>
    <url>%2Fposts%2F29454%2F</url>
    <content type="text"><![CDATA[分答不需要解释。 用提问赚钱奔小康。 精彩演讲用问题串联第一步 不要问大问题，要问小问题问题太大，太跳跃，答案对你来说没什么用处。例如：如何成为一个好的演讲者？答案：保持平常心。 没什么用 第二步 把问题反过来问一次案件发生后，警察问：有什么没有什么寻常事情发生？侦探问： 当前晚上有没有什么没发生？为什么现在的直播这么火？换一种问法：为什么过去直播没这么火？ 第三步 不要问成功，要问失败的理由失败的理由比成功的原因更有价值 3. 数据结构3.1 管理账户admin 和 unit 用于数据运维，admin 权限大于 unit; admin 和 unit 用于数据运维，admin 权限大于 unit，unit 用户只能看 unit 用户只能看到属于自己的数据，admin 用户可以看到系统 全局的数据。且只有管理员有账户 API 的权限。 3.2 业务账号user 普通用户，direct 导播用户，device 直播机账户。 user 普通用户，direct 导播用户，device 直播机账户。3.3 账号操作 管理员可以创建 unit 用户，user、direct 和 device 均由 unit 管理。 3.3 账号操作管理员可以创建 unit 用户，user、direct 和 device 均由 unit 管理。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之用提问求关注]]></title>
    <url>%2Fposts%2F13349%2F</url>
    <content type="text"><![CDATA[背景： 自己讲话没人听 听众来了，昏昏欲睡 听完没什么影响 精彩演讲用问题串联第一步 用提问吸引对方来听问句作为演讲标题。把所有的小问题总结从一个大问题。吸引注意力(点击率)。 第二步 抛问题扔答案，抓注意力不要太快公布正确答案，小问题引起好奇心。好奇心来自于对于自我经验的挑战。逐步抓住大家的好奇心。 第三步 用小问题引出冷知识，留下深刻影响有趣的比有用的问题比较好。 留下一个冷知识。例如为什么屁会臭？]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之用提问提逼格]]></title>
    <url>%2Fposts%2F19031%2F</url>
    <content type="text"><![CDATA[重要场景: 公司面试最后一句：你对我们公司有什么问题？ 提出有价值的问题顺应充分理解对方的话；从对方所说的话延伸；不要从自己的立场出发； 爱因斯坦问牛顿，如果一个人顺着光跑，跑到哪儿了？ 提升归纳，把一连串的小问题总结一个大问题。总结对方的问题，然后提出来问题，升华。 跳跃遵循对方逻辑。举一反三。把对方的思路跳出来到另一个他自己都没有想到的问题。跨领域，跨学科。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之跟父母打电话]]></title>
    <url>%2Fposts%2F33151%2F</url>
    <content type="text"><![CDATA[哄父母开心的三心技巧：安心 舒心 开心。 三心技巧第一心 细节让父母安心老老实实汇报生活现状。不要大而笼统的说一句：一切都好请放心。看什么电影和哪个朋友吃了什么……. 第二心 用问题使他们舒心别用工作，用他们的得心应手的生活来询问。 第三心 拿对比让他们开心父母年纪大了，不可避免被社会边缘化，要把自己的闪光点告诉父母，你变成别人眼中的”别人家的孩子”。舒缓他们的社交压力。 打电话就是沟通场景，把主动权交给对方。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之把内向变成优势]]></title>
    <url>%2Fposts%2F39869%2F</url>
    <content type="text"><![CDATA[不同性格的人找到让自己舒服和让别人舒服的说话之道。 如何把你得内向变成优势，内向能hold住全场。 内向说话的优势： 表达的缺陷不是缺陷，反而很可爱； 别人接受你是内向的人，别人会给你加分； 适应专注做事情，有工匠精神。 内向说话怎么做： 自嘲。化解紧张气氛，承认自己内向，别人的印象分会有很大的加分。 建立信任。先让别人新人，然后喜欢自己的话。 由小见大。把主题缩小，细致化。真情实感。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之激发别人的善念]]></title>
    <url>%2Fposts%2F26581%2F</url>
    <content type="text"><![CDATA[嘴甜一点，态度低一点，礼貌一点； 如何激发别人的善念，请人帮忙说话的诀窍。 三步回应法第一步 让别人感受到做和不做的差别 诉求要具体，让对方知道有画面感。 A：抱歉我母亲年纪大了，可以请你让个座吗？B：抱歉，我母亲年纪大了，如果这么远的路没人给她让座，她老人家只能坐在地上了。 第二步 努力让对方相信，他的善意不会被糟蹋 善意要扩大，让对方的付出更有意义。 A：抱歉我母亲年纪大，可以请你让个座吗？B：抱歉我母亲年纪大了，如果您愿意让座，我会非常感激，我保证您的好心不会白费，下次如果我遇到其他有需要的人，我一定也会向您一样伸出援手。 第三步 让对方知道自己有选择 让对方有选择。 A：抱歉我母亲年纪大，可以请你让个座吗，拜托拜托，求求你，发发好心把？B： 抱歉我母亲年纪大，可以请你让个座吗，当然这是您的座位，让不让由您来决定。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之鼓励一个不求上进的人]]></title>
    <url>%2Fposts%2F19824%2F</url>
    <content type="text"><![CDATA[如何鼓励一个不求上进的人？ 三步鼓励法第一步 降低他对结果的恐惧不努力是人最后的安全区，让他走出安全区，卸下防御；消除他对后果的恐惧。 第二步 用可能性代替目的性目标很单调大可能性无限，不要做比较，让他打起精神；最忌讳作比较。 第三步 营造愿景而不下达具体指令愿景是感召，而非具体承诺，激励的本质是对个体可能性的探索，而非鼓吹或胁迫人家完成的工具。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之说特别的话]]></title>
    <url>%2Fposts%2F65425%2F</url>
    <content type="text"><![CDATA[场景：婚礼致辞，领导讲话，主持人念广告 如何在大家都不想听的时候说话化腐朽为神奇的艺术 三步表达法第一步 不要装，要点破最尴尬的是假装自己不尴尬，点破就是换了位置，与观众站在一起，调用气氛。 第二步 该讲的还是要讲想清楚讲话的意义和责任，仪式性的场合致辞的意义大于其说话内容。最好说清楚自己的应该要讲的。 第三步 看清楚给谁听仪式性的场合说的话一般不是给观众听的，而是对主办方听的，替观众吐槽一下可以把场面热回来。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之应对反应慢]]></title>
    <url>%2Fposts%2F45767%2F</url>
    <content type="text"><![CDATA[辩论不是说给对方听的，是说给第三方听的，要争取第三方的认可。 慢半拍也能好好说话第一步 复述问题争取时间发现陷阱，用自己的语言复述，荒缪之处自然显示出来。 第二步 慢而不断用一以贯之的逻辑慢慢讲，不能偏离原有逻辑，逻辑线不断。 第三步 化繁为简将大问题归纳小问题，掌握最根本的问题。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之拒绝借钱]]></title>
    <url>%2Fposts%2F38639%2F</url>
    <content type="text"><![CDATA[如何拒绝别人借钱 不伤和气不伤钱的回绝之道 拒绝借钱三要点：第一点 少借不如不借借钱的多少与感情远近相关，自己内心的估算少于对方的，折中都不舒服。 不要回答：借多少？ 第二点 先问原因别问金额把战场放在对方那，把主动权抓在手里，购买行为借钱，请用关切的态度来确定对方缺钱的额原因。 第三点 根据对方的原因给出相似的不错理由可以暗示了最近一段时间都没闲钱。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之谈加薪]]></title>
    <url>%2Fposts%2F49874%2F</url>
    <content type="text"><![CDATA[请求派：不断强调自己过的多苦，通过强调自己的惨况，请求老板加薪； 老板对你的同情 威胁派：摆出自己不爽，长时间被亏待，我觉得你现在不给我加薪，我就离职。 风险太大 谈判的基础基于对方的人品，是不可取的！ 怎么谈加薪？第一步 确认加薪标准最重要的一步。不要一上去就说加薪。 问出老板加薪的客观标准。 可以问：在我们公司里，想我这一层员工，大概要达到什么样的标准才可以加薪？注意，不是在问还需要做什么才能加薪，而是要问在这个公司里面加薪的客观标准是什么？ 这样加薪是否合理的姿态，而不是老板个人决定。 第二步 讨论工作表现大大方方与老板讨论个人表现。假如自己没有达标，通过条件交换。例如在A项目业绩超标，B没有达标，那么可不可以通过A的业绩补偿B的呢？ 第三步 带领老板想想未来老板如果我们得到加薪，我们接下来就可以在项目中更加努力。 总之让老板觉得在公司中给你加薪是未来公司发展最值得的一件事。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之回应认真你就输了]]></title>
    <url>%2Fposts%2F25279%2F</url>
    <content type="text"><![CDATA[吵架。 认真你就输了，死活不讲道理。 三步回应法第一步 想清楚吵架目的争夺话语权，并提出自己解决方案。 第二步 同理反抽根据对方的逻辑得出对方不对的结论。“认真你就输了”。 答：“我们只是在讨论问题，你竟然在计较输赢？” 第三步 降维打架让对方觉得你们不是一个层次的人，你高于对方。 在吵架中取得话语权，并且将对方的重新新的谈判或者辩论，这才是现代谈判的王道！]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之聆听]]></title>
    <url>%2Fposts%2F55821%2F</url>
    <content type="text"><![CDATA[如何成为好的聆听者？ 主动聆听才能打开心门。 聆听不是好好听人家说话。 采用主动式聆听。 主动式聆听三部曲第一步 善用反馈 反馈方式:无声（点头，微笑）和有声（真的呀？….） 例子：郭靖和老顽童？禁忌：不要说我明白你的感受！不要表示理解对方。 第二步 事实重复归纳对方的重点，重复一遍，表达一遍，及时反馈。 第三步 寻找共鸣对方的话题你不合意，就尽量寻找共鸣的话题。 上级说：你喜欢喝啤酒吗？下级：你喝啤酒一般喜欢配什么吃的呢？下级：炸鸡（或者其他）。下级：我超爱吃炸鸡，你喜欢吃哪家店的？ 把啤酒引向了炸鸡（其他） 不要用刻意迎合对方来寻找共鸣。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之对上级说不]]></title>
    <url>%2Fposts%2F54874%2F</url>
    <content type="text"><![CDATA[千万不要对老板说没办法，要说就要说正在想办法； 老板提出来的要求，合理的叫训练，不合理的叫锻炼。 领导也是人，使人总有犯错的时候，做好了是上级的，做不好就是我的错。 对老板说不，不是不行是要讲智慧。 怎么对上级说不第一步 战略上高度肯定取得信任。 表态：表明我没有抵触情绪，理解他的出发点。 第二步 成本上精密核算 用事实和数据证明此事不可行。 最关键的一步。让上级知道这事情划不来，而你也是在尽力执行，不是在和他对着干。详实的论据是你的支撑 第三步 决策权完全上交用中立的态度让领导自己打消念头。 做出决策权完全上交的姿态。 不要让老板觉得他自己算的不好。 不动声色将你的成本核算给他看，绝对不能做。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之你行你上]]></title>
    <url>%2Fposts%2F7736%2F</url>
    <content type="text"><![CDATA[背景：别人在推脱责任的时候，总喜欢说”你行你上”。 原因：对方不想承担自己的责任。 如何对付”你行你上”?第一步 澄清各自的角色和对方没有什么交集，在意的问题能否解决对实际生活影响很小，那可以简单澄清角色不同，责任自然不一样，所有自己不一定要“行”，也不需要“上”。 例子：我想吃个蛋，难不成自己会下蛋？ 第二步 指出对方在逃避有交集，对方制造的问题有影响，就是指出对方的逻辑漏洞。 原话的逻辑是：有能力的该上，没能力的人不该上。 那么，我承认上的人必须有能力，但是就意味着有能力的人必须上吗？ 第三步 锁定对方的责任当对方的存在本身就影响我们的生活，就可以锁定对方的责任。 三个方法没有优劣和先后之别，因场景稍有不同。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之社交喝酒]]></title>
    <url>%2Fposts%2F47410%2F</url>
    <content type="text"><![CDATA[社交不喝酒，肝脏好朋友； 不擅长喝酒，在酒桌上就很尴尬。 饭桌喝酒，也只是活跃饭桌气氛，未闭合其他人沟通。 饭桌策略：最佳配角策略 当作有人都想在饭桌成为那个最闪亮的人的时候，配角就是最耀眼最抢手的。 如何在酒桌上聊天？选择合适的话题一个会聊天的人是让对方对你知无不言言无不尽，饭局结束都觉得意犹未尽。排除对方的工作（万一对方最近工作烦心）、家庭（除非对方主动提起）、我们所认识的共同的某个朋友。 比较合适话题：年轻人聊星座，有孩子的人聊儿女，没有孩子聊业余爱好。 进行合适的提问，延续话题提问的4W循环原则，中间插入我可能没有你这么棒的感慨，让对方兴致勃勃，可以让话题不断延续。 4W循环原则:喜欢什么？哪个种类？为什么？怎么做到的？ 根据话题归纳有点，进行适当的恭维当话题足够深入时候，我们可以概括对方的中心思想，并进行对对方有点的价值升华，展开恭维。 必须赋予人家的爱好，他本人都没有的想到的牛逼意义。 告诉对方，他的爱好表达了什么样的情操？]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
        <tag>沟通表达</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之道歉]]></title>
    <url>%2Fposts%2F19497%2F</url>
    <content type="text"><![CDATA[道歉是人生的加分项！ 道歉两条红线： 第一：绝不能说这件错没有那么严重； 事情不够糟 第二：绝对不能说这件事不全是我的错； 试图澄清自己的责任不够大 怎么道歉 蚂蚁搬大象 道歉的时候尽可能把责任往自己身上揽，甚至包揽到一个夸张的地步，让想要指责你的人不但不会继续落井下石，甚至可能会反过头来劝上两句。 就像一只蚂蚁搬动大象，搬不动的时候要说：是我自己努力不够，准备不充分，才搬不动的。 这样别人就会说，你怎么会这么想呢？你看着大象这么大，怎么可能是你这只小蚂蚁能够搬得动的呢？对呀，你太过苛责自己了。这也不能全怪你，那些当初比你去搬大象的人他们也要检讨自己。 给人的印象就是，你这只蚂蚁想要很努力的搬动大象的责任，同时本人也发自内心的搬不动是自己的错，这样别人才会觉得搬不动真的不是你的错。 例子：包贝尔婚礼闹伴娘事件（红线），皇帝的罪己诏（蚂蚁搬大象）；]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之自我介绍]]></title>
    <url>%2Fposts%2F12298%2F</url>
    <content type="text"><![CDATA[演说如何自我介绍？ 职场面试，念简历者死！ 面试的时候自我介绍是一个坑。 当面试官问让你自我介绍，不是让你把简历（个人信息，奖项，毕业院校…）背一遍； 而更加深层次的含义是你在最短的时间里给人留下的深刻印象的能力 让面试官记住你 主要有三个步骤。 让面试官记住你的的三个步骤第一步 贴标签绰号：形象、生动、概括力，传播力 自己给自己一个标签。 标签的原则：看起来是缺点，其实是特点，仔细想想是优点的标签； 专属于自己的词，不显得自吹自擂，偷偷把自己给夸了 第二步 讲故事一个有趣生动的故事，让自己的标签有画面感，生动鲜活起来； 故事中加入声音，语气、对话，表情等细节 第三步 谈愿景描述和谐的景象，不要自己说的完美，只需要把自己的特点包装成和公司的需要恰到好处。 例如：强迫症。 精心设计，让别人记住你！]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>生活</tag>
        <tag>好好说话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之砍价]]></title>
    <url>%2Fposts%2F12618%2F</url>
    <content type="text"><![CDATA[谈判如何砍价？ 不懂“掀桌”，只能滚蛋！ 掀桌的三步，一步不能缺第一步表达自己想上桌的意愿，给对方一种稳赚的感觉，把对方拉上谈判桌； 第二步等对方上桌之后，告诉对方还有一个不友好的第三者也在这张桌上，为后面掀桌埋下伏笔，同时也建立一张安全网，让对方依然和你保持一个船上； 第三步当对方给出条件之后，态度立即来个大逆转，从极度开心到极度不开心，吓死对方，让对方面临两种选择交易失败（之前他的所有聊天成本泡汤）和交易继续（接受你的条件），突然把对方一脚踢开； 注意事项不要进店立即问价，要在最后关头问价！ 不完全会成功，因为你的条件要在对方的底线内！ 掀桌的核心不在于掀桌，在于上桌和安全网！]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>生活</tag>
        <tag>好好说话</tag>
        <tag>喜马拉雅</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《好好说话》笔记之辞职]]></title>
    <url>%2Fposts%2F4571%2F</url>
    <content type="text"><![CDATA[好的辞职谈话和好的面试表现同样两个重要！ 反例：辞职的时候说的痛快、 畅所欲言； 职场是个小圈子，贴的最久的标签是离职时给人的印象； 马云说：员工离职原因有两种：钱不到位或者心委屈了；归根结底：干的不爽。辞职的时候找靠谱理由是为了给上司留面子。 优质辞职三层意思：告知去处；上司问：接下来怎么安排？如果想保持离职前的人脉，对于离职后的计划不要隐瞒； 反例:有人签好的下一家，却说我要留学，在家休息等无厘头理由 告知去处不是告诉老板你拿到了offer，工资多少； 慎选理由； 反例:直接了当的说薪资和人际问题 温和说：我不太适应这个公司的文化，大家都太内敛了，而我比较外向，个性不太一样。 既不伤人，又表达了原因 表示感激；谈谈在公司收获，成长；辞职后的关系上下级转变为平等（前辈和新人）；请教自己不足和自己的发展；如果老板指责你不忠诚,只能表示遗憾； 感激是为了自己的专业态度，别为感情拖泥带水体现自己的职业性。 例子：关羽挂印封金，辞别曹操，追寻旧主刘备。]]></content>
      <categories>
        <category>人际沟通</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
        <tag>生活</tag>
        <tag>好好说话</tag>
        <tag>喜马拉雅</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[self和static的差异]]></title>
    <url>%2Fposts%2F25071%2F</url>
    <content type="text"><![CDATA[其实很简单。 在没有继承的情况下是一样的。主要的差异体现在继承的情况下。 差异： self：永远绑定代码所在类。当前定义类static：调用时确定哪个类。当前调用类 123456789101112131415161718192021class Books&#123; public static $title = 'Books'; public static function getTitleSelf() &#123; return self::$title; &#125; public static function getTitleStatic() &#123; return static::$title; &#125;&#125;class SmallBook extends Books&#123; public static $title = 'small';&#125;echo SmallBook::getTitleSelf().'&lt;br /&gt;';echo SmallBook::getTitleStatic().'&lt;br /&gt;';echo Books::getTitleStatic().'';echo Books::getTitleSelf().''; 运行结果： 1234BookssmallBooksBooks]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决安装Samba时浏览器打开不成功]]></title>
    <url>%2Fposts%2F21067%2F</url>
    <content type="text"><![CDATA[最开始以为是配置文件或者服务的问题，同时用testparm检测配置文件没有问题，后面发现是SElinux没有关闭。 如何关闭SELinux第一步 查看selinux状态查看selinux的详细状态，如果为enable则表示为开启 1# /usr/sbin/sestatus -v 第二步 查看selinux的模式1# getenforce 第三步 关闭SELinux 永久性关闭（这样需要重启服务器后生效） 1# sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config 临时性关闭（立即生效，但是重启服务器后失效） 12# setenforce 0#设置selinux为permissive模式（即关闭） 12# setenforce 1#设置selinux为enforcing模式（即开启）]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL常用命令]]></title>
    <url>%2Fposts%2F41388%2F</url>
    <content type="text"><![CDATA[特别初级的写了一下。 进入MySQL管理命令行的命令： 1mysql -u root -p 显示当前数据库： 1show databases; 显示创建数据的SQL语句: 1show create databases mysql; 显示创建表的SQL语句: 1show create table user; 显示表结构: 1desc tablename; 获取select相关信息: 1explain select * from user; 显示哪些进程正在运行： 1show procsslist; 显示系统变量以及值: 1show varables; 显示系统变量包涵 conn 的值: 1show varables like '%conn%';]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将CentOS的yum源改为阿里云的的yum源]]></title>
    <url>%2Fposts%2F1845%2F</url>
    <content type="text"><![CDATA[主要是提高加载速度。 阿里云Linux安装镜像源地址：http://mirrors.aliyun.com/ CentOS系统更换软件安装源 第一步：备份你的原镜像文件，以免出错后可以恢复。 1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 第二步：下载新的CentOS-Base.repo 到/etc/yum.repos.d/ 1wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo 第三步：运行yum makecache生成缓存 12yum clean allyum makecache]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
