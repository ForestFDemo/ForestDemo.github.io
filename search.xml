<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python学习笔记02天]]></title>
    <url>%2Fposts%2F3226%2F</url>
    <content type="text"><![CDATA[第四章(一)通过循环的方式遍历列表通常情况下，我们需要对列表的所有元素进行操作，这个时候就需要遍历整个列表。循环采用for。 语法: 12for change_name in list_name: print(change_name) 代码示例: 123magicians = [&apos;alice&apos;, &apos;david&apos;, &apos;carolina&apos;]for magician in magicians: print(magician) 运行结果: 123alicedavidcarolina 循环的含义其实是将列表的值逐一取出，然后进行其他操作。例如拼接、赋值、运算等。 代码示例: 123magicians = [&apos;alice&apos;, &apos;david&apos;, &apos;carolina&apos;]for magician in magicians: print(magician.upper() + &quot;, that was a great trick!&quot;) 运行结果: 123ALICE, that was a great trick!DAVID, that was a great trick!CAROLINA, that was a great trick! 注意事项: python中语法需要注意的主要是忘记缩进和不必要的缩进; 列表后面的:不能遗漏; 对于位于for语句后面且属于循环组成部分的代码行，一定要缩进。 例如: 123magicians = [&apos;alice&apos;, &apos;david&apos;, &apos;carolina&apos;]for magiciand in magicians:print(magiciand) 错误提示: 1234 File &quot;for.py&quot;, line 3 print(magiciand) ^IndentationError: expected an indented block 创建数值列表range()函数认识range()函数产生指定范围的随机值。 代码示例: 12for value in range(1,7): print(value) 运行结果: 1234567➜ day2 python range.py123456 需要注意的是这是函数的使用，可以理解为[1,7); range()函数创建数字列表要创建数字列表，可使用函数list()将range()的结果直接转换为列表。如果将range()作为list()的参数，输出将为一个数字列表。同时还可以指定步长。 代码示例: 1234range_num = list(range(1,4))print(range_num)range_num_two = list(range(1,20,2))#指定步长print(range_num_two) 运行结果: 12[1, 2, 3][1, 3, 5, 7, 9, 11, 13, 15, 17, 19] 统计数字列表的值:找出列表的最小值;1234```max()``` :找出列表的最大值;```sum()``` :求和;代码示例: list = [1,2,3,4,5,6,7]print(min(list))print(max(list))print(sum(list))12运行结果: 17281234##### 列表解析代码示例: squares = [value**2 for value in range(1,11)]print(squares)` 要使用这种语法，首先指定一个描述性的列表名，如squares;然后，指定一个左方括号， 并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为value**2，它计 算平方值。接下来，编写一个for循环，用于给表达式提供值，再加上右方括号。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习笔记01天]]></title>
    <url>%2Fposts%2F7874%2F</url>
    <content type="text"><![CDATA[第三章列表概念列表由一系列按特定顺序排列的元素组成。可以创建包含字母表中所有字母、数字0~9或 所有家庭成员姓名的列表;也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。鉴于列表通常包含多个元素，给列表指定一个表示复数的名称(如letters、digits或names)是 个不错的主意。 语法用方括号([])来表示列表，并用逗号来分隔其中的元素。 12bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]print(bicycles) 访问列表元素访问列表中的元素是通过索引获取的，而索引是从0开始的。 12345bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]print(bicycles)print(&quot;取第0个索引:&quot; + bicycles[0])print(&quot;取第1个索引:&quot; + bicycles[1])print(&quot;取第最后一个索引的值:&quot; + bicycles[-1]) 运行结果： 12345➜day1 python dsc.py[&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]取第0个索引:demo取第1个索引:chen取第-1个索引:lin 结合第0天的知识，我们现在对列表元素进行拼接的操作。 123bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]res = &quot;My name is &quot; + bicycles[0] + &quot;!&quot;;print(res) 运行结果： 1My name is demo! 修改列表元素修改元素的值可以理解为通过索引获取需要修改的值，然后重新赋值。 代码示例: 1234bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]print(bicycles)bicycles[1] = &apos;Name&apos;;print(bicycles) 可以理解为: 123456bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]print(bicycles)change_res = bicycles[1];change_res = &apos;Name&apos;;bicycles[1] = change_res;print(bicycles) 运行结果: 12[&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;][&apos;demo&apos;, &apos;Name&apos;, &apos;sen&apos;, &apos;lin&apos;] 添加列表元素添加元素主要有两种方式：列表末尾添加元素，列表中插入元素(包含开头)。其中不能影响其他的元素。 代码示例: 1234bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]print(bicycles)bicycles.append(&apos;good&apos;)print(bicycles) 运行结果： 12[&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;][&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;, &apos;good&apos;] 甚至可以创建一个没有任何的元素空的列表，然后不断的追加元素。或者可以从开头或者中间插入元素。 代码示例: 12345null_list = []null_list.append(&apos;hello&apos;)null_list.append(&apos;senlin&apos;)null_list.append(&apos;chen&apos;)print(null_list) 运行结果: 1[&apos;hello&apos;, &apos;senlin&apos;, &apos;chen&apos;] insert()可以在任意位置添加元素。 代码示例: 123in_list = [&apos;hello&apos;, &apos;senlin&apos;, &apos;chen&apos;]in_list.insert(1, &apos;name&apos;)print(in_list) 运行结果: 1[&apos;hello&apos;, &apos;name&apos;, &apos;senlin&apos;, &apos;chen&apos;] 删除列表元素删除元素的方法有:del删除、pop()弹出删除、根据值删除。 代码示例: 12345678list = [&apos;on&apos;,&apos;list&apos;,&apos;time&apos;,&apos;man&apos;,&apos;like&apos;,&apos;goods&apos;]del list[0]print(&quot;删除第0个元素的值&quot;,list)print(&quot;弹出删除第最后一个元素的值&quot;,list.pop())print(&quot;弹出删除第一个元素的值&quot;,list.pop(1))print(list)print(&quot;根据值删除&quot;,list.remove(&apos;man&apos;))print(list) 运行结果: 123456删除第0个元素的值 [&apos;list&apos;, &apos;time&apos;, &apos;man&apos;, &apos;like&apos;, &apos;goods&apos;]弹出删除第最后一个元素的值 goods弹出删除第一个元素的值 time[&apos;list&apos;, &apos;man&apos;, &apos;like&apos;]根据值删除 None[&apos;list&apos;, &apos;man&apos;] 组织列表组织列表中主要是针对列表进行排序等操作。排序分为临时排序(sorted())和永久排序(sort())。reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排 列顺序:reverse()永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。 代码示例: 123456789cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]cars.sort()print(cars) #根据字母永久排序cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]cars.sort(reverse=True)print(cars) #根据字母相反方向永久排序cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]cars.reverse()print(cars) #倒着打印列表 运行结果: 1234[&apos;audi&apos;, &apos;bmw&apos;, &apos;subaru&apos;, &apos;toyota&apos;][&apos;audi&apos;, &apos;bmw&apos;, &apos;subaru&apos;, &apos;toyota&apos;][&apos;toyota&apos;, &apos;subaru&apos;, &apos;bmwmw&apos;, &apos;audi&apos;][&apos;subaru&apos;, &apos;toyota&apos;, &apos;audi&apos;, &apos;bmw&apos;] 获取元素长度代码示例: 123cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]res = len(cars)print(res) 运行结果为：4 至此，第三章的列表已经学习完毕，本章的函数不是特别多。主要的知识点有概念，获取值，修改和排序等操作。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习笔记00天]]></title>
    <url>%2Fposts%2F46235%2F</url>
    <content type="text"><![CDATA[第一章和第二章安装和准备主要查询官网文档即可解决。官网地址：https://www.python.org Hello World终端运行 命令行运行新建以.py结尾的文件，例如hello.py;打开该文件，输入：print(&quot;Hello World&quot;);,最后运行：python hello.py ; 数据类型变量基本使用变量就是保存一个值的信息，将其存储起来，随着程序后面的不断赋值（要求存储一个新的值），该变量的值也会随着改变。如下图所示，change变量就是被重新赋值了。 运行结果如下：➜ day0 python hello.py Hello SenLin Chen! Hello Python SenLin! 语法和规则语法：变量名=赋值的值，例如change是变量名，Hello SenLin Chen!是赋值的值。这样变量change的值就是:Hello SenLin Chen!; 规则： 变量名只能包含字母、下划线和数字。数字不能开头。不能包含空格。例如:12_name;合格写法：user_name； 不能用python的关键字和函数名作为变量名，因为已经被用了，这么想就没事了。 变量名应该见名知意，尽可能简短。 字符串含义用引号括起来就是字符串。其中有单引号和双引号。例如：&#39;string&#39;,&quot;user_name&quot;等。 修改字符串大小写常用方法: title():将字符串的首字母设置为大写; upper():将字符串全部设置为大写; lower():将字符串全部设置为小写; 代码示例:change = &#39;hello,my name is demo chen!&#39; print(change.title()) print(change.upper()) print(change.lower()) 运行结果:➜ day0 python hello.py Hello ,My Name Is Demo Chen! HELLO ,MY NAME IS DEMO CHEN! hello ,my name is demo chen! 拼接字符串使用场景:多个字符串合并为一个字符串形式。 使用方法:采用+的形式来拼接。 代码示例:user = &#39;hello&#39; name = &#39;senlin&#39; user_name = user + &#39;_&#39; + name 运行结果:➜day0 python user_name.py hello_senlinenlin 添加空白制表符:\t;换行:\n ;可以组合使用。 删除空白&#39;demo &#39;不等于‘demo’;所以需要去除空白。 相关函数: rstrip():去除末尾的空白;lstrip():去除开头的空白;strip():去除开头和末尾的空白; 数字数字主要有整数和浮点数。主要的运算有:加(+)、减(-)、乘(*)、除(/)、乘方(**)等 代码示例: str():将非字符串表示为字符串。 注释#为Python注释的语法。 代码示例:]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
