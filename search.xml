<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python学习笔记]]></title>
    <url>%2Fposts%2F7874%2F</url>
    <content type="text"><![CDATA[User:DemoChenDate:2018-02-14Mark:书籍《Python编程从入门到实践》 第三章列表 概念 列表由一系列按特定顺序排列的元素组成。可以创建包含字母表中所有字母、数字0~9或 所有家庭成员姓名的列表;也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。鉴于列表通常包含多个元素，给列表指定一个表示复数的名称(如letters、digits或names)是 个不错的主意。 语法：用方括号([])来表示列表，并用逗号来分隔其中的元素。 12bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]print(bicycles) 访问列表元素 访问列表中的元素是通过索引获取的，而索引是从0开始的。 12345bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]print(bicycles)print(&quot;取第0个索引:&quot; + bicycles[0])print(&quot;取第1个索引:&quot; + bicycles[1])print(&quot;取第最后一个索引的值:&quot; + bicycles[-1]) 运行结果： 12345➜day1 python dsc.py[&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]取第0个索引:demo取第1个索引:chen取第-1个索引:lin 结合第0天的知识，我们现在对列表元素进行拼接的操作。 123bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]res = &quot;My name is &quot; + bicycles[0] + &quot;!&quot;;print(res) 运行结果： 1My name is demo! 修改列表元素 修改元素的值可以理解为通过索引获取需要修改的值，然后重新赋值。 代码示例: 1234bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]print(bicycles)bicycles[1] = &apos;Name&apos;;print(bicycles) 可以理解为: 123456bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]print(bicycles)change_res = bicycles[1];change_res = &apos;Name&apos;;bicycles[1] = change_res;print(bicycles) 运行结果: 12[&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;][&apos;demo&apos;, &apos;Name&apos;, &apos;sen&apos;, &apos;lin&apos;] 添加列表元素 添加元素主要有两种方式：列表末尾添加元素，列表中插入元素(包含开头)。其中不能影响其他的元素。 代码示例: 1234bicycles = [&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;]print(bicycles)bicycles.append(&apos;good&apos;)print(bicycles) 运行结果： 12[&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;][&apos;demo&apos;, &apos;chen&apos;, &apos;sen&apos;, &apos;lin&apos;, &apos;good&apos;] 甚至可以创建一个没有任何的元素空的列表，然后不断的追加元素。或者可以从开头或者中间插入元素。 代码示例: 12345null_list = []null_list.append(&apos;hello&apos;)null_list.append(&apos;senlin&apos;)null_list.append(&apos;chen&apos;)print(null_list) 运行结果: 1[&apos;hello&apos;, &apos;senlin&apos;, &apos;chen&apos;] insert()可以在任意位置添加元素。 代码示例: 123in_list = [&apos;hello&apos;, &apos;senlin&apos;, &apos;chen&apos;]in_list.insert(1, &apos;name&apos;)print(in_list) 运行结果: 1[&apos;hello&apos;, &apos;name&apos;, &apos;senlin&apos;, &apos;chen&apos;] 删除列表元素 删除元素的方法有:del删除、pop()弹出删除、根据值删除。 代码示例: 12345678list = [&apos;on&apos;,&apos;list&apos;,&apos;time&apos;,&apos;man&apos;,&apos;like&apos;,&apos;goods&apos;]del list[0]print(&quot;删除第0个元素的值&quot;,list)print(&quot;弹出删除第最后一个元素的值&quot;,list.pop())print(&quot;弹出删除第一个元素的值&quot;,list.pop(1))print(list)print(&quot;根据值删除&quot;,list.remove(&apos;man&apos;))print(list) 运行结果: 123456删除第0个元素的值 [&apos;list&apos;, &apos;time&apos;, &apos;man&apos;, &apos;like&apos;, &apos;goods&apos;]弹出删除第最后一个元素的值 goods弹出删除第一个元素的值 time[&apos;list&apos;, &apos;man&apos;, &apos;like&apos;]根据值删除 None[&apos;list&apos;, &apos;man&apos;] 组织列表 组织列表中主要是针对列表进行排序等操作。排序分为临时排序(sorted())和永久排序(sort())。reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排 列顺序:reverse()永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。 代码示例: 123456789cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]cars.sort()print(cars) #根据字母永久排序cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]cars.sort(reverse=True)print(cars) #根据字母相反方向永久排序cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]cars.reverse()print(cars) #倒着打印列表 运行结果: 1234[&apos;audi&apos;, &apos;bmw&apos;, &apos;subaru&apos;, &apos;toyota&apos;][&apos;audi&apos;, &apos;bmw&apos;, &apos;subaru&apos;, &apos;toyota&apos;][&apos;toyota&apos;, &apos;subaru&apos;, &apos;bmwmw&apos;, &apos;audi&apos;][&apos;subaru&apos;, &apos;toyota&apos;, &apos;audi&apos;, &apos;bmw&apos;] 获取元素长度 代码示例: 123cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]res = len(cars)print(res) 运行结果为：4 至此，第三章的列表已经学习完毕，本章的函数不是特别多。主要的知识点有概念，获取值，修改和排序等操作。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
